def generate_default_observer_schema_dict(manifest_dict, first_level=False):
    """
    The values corresponding to different keys in the new dict are generated based on the value type (such as dict and list) in the manifest_dict file. Then new dictionary is returned.
    """
    schema = {}
    for key, value in manifest_dict.items():
        if first_level:
            if isinstance(value, dict):
                schema_key = key
                schema_value = {
                    'type': 'dict',
                    'properties': {}
                }
                for k, v in value.items():
                    schema_value['properties'][k] = generate_schema(v)
                schema[schema_key] = schema_value
            elif isinstance(value, list):
                schema_value = {
                    'type': 'array',
                    'items': generate_schema(value[0])
                }
                schema[schema_key] = schema_value
            else:
                schema_value = {
                    'type': str(type(value))
                }
                schema[schema_key] = schema_value
        else:
            # Placeholder for nested structure handling
            # This part is not implemented and requires recursive processing
            pass
    return schema

def generate_schema(value):
    """
    Generates a schema for a given value based on its type.
    """
    if isinstance(value, dict):
        return {
            'type': 'dict',
            'properties': {k: generate_schema(v) for k, v in value.items()}
        }
    elif isinstance(value, list):
        return {
            'type': 'array',
            'items': {generate_schema(value[0])}
        }
    else:
        return {
            'type': str(type(value))
        }