def absorb(self, args):
    """
    Given an `args` sequence of expressions, return a new list of expression applying absorption.
    """
    def process_expression(expr):
        import re
        terms = re.findall(r'([+-]?\d*[a-zA-Z]+)', expr)
        term_counts = {}
        for term in terms:
            if not term:
                continue
            var = term[-1]
            coeff = term[:-1] or '1'
            term_counts[var] = term_counts.get(var, 0) + coeff
        result = []
        for var, coeff in term_counts.items():
            if coeff == '1':
                coeff_str = ''
            else:
                coeff_str = coeff
            result.append(f"{coeff_str}{var}")
        return " + ".join(result)
    
    return [process_expression(arg) for arg in args]