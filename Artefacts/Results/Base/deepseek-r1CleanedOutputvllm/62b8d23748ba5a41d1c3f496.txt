import functools
from collections import deque

def lfu_cache(maxsize=128, typed=False):
    """
    Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Least Frequently Used (LFU)
    algorithm.
    """
    def decorator(func):
        cache = {}
        usage_order = deque()
        
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            key = args if typed else None
            try:
                result = cache[args]
                usage_order.append(args)
                return result
            except (KeyError, TypeError):
                if len(cache) >= maxsize:
                    # Evict least recently used
                    cache.pop(usage_order.popleft())
                new_result = func(*args, **kwargs)
                cache[args] = new_result
                usage_order.append(args)
                return new_result
        return wrapper
    return decorator