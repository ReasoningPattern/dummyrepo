

```python
def determineMetaclass(bases, explicit_mc=None):
    """
    Determine metaclass from 1+ bases and optional explicit __metaclass__
    """
    if explicit_mc is not None:
        return explicit_mc
    metaclasses = [type(b) for b in bases]
    if all(mc is type for mc in metaclasses):
        return type
    mc = metaclasses[0]
    for candidate in metaclasses[1:]:
        if issubclass(candidate, mc):
            mc = candidate
        elif issubclass(mc, candidate):
            pass
        else:
            raise TypeError("Inconsistent metaclass")
    return mc
```