

To solve this problem, we need to convert a given integer into a string using a specified alphabet. The integer represents a short UUID, and the output string should be padded to a specified length if provided. The conversion should handle cases where the integer is zero and ensure the output string is correctly formatted based on the given alphabet length.

### Approach
1. **Handle Zero Case**: If the input number is zero, directly return the first character of the alphabet since zero is represented by the first character in any base.
2. **Determine Alphabet Length**: Calculate the length of the provided alphabet, which determines the base of the conversion.
3. **Calculate Minimum Length**: Compute the minimum number of characters required to represent the given number in the specified base. This is done using the logarithm function to determine the smallest number of digits needed.
4. **Base Conversion**: Convert the number into the specified base using a custom loop to build the string representation.
5. **Apply Padding**: If padding is specified, pad the resulting string with leading zeros (using the first character of the alphabet) to meet the required length. If padding is not specified or is shorter than the required length, truncate the string to the specified length.

### Solution Code
```python
import math

def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:
    """
    Convert a number to a string, using the given alphabet.
    
    The number represents a short UUID.
    The output has the most significant digit first.
    @param number: Int value
    @param alphabet : List with letters
    @param padding : Optional with int value
    @return string value corresponded to int
    """
    if number == 0:
        return alphabet[0]
    
    L = len(alphabet)
    if L == 0:
        raise ValueError("Alphabet cannot be empty.")
    
    n = math.ceil(math.log(number + 1, L))
    
    s = []
    for _ in range(n):
        s.append(alphabet[number % L])
        number = number // L
    
    s = ''.join(reversed(s))
    
    if padding is not None:
        if padding < len(s):
            s = s[-padding:]
        else:
            s = s.ljust(padding, alphabet[0])
    
    return s
```

### Explanation
1. **Zero Handling**: The function immediately returns the first character of the alphabet if the input number is zero.
2. **Alphabet Length Check**: The length of the alphabet is determined, which is crucial for base conversion.
3. **Minimum Length Calculation**: Using logarithms, the function calculates the minimum number of characters needed to represent the number in the given base.
4. **Base Conversion Loop**: The number is repeatedly divided by the base (length of the alphabet), and the remainder is used to index into the alphabet. This builds the string from least significant to most significant digit.
5. **Padding Application**: If padding is specified, the string is padded with leading zeros to meet the required length. If padding is shorter than the string length, the string is truncated from the left to retain the most significant digits.

This approach ensures that the integer is correctly converted into a string representation using the specified alphabet and padding, handling edge cases such as zero and varying padding lengths appropriately.