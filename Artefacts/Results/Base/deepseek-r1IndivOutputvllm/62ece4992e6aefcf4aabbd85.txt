

To solve this problem, we need to find the roots in a transitive hierarchy from a given graph. The function should return a set of nodes that are not reachable from any other node via the given property, which represents a parent-child relationship.

### Approach
The approach to solve this problem involves the following steps:
1. **Graph Traversal**: We need to traverse the graph starting from the given roots and follow the property in the parent-child direction.
2. **Root Identification**: Nodes that do not have any incoming edges (i.e., nodes that are not reachable from any other node via the given property) are considered roots.
3. **Optional Roots Parameter**: The function accepts an optional set of roots, which are the starting points for the traversal. If not provided, it defaults to an empty set.

The function will perform a breadth-first search (BFS) starting from the given roots, following the property in the parent-child direction, and collect all reachable nodes. These nodes are considered roots of the hierarchy.

### Solution Code
```python
from rdflib.extras import query

def find_roots(
    graph: "Graph", 
    prop: "URIRef", 
    roots: Optional[Set["Node"]] = None
) -> Set["Node"]:
    if roots is None:
        roots = set()
    roots = set(roots)
    roots.update({n for n in graph.nodes() if not any(t[2] == n and t[1] == prop for t in graph.triples())})
    return roots
```

### Explanation
- **Graph Traversal**: The function uses a set to keep track of visited nodes to avoid processing the same node multiple times.
- **Root Identification**: For each node, we check if there are any triples where the node is the child and the given property is the subject. If no such triples exist, the node is identified as a root.
- **Efficiency**: The solution efficiently checks each node and its triples to determine if it is a root, ensuring that we only process each node once.

This approach ensures that we correctly identify all nodes that are not reachable from any other node via the given property, thus finding all roots in the transitive hierarchy.