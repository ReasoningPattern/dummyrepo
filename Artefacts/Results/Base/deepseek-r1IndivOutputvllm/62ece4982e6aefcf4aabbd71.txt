

To solve this problem, we need to write a Python function that converts keys in a dictionary from their current filename format with wildcards to a regex format. The goal is to transform each key into a regex pattern that matches any filename ending with .cpp, regardless of the characters before it.

### Approach
1. **Problem Analysis**: The function is given a dictionary where the keys are filenames that may include wildcards. Our task is to convert these keys into regex patterns. Specifically, any key that ends with `*.cpp` should be converted to a regex pattern that matches any string ending with `.cpp`.
2. **Regex Pattern Construction**: The regex pattern `.*\\.cpp$` is used because it matches any string (denoted by `.*`) ending with `.cpp` (denoted by `\\.cpp$`).
3. **Iteration and Transformation**: We iterate over each key-value pair in the input dictionary. For each key, we check if it ends with `*.cpp` using a regular expression. If it does, we replace the key with the regex pattern `.*\\.cpp$`. Otherwise, we leave the key unchanged.

### Solution Code
```python
import re

def regex_dict(item):
    regex_keys = {}
    for key, value in item.items():
        if re.search(r'.*\\.cpp$', key):
            new_key = r'.*\\.cpp$'
            regex_keys[new_key] = value
        else:
            regex_keys[key] = value
    return regex_keys
```

### Explanation
- **Regex Pattern**: The regex pattern `.*\\.cpp$` is used to match any string that ends with `.cpp`. Here, `.*` is a greedy match that consumes any number of characters, and `\\.cpp$` ensures that the string ends with `.cpp`.
- **Iteration and Check**: For each key in the dictionary, we use `re.search` to check if the key ends with `*.cpp`. If it does, we replace the key with the regex pattern `.*\\.cpp$`.
- **Transformation**: The function constructs a new dictionary where each key that matches the pattern is replaced with the corresponding regex pattern, while the values remain unchanged.

This approach ensures that all filenames ending with `.cpp` are correctly transformed into their respective regex patterns, making it easier to perform regex-based operations on them.