

To solve this problem, we need to create a function that transforms each given path into a glob pattern if it is not already one. The function should return a tuple of these transformed paths.

### Approach
The approach involves the following steps:
1. **Check for Glob Patterns**: Determine if a given path is already a glob pattern. A glob pattern is defined as a string that starts with an optional directory separator, followed by any valid glob characters (like '*' and '?'), and ends with a valid glob pattern.
2. **Transform Non-Glob Paths**: If a path is not a glob pattern, it is transformed into a glob pattern by escaping any special characters and appending a '*' at the end. This ensures that the path matches the glob pattern syntax.

The function uses a regular expression to check if a path is a valid glob pattern. If it is not, the path is transformed into a glob pattern.

### Solution Code
```python
import re

def make_find_paths(find_paths):
    pattern = r'^([/\\]?[a-zA-Z0-9][a-zA-Z0-9_~%*?&\'()|:;=+-]+([/\\]?[a-zA-Z0-9][a-zA-Z0-9_~%*?&\'()|:;=+-]*)*)$'
    transformed_paths = []
    for path in find_paths:
        if re.fullmatch(pattern, path):
            transformed_paths.append(path)
        else:
            transformed_paths.append(re.escape(path) + '*')
    return tuple(transformed_paths)
```

### Explanation
- **Regular Expression Check**: The regular expression `pattern` is used to match valid glob patterns. It ensures that the path starts with an optional directory separator, followed by valid characters, and ends appropriately.
- **Transformation Logic**: For each path, if it matches the glob pattern (checked using `re.fullmatch`), it is added to the result as is. If not, it is escaped to handle any special characters and a '*' is appended to form a valid glob pattern.
- **Return Value**: The function returns a tuple of transformed paths, ensuring each path is either a valid glob pattern or transformed into one.

This approach efficiently handles the transformation of paths while ensuring correctness by leveraging regular expressions to identify valid glob patterns.