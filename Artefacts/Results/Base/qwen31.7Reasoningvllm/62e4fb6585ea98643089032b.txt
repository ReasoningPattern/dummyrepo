
Okay, I need to write a Python function called parse_version that takes a string and returns a tuple of integers. The docstring says it converts a string like "1.2.3" into (1, 2, 3). So the main task is to split the string by dots and convert each part to an integer.

First, I should split the input string into parts. Using the split('.') method would split it into a list of strings. Then, I need to convert each element to an integer. But wait, what if the input is empty or has invalid characters? The problem statement doesn't mention handling errors, so maybe I don't need to handle that. The function is probably intended for valid inputs.

So the steps are: split the string by '.', then map each part to int, then convert the list to a tuple. Let me test with an example. If the input is "1.2.3", split gives ["1", "2", "3"], mapping to [1,2,3], then tuple becomes (1,2,3). That's correct.

So the code would be something like:

def parse_version(s: str) -> tuple[int, ...]:
    return tuple(int(part) for part in s.split('.'))

Wait, but the return type is specified as tuple[int, ...], which in Python is a tuple of integers. The generator expression would produce a tuple of integers, which is exactly what's needed. So that should work.

I should make sure that the function is properly formatted. The parameters are correct, and the return type is specified. No exceptions are raised, so the function is straightforward.
