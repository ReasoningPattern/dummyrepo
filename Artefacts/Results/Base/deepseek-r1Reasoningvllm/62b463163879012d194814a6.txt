Okay, I need to generate Python code based on the given function signature and docstring. The function is called files_list_from_zipfile and it takes a zip_path as an argument. The docstring says it should return the files in the given zip path. 

Hmm, I remember that the zipfile module in Python can be used to read files from a zip archive. So I should import zipfile. But wait, sometimes the path might not be a real file, so I should handle exceptions. Maybe raise a FileNotFoundError if the zip file doesn't exist.

Next, I need to open the zip file. Using a with statement would be good to ensure the file is closed properly. Inside the context manager, I'll open the file using zipfile.ZipFile(zip_path, 'r'). 

Once the zip file is open, I can extract the list of files using the listdir() method. Then, I'll loop through each entry and check if it's a file using isfile(). If it is, I'll add it to a list. 

Wait, the function is supposed to return the files, so I'll collect them in a list and return it. Also, I should make sure that the function handles any errors, like if the zip_path doesn't exist. So, I'll wrap the opening and processing in a try-except block to catch FileNotFoundError and maybe others, but the main one is probably the zip file not existing.

Putting it all together, I'll import zipfile, define the function, handle exceptions, open the zip file, get the entries, filter the files, and return them. That should cover everything the docstring requires.
