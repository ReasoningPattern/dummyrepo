Okay, I need to write a Python function called oneline. The function takes a script and an optional separator, which defaults to " && ". The goal is to convert the script into a one-line command using the given separator.

First, I should think about what the function needs to do. If the script is already a single line, I just return it as is. But if it's multi-line, I need to join each line with the separator.

So, I'll start by checking if the script is a single line. How can I determine that? Well, if the script doesn't contain any newline characters, it's already one line. I can check this using '\n' in script. If it's not there, return script immediately.

If the script has multiple lines, I'll split it into lines using the splitlines() method. This will give me a list of each line in the script.

Next, I'll join these lines with the separator. The separator is optional, so I should handle cases where it's not provided. Wait, the function signature already sets the default, so I don't need to worry about that.

Putting it all together, the function will look something like this: check if script is a single line. If yes, return it. If not, split into lines and join with the separator.

I should also make sure to handle empty scripts or scripts with only whitespace. But I think the splitlines() method takes care of that by ignoring empty lines.

Wait, what if the script is an empty string? Then splitlines() returns an empty list, and joining would result in an empty string, which is correct.

Another edge case: if the script has only one line, regardless of newlines, it should return as is. So the initial check should be sufficient.

Testing this logic: if script is "echo hello", return it. If it's "echo hello\nworld", split into ["echo hello", "world"] and join with " && ", resulting in "echo hello && world".

I think that covers the necessary cases. Now, I'll write the code accordingly.
