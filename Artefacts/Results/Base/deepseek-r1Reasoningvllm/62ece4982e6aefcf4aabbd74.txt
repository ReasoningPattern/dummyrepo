Okay, I need to write a Python function called prepare_repository_from_archive. The function takes three arguments: archive_path, filename, and tmp_path. The docstring explains that this function uncompresses an archive and returns a URL which can be used as an origin for a Git repository. 

First, I should consider how to handle different file extensions. The function should recognize common compression formats like .tar.gz, .tar.bz2, and .zip. So, I'll need to determine the appropriate compression method based on the file extension.

I'll start by extracting the base name of the archive_path without the extension. Then, I'll check the suffix of the archive_path to decide the decompression method. For example, if it ends with .tar.gz, I'll use tarfile.open with 'x' mode to create an archive object.

Next, I'll open the archive in read-binary mode to avoid issues with special characters. Using context managers like 'with' ensures that the file is properly closed after decompression.

After decompressing, I'll create the output directory using tmp_path. If the output directory doesn't exist, I'll create it using Path.mkdir with parents=True and exist_ok=True to avoid errors if the directory already exists.

Then, I'll extract each member from the compressed archive into the output directory. For each member, I'll use the appropriate method based on its extension. For gzipped files, I'll use .read() to get the bytes and then decode them. For bzip2 files, I'll use .read() as well since it's also a streaming file. For zip files, I'll open each member in 'r' mode to read the contents.

Once all members are extracted, I'll construct the repository URL. The URL should point to the tmp_path directory. For local repositories, GitHub's file URL is typically used, so I'll format the URL as "file://" followed by the tmp_path.

I should also handle exceptions. If any error occurs during decompression or file extraction, the function should catch it and raise a RuntimeError with a message indicating the failure and the original error.

Putting it all together, the function will return the constructed URL after successfully processing the archive. I'll make sure to import necessary modules like tarfile, Path, and os for file handling and path operations.

I should test the function with different archive types to ensure it works correctly. For example, a .tar.gz file should decompress into a directory, and the URL should be correctly formed. Similarly, .zip and .tar.bz2 files should be handled properly.

Finally, I'll write the code, making sure to include all the necessary imports and handle edge cases like missing files or incorrect extensions by raising appropriate errors.
