Okay, I need to write a Python function called parse_frequency that takes a frequency string and returns a datetime.timedelta instance. Let me think about how to approach this.

First, the function should check if the input frequency is None or "always". In those cases, it should return None. So I'll add an if statement at the beginning of the function.

If the frequency is a valid string, I need to parse it. The string should be in the format "number timeunit", where timeunit can be things like seconds, minutes, etc. So I'll split the string into parts using the split() method. That should give me a list where the first element is the number and the second is the unit.

I should handle exceptions in case the string doesn't split correctly. Maybe wrap the splitting in a try-except block to catch ValueError. If it fails, raise a ValueError as per the requirements.

Once I have the number and unit, I need to create a timedelta. I remember that datetime.timedelta accepts a keyword argument for days, seconds, etc. So I'll use timedelta(seconds=number) but replace 'seconds' with the actual unit.

Wait, but the unit could be something else like 'minutes', 'hours', etc. So the function needs to handle those. Using the unit parameter in timedelta should work because it can accept different units like 'min', 'hr', etc.

Putting it all together, the function will first check for None or "always". Then split the string, handle exceptions, and create the timedelta instance.

I should also make sure that the function returns the correct type. If everything goes well, it returns a timedelta; otherwise, it returns None or raises an error.

Let me outline the steps:
1. Check if frequency is None or "always", return None.
2. Else, split the string into parts.
3. Try to convert the first part to an integer.
4. Use the second part as the unit in timedelta.
5. If any step fails, raise ValueError.
6. Return the created timedelta.

I think that covers all the cases. Now, I'll write the code accordingly.
