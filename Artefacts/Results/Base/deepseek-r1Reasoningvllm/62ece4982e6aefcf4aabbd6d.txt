Okay, I need to write a Python function called string_to_int. The function takes two parameters: a string and an alphabet list. The goal is to convert the string into an integer based on the given alphabet. 

First, I should think about how the conversion works. Each character in the string corresponds to a position in the alphabet list. So, for each character in the string, I find its index in the alphabet. Then, I convert these indices into a number. 

Wait, how exactly do I combine these indices into a single integer? Oh right, it's similar to how letters are converted to ASCII values, but here it's based on the alphabet's order. So each character's index is like a digit in a base equal to the length of the alphabet. 

For example, if the alphabet has 3 letters, each position in the string can be 0, 1, or 2. So the string "a" would be 0, "b" would be 1, "c" would be 2. If the string is "ab", it's 0 * 3^1 + 1 = 1. 

So the steps are:
1. Check if all characters in the string are in the alphabet. If not, maybe raise an error. But the docstring says the string consists of letters in the alphabet, so maybe we don't need to handle that.
2. For each character in the string, find its index in the alphabet.
3. Starting from the first character, calculate the integer by treating the indices as digits in a base equal to the length of the alphabet.

Wait, but the order matters. The first character is the most significant digit. So for "abc", if the alphabet is ['a', 'b', 'c'], the integer is 0*3^2 + 0*3^1 + 2 = 2? Or wait, maybe the first character is the most significant. Let me think. If the string is "abc", each character's index is 0,0,2. So the number would be 0*(3^2) + 0*(3^1) + 2 = 2. But maybe the string is treated as a sequence where each character contributes to the next digit. So the first character is multiplied by (base)^(n-1), where n is the length of the string. 

Wait, perhaps the function is similar to converting a string of digits to an integer, where each digit is a character's index. So for example, if the alphabet is ['a', 'b', 'c'], then 'a' is 0, 'b' is 1, 'c' is 2. So the string 'abc' would be 0*3^2 + 1*3^1 + 2 = 0 + 3 + 2 = 5. 

Wait, but the order is such that the first character is the highest place value. So each character is added as the next digit. So for 'abc', it's 0 * 3^2 + 1 * 3^1 + 2 * 3^0 = 0 + 3 + 2 = 5.

But I'm not sure if the function is supposed to treat the string as a base-N number where N is the length of the alphabet. That makes sense. So the function would calculate the integer by iterating over each character, finding its index, and then calculating the sum of (index) * (base)^(position), where position starts from the length of the string minus one down to zero.

So, for each character in the string, starting from the first, we calculate the total as total = total * base + index. That's a common way to compute base conversions. For example, 'abc' with base 3: start with 0. 0*3 +0=0. Then 0*3 +1=1. Then 1*3 +2=5. So that's correct.

So the code steps are:
- Determine the base as the length of the alphabet.
- Initialize a result variable as 0.
- For each character in the string:
   - Find its index in the alphabet.
   - Update the result as result * base + index.
- Return the result.

But wait, what if the alphabet is empty? Well, the function expects the string to consist of letters in the alphabet, so the alphabet can't be empty because otherwise, the string would have characters not in the alphabet. So we can assume the alphabet is non-empty.

Now, implementing this in Python.

First, get the length of the alphabet as base = len(alphabet).

Then, for each char in string:

But wait, the order is important. The first character is the most significant digit. So for 'a', it's 0. For 'ba', it's 1*3 +0=3.

So the code would be:

def string_to_int(string: str, alphabet: List[str]) -> int:
    base = len(alphabet)
    result = 0
    for char in string:
        index = alphabet.index(char)
        result = result * base + index
    return result

Wait, but what if the alphabet has duplicate letters? Oh, the problem says the string consists of letters in the alphabet, but it doesn't specify if the alphabet is unique. But in the function, if the alphabet has duplicates, the index() method will return the first occurrence. That might cause issues. So perhaps the alphabet is a list of unique characters. The function's docstring doesn't mention uniqueness, but in practice, the function would fail if the string contains a character not in the alphabet, but if the alphabet has duplicates, index() would return the first occurrence, which might not be correct. 

But since the problem statement says the string consists of letters in the alphabet, perhaps we can assume that the alphabet is a list of unique characters. So the code is correct.

Testing with the example where alphabet is ['a', 'b', 'c']:

string 'a' should return 0.

string 'b' returns 1.

string 'c' returns 2.

string 'ab' is 0*3 +1=1.

string 'ba' is 1*3 +0=3.

string 'abc' is 0*3^2 +1*3 +2= 0+3+2=5.

Yes, that seems correct.

Another test case: alphabet ['x', 'y', 'z'].

string 'x' is 0.

string 'y' is 1.

string 'z' is 2.

string 'xy' is 0*3 +1=1.

string 'yx' is 1*3 +0=3.

Yes.

So the code should work.
