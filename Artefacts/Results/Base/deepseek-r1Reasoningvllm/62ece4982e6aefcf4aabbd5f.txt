Okay, I need to write a Python function called paging that takes a WAPI response and a max_results integer. The function should return a generator that yields pages of the response, each with up to max_results items. 

First, I should figure out how to split the response list into chunks. If the response has, say, 10 items and max_results is 3, the first page would have items 0-2, the second 3-5, and so on. 

I'll need to calculate the number of pages. That's done by dividing the total length of the response by max_results and rounding up. Using (len(response) + max_results -1) // max_results should handle that correctly.

Then, for each page from 0 to the number of pages minus one, I'll slice the response list. Each slice starts at i * max_results and ends at (i+1) * max_results. But I have to make sure that if the last page has fewer items, it doesn't throw an error. Using response[i*max_results : (i+1)*max_results] should handle that because slicing beyond the list just returns what's available.

I should create a generator that yields each of these slices one by one. So, I'll loop over the range of the number of pages and yield each sliced sublist.

Putting it all together, the function will calculate the number of pages, then loop through each page index, slice the response, and yield it. 

Wait, what if the response is empty? Well, the code should handle that gracefully because the loop won't run, and nothing is yielded. That's fine.

So the code inside the function will be:

Calculate pages as (len(response) + max_results -1) // max_results.

Then for i in range(pages), yield response[i*max_results : (i+1)*max_results].

That should cover all cases, including when the response length isn't a multiple of max_results.
