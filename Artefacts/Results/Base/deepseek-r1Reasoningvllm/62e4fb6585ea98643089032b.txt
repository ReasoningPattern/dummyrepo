Okay, I need to write a Python function called parse_version that takes a string and returns a tuple of integers. The string is a version number where each part is separated by dots, like "1.2.3". 

First, I should think about how to split the string into parts. The split method can be used, right? So s.split('.') will give me a list of strings, each representing a version part.

But wait, what if the string has empty parts? Like if someone passes "1. .2"? I should probably handle that, but the problem statement doesn't mention it, so maybe I don't need to worry for now.

Once I have the list of strings, I need to convert each to an integer. I can use a list comprehension for that. So something like [int(part) for part in parts].

Putting it all together, the function will split the string, convert each part to int, and return the resulting tuple.

So the code should look like:

def parse_version(s: str) -> tuple[int, ...]:
    return tuple(int(x) for x in s.split('.'))

Wait, but in Python, if the string is empty, s.split('.') would return [''], which would cause an error when converting to int. But the problem probably assumes valid input, so I don't need to handle that unless specified.

I think this should work as per the docstring.
