Okay, I need to generate Python code based on the given function signature and docstring. The function is called validate_version_inventories and it takes a parameter version_dirs, which is an array of version directory names in sequence.

First, I'll start by looking at the docstring. It says that each version should have an inventory up to that point and that we need to record any content digests different from the root inventory for validation.

So, the goal is to validate that each version's inventory is complete and to check for any discrepancies in content digests. I think the function should return True if everything is valid and False otherwise.

I'll need to initialize some variables. Maybe a dictionary to keep track of the root inventories and another for content digests. Let's call them root_inventories and content_digests.

Then, I'll loop through each version_dir in version_dirs. For each directory, I should load the inventory and content_digests. I'll check if the version number exists in root_inventories. If it does, I'll compare the current inventory with the expected one. If they don't match, return False.

Also, I need to check the content_digests. For each digest in the current version, it should either match the root's digest or be new. If a digest doesn't match and isn't new, return False.

Wait, how do I determine if a digest is new? Maybe I'll keep a set of allowed digests. If a digest is in the set, it's allowed. If not, it's a problem.

Putting it all together, I'll loop through each version, load the inventories and digests, check against the root, and ensure all digests are either allowed or new.

I should also make sure that the function handles cases where a version is missing or has incorrect inventories or digests.

So, the code structure will be:

- Initialize root_inventories and content_digests.
- Loop over each version_dir.
- For each, load inventory and digests.
- Check if version exists and compare inventory.
- Check that all digests are allowed or new.
- If any condition fails, return False.
- If all pass, return True.

I think that covers the main points. Now, I'll write the code accordingly.
