

```python
import time
from functools import wraps
from collections import OrderedDict

def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):
    """
    Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Least Recently Used (LRU)
    algorithm with a per-item time-to-live (TTL) value.
    """
    cache = OrderedDict()
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            key = (args, frozenset(kwargs.items())) if typed else (tuple(args), frozenset(kwargs.items()))
            current_time = timer()
            if key in cache:
                timestamp, value = cache[key]
                if current_time - timestamp <= ttl:
                    cache.move_to_end(key)
                    return value
                else:
                    cache.pop(key)
            value = func(*args, **kwargs)
            cache[key] = (current_time, value)
            if len(cache) > maxsize:
                cache.popitem(last=False)
            return value
        return wrapper
    return decorator
```