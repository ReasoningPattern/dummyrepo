

```python
import datetime

def parse_frequency(frequency):
    """
    Given a frequency string with a number and a unit of time, return a corresponding
    datetime.timedelta instance.
    If the frequency is None or "always", return None.
    Raise ValueError if the given frequency cannot be parsed.
    For instance, given "3 days", return datetime.timedelta(days=3)

    @param frequency :  A frequency string "number timeunit"

    @return datetime.timedelta, the corresponding datetime
    """
    if frequency is None or frequency == "always":
        return None
    parts = frequency.split()
    if len(parts) != 2:
        raise ValueError("Invalid frequency format")
    try:
        num = int(parts[0])
    except ValueError:
        raise ValueError("Invalid number in frequency")
    unit = parts[1].lower()
    unit_map = {
        'day': ('days', 1),
        'days': ('days', 1),
        'hour': ('hours', 1),
        'hours': ('hours', 1),
        'minute': ('seconds', 60),
        'minutes': ('seconds', 60),
        'second': ('seconds', 1),
        'seconds': ('seconds', 1),
        'microsecond': ('microseconds', 1),
        'microseconds': ('microseconds', 1),
        'millisecond': ('microseconds', 1000),
        'milliseconds': ('microseconds', 1000),
    }
    if unit not in unit_map:
        raise ValueError(f"Invalid time unit: {unit}")
    param, factor = unit_map[unit]
    value = num * factor
    if param == 'days':
        return datetime.timedelta(days=value)
    elif param == 'hours':
        return datetime.timedelta(hours=value)
    elif param == 'seconds':
        return datetime.timedelta(seconds=value)
    elif param == 'microseconds':
        return datetime.timedelta(microseconds=value)
    else:
        raise ValueError(f"Invalid time unit: {unit}")
```