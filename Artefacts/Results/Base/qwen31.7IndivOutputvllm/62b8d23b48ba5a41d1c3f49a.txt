

```python
def mru_cache(maxsize=128, typed=False):
    """
    Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Most Recently Used (MRU)
    algorithm.
    """
    def decorator(func):
        cache = {}
        order_list = []
        def wrapper(*args, **kwargs):
            key = (args, kwargs)
            if typed:
                # Handle typed parameter here, but not implemented yet
                pass
            if key in cache:
                return cache[key]
            result = func(*args, **kwargs)
            cache[key] = result
            order_list.append(key)
            if len(order_list) > maxsize:
                oldest = order_list.pop(0)
                del cache[oldest]
            return result
        return wrapper
    return decorator
```