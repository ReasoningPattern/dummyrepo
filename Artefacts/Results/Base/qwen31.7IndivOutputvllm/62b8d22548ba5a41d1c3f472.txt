

```python
def cachedmethod(cache, key, lock=None):
    def decorator(func):
        def wrapper(*args, **kwargs):
            key_arg = key(*args, **kwargs)
            if key_arg in cache:
                return cache[key_arg]
            result = func(*args, **kwargs)
            cache[key_arg] = result
            return result
        if lock is not None:
            lock.acquire()
            try:
                pass  # The wrapper is called, but the lock is already acquired
            finally:
                lock.release()
        return wrapper
    return decorator
```