

```python
import time

def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):
    """
    Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Least Recently Used (LRU)
    algorithm with a per-item time-to-live (TTL) value.
    """
    def decorator(func):
        cache = {}
        order = []

        def wrapper(*args, **kwargs):
            key = (args, kwargs)
            current_time = timer()

            if key in cache:
                timestamp = cache[key][2]
                if current_time - timestamp > ttl:
                    # Expired, remove from cache and order
                    del cache[key]
                    order.pop(0)
                else:
                    # Update timestamp
                    cache[key] = (cache[key][1], current_time)
                    order.append(key)
                    # If cache is full, remove oldest
                    if len(order) > maxsize:
                        del order[0]
                        del cache[order[0]]
            else:
                # Compute result
                result = func(*args, **kwargs)
                # Add to cache
                cache[key] = (result, current_time)
                order.append(key)
                # If cache is full, remove oldest
                if len(order) > maxsize:
                    del order[0]
                    del cache[order[0]]
            return result
        return wrapper
    return decorator
```