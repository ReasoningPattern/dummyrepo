
Okay, I need to write a Python function called default_tzinfo that takes a datetime (dt) and a tzinfo object. The goal is to set the tzinfo on naive datetimes only. So first, I should check if the given datetime is naive. A naive datetime doesn't have a timezone attached, right?

How do I check if a datetime is naive? Oh right, the tzinfo attribute of the datetime object. If dt.tzinfo is None, then it's naive. So the function should check that.

If the datetime is naive, then I need to replace its timezone with the provided tzinfo. But how to do that? The datetime module has a replace method, but I think that's for replacing the timezone in a naive datetime. Wait, no. Wait, the tzinfo is set using the replace method. Like, dt.replace(tzinfo=tzinfo). But I need to make sure that the tzinfo is correctly assigned.

Wait, but what if the datetime is already aware? Then I shouldn't change it. So the function should return dt if it's already aware, otherwise return a new datetime with the tzinfo set.

So the steps are: check if dt is naive. If it is, return dt with the tzinfo applied. Otherwise, return dt as is.

But I need to make sure that the tzinfo is a valid tzinfo subclass. The parameter description says tzinfo is an instance of datetime.tzinfo subclass. So the function can assume that.

So the code would be something like:

def default_tzinfo(dt, tzinfo):
    if dt.tzinfo is None:
        return dt.replace(tzinfo=tzinfo)
    else:
        return dt

Wait, but the example shows that when parsing '2014-01-01 12:30 UTC', the tzinfo is set to UTC, but the function is given a default tzinfo. Wait, in the first example, the parsed datetime has a timezone (UTC), so the function returns it as is. But in the second example, the parsed datetime is naive, so it gets the default tzinfo applied.

Wait, the function's docstring says that it sets the tzinfo parameter on naive datetimes only. So if the dt is naive, assign the tzinfo. Otherwise, leave it as is.

So the code is straightforward. Check if dt is naive (tzinfo is None), then replace the tzinfo, else return dt.

But wait, the replace method for datetime objects can take tzinfo. So yes, that's the way to go.

Testing the examples: For the first case, parse('2014-01-01 12:30 UTC') would return an aware datetime, so the function returns it without changes. The second example, parse('2014-01-01 12:30') is naive, so replace with the given tzinfo, which is EST (-5 hours). The output shows that the timezone is set to -05:00, which matches.

So the code should be as simple as that. But I need to make sure that the function returns a datetime instance. Also, note that the replace method returns a new datetime instance with the tzinfo set, so that's correct.

I think that's all. Let me write the code.
