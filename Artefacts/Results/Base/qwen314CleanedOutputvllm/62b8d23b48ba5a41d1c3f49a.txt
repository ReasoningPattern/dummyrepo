import functools
from collections import OrderedDict

def mru_cache(maxsize=128, typed=False):
    """
    Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Most Recently Used (MRU)
    algorithm.
    """
    def decorator(func):
        cache = OrderedDict()
        def wrapper(*args, **kwargs):
            key = (args, frozenset(kwargs.items())) if typed else (args, kwargs)
            if key in cache:
                cache.move_to_end(key)
                return cache[key]
            else:
                result = func(*args, **kwargs)
                cache[key] = result
                if len(cache) > maxsize:
                    cache.popitem(last=True)
                return result
        return functools.wraps(func)(wrapper)
    return decorator