import zope.interface
import inspect

def verifyObject(iface, candidate, tentative=False):
    """
    Verify that *candidate* might correctly provide *iface*.

    This involves:

    - Making sure the candidate claims that it provides the
      interface using ``iface.providedBy`` (unless *tentative* is `True`,
      in which case this step is skipped). This means that the candidate's class
      declares that it `implements <zope.interface.implementer>` the interface,
      or the candidate itself declares that it `provides <zope.interface.provider>`
      the interface

    - Making sure the candidate defines all the necessary methods

    - Making sure the methods have the correct signature (to the
      extent possible)

    - Making sure the candidate defines all the necessary attributes

    :return bool: Returns a true value if everything that could be
       checked passed.
    :raises zope.interface.Invalid: If any of the previous
       conditions does not hold.

    .. versionchanged:: 5.0
        If multiple methods or attributes are invalid, all such errors
        are collected and reported. Previously, only the first error was reported.
        As a special case, if only one such error is present, it is raised
        alone, like before.
    """
    errors = []
    if not tentative:
        if not zope.interface.providedBy(candidate):
            raise zope.interface.Invalid(f"{candidate} does not provide {iface}")
    
    for method_name in iface.names():
        if not hasattr(candidate, method_name):
            errors.append(f"Missing method: {method_name}")
        else:
            candidate_method = getattr(candidate, method_name)
            if not inspect.ismethod(candidate_method) and not inspect.isfunction(candidate_method):
                errors.append(f"{method_name} is not a method or function in {candidate}")
    
    for attr_name in iface.names():
        if not hasattr(candidate, attr_name):
            errors.append(f"Missing attribute: {attr_name}")
    
    if errors:
        if len(errors) == 1:
            raise zope.interface.Invalid(errors[0])
        else:
            raise zope.interface.Invalid("\n".join(errors))
    
    return True