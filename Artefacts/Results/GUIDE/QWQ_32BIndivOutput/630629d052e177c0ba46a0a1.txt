

```python
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import serialization
from cryptography.exceptions import InvalidSignature

def verify_relayable_signature(public_key, doc, signature):
    """
    Verify the signed XML elements to have confidence that the claimed
    author did actually generate this message.
    """
    try:
        # Load the public key from PEM format
        public_key = serialization.load_pem_public_key(
            public_key.encode(),
            # password=None,
        )
    except ValueError:
        return False  # Invalid key format

    # Ensure the document is in bytes
    if isinstance(doc, str):
        doc_bytes = doc.encode()
    else:
        doc_bytes = doc

    try:
        # Verify the signature using RSA with PSS padding and SHA-256
        public_key.verify(
            signature,
            doc_bytes,
            padding.PSS(
                mgf=padding.MGF1(hashes.SHA256()),
                salt_length=padding.PSS.MAX_LENGTH
            ),
            hashes.SHA256()
        )
        return True
    except InvalidSignature:
        return False
```