

```python
import unittest
from collections import namedtuple

def dehydrate_point(value):
    """
    The structure class is generated based on the value length.
    """
    length = len(value)
    if length not in (2, 3, 4):
        raise ValueError("Only 2D, 3D, or 4D points are supported")
    field_names = ['x', 'y', 'z', 'w'][:length]
    class_name = f"Point{length}D"
    PointClass = namedtuple(class_name, field_names)
    return PointClass(*value)

class TestDehydratePoint(unittest.TestCase):
    def test_2d_point(self):
        value = (1, 2)
        point = dehydrate_point(value)
        self.assertIsInstance(point, tuple)
        self.assertEqual(point._fields, ('x', 'y'))
        self.assertEqual(point.x, 1)
        self.assertEqual(point.y, 2)

    def test_3d_point(self):
        value = (3, 4, 5)
        point = dehydrate_point(value)
        self.assertEqual(point._fields, ('x', 'y', 'z'))
        self.assertEqual(point.x, 3)
        self.assertEqual(point.y, 4)
        self.assertEqual(point.z, 5)

    def test_4d_point(self):
        value = (10, 20, 30, 40)
        point = dehydrate_point(value)
        self.assertEqual(point._fields, ('x', 'y', 'z', 'w'))
        self.assertEqual(point.w, 40)

    def test_invalid_length(self):
        value = (1, 2, 3, 4, 5)
        with self.assertRaises(ValueError):
            dehydrate_point(value)

if __name__ == '__main__':
    unittest.main()
```