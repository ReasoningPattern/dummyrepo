

```python
def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,
          db=None, imp_user=None, dehydration_hooks=None,
          hydration_hooks=None, **handlers):
    """
    Appends a BEGIN message to the output queue.

    :param mode: access mode for routing - "READ" or "WRITE" (default)
    :param bookmarks: iterable of bookmark values after which this transaction should begin
    :param metadata: custom metadata dictionary to attach to the transaction
    :param timeout: timeout for transaction execution (seconds)
    :param db: name of the database against which to begin the transaction
        Requires Bolt 4.0+.
    :param imp_user: the user to impersonate
        Requires Bolt .4+
    :param dehydration_hooks:
        Hooks to dehydrate types (dict from type (class) to dehydration
        function). Dehydration functions receive the value and returns an
        object of type understood by packstream.
    :param hydration_hooks:
        Hooks to hydrate types (mapping from type (class) to
        dehydration function). Dehydration functions receive the value of
        type understood by packstream and are free to return anything.
    :param handlers: handler functions passed into the returned Response object
    :return: Response object
    """
    if mode is None:
        mode = "WRITE"
    params = {'mode': mode}
    if bookmarks is not None:
        params['bookmarks'] = list(bookmarks)
    if metadata is not None:
        params['metadata'] = metadata
    if timeout is not None:
        params['timeout'] = timeout
    if db is not None:
        params['db'] = db
    if imp_user is not None:
        params['imp_user'] = imp_user
    self.dehydration_hooks = dehydration_hooks or {}
    self.hydration_hooks = hydration_hooks or {}
    self._append_begin_message(params)
    return self.Response(**handlers)
```