

```python
import os

def _group_files_by_xml_filename(source, xmls, files):
    """
    Groups files by xmls and returns data in dict format.
    """
    grouped = {xml: [] for xml in xmls}
    xml_base_to_xml = {}

    for xml in xmls:
        xml_basename = os.path.basename(xml)
        base, _ = os.path.splitext(xml_basename)
        xml_base_to_xml[base] = xml

    for file in files:
        file_basename = os.path.basename(file)
        base, _ = os.path.splitext(file_basename)
        if base in xml_base_to_xml:
            xml_filename = xml_base_to_xml[base]
            grouped[xml_filename].append(file)

    return grouped
```

```python
import pytest

def test_group_files():
    xmls = ['report.xml', 'data.xml']
    files = ['report.txt', 'report.csv', 'data.log']
    expected = {
        'report.xml': ['report.txt', 'report.csv'],
        'data.xml': ['data.log']
    }
    assert _group_files_by_xml_filename('source', xmls, files) == expected

def test_no_matching_files():
    xmls = ['a.xml']
    files = ['b.txt']
    expected = {'a.xml': []}
    assert _group_files_by_xml_filename('source', xmls, files) == expected

def test_exact_match():
    xmls = ['test.xml']
    files = ['test.txt']
    expected = {'test.xml': ['test.txt']}
    assert _group_files_by_xml_filename('source', xmls, files) == expected

def test_no_file_extension():
    xmls = ['report.xml']
    files = ['report']
    expected = {'report.xml': ['report']}
    assert _group_files_by_xml_filename('source', xmls, files) == expected

def test_empty_files():
    xmls = ['a.xml', 'b.xml']
    files = []
    expected = {'a.xml': [], 'b.xml': []}
    assert _group_files_by_xml_filename('source', xmls, files) == expected

def test_empty_xmls():
    xmls = []
    files = ['any.txt']
    expected = {}
    assert _group_files_by_xml_filename('source', xmls, files) == expected

def test_full_paths():
    xmls = ['/source/report.xml', '/source/data.xml']
    files = ['/source/report.txt', '/source/data.log']
    expected = {
        '/source/report.xml': ['/source/report.txt'],
        '/source/data.xml': ['/source/data.log']
    }
    assert _group_files_by_xml_filename('source', xmls, files) == expected
```