

```python
import unittest

class TestOnDecorator(unittest.TestCase):
    def test_add_handler(self):
        class RegistryClass:
            registry = {}
            
            def on(self, hook):
                def decorator(func):
                    cls = self.__class__
                    cls.registry.setdefault(hook, []).append(func)
                    return func
                return decorator
        
        instance = RegistryClass()
        hook_name = 'test_hook'
        
        @instance.on(hook_name)
        def handler():
            pass
        
        self.assertIn(hook_name, RegistryClass.registry)
        self.assertIn(handler, RegistryClass.registry[hook_name])
    
    def test_multiple_handlers(self):
        class RegistryClass:
            registry = {}
            
            def on(self, hook):
                def decorator(func):
                    cls = self.__class__
                    cls.registry.setdefault(hook, []).append(func)
                    return func
                return decorator
        
        instance = RegistryClass()
        hook_name = 'multiple'
        
        @instance.on(hook_name)
        def handler1():
            pass
        
        @instance.on(hook_name)
        def handler2():
            pass
        
        self.assertEqual(len(RegistryClass.registry[hook_name]), 2)
        self.assertIn(handler1, RegistryClass.registry[hook_name])
        self.assertIn(handler2, RegistryClass.registry[hook_name])
    
    def test_no_preexisting_registry(self):
        class RegistryClass:
            def on(self, hook):
                def decorator(func):
                    cls = self.__class__
                    if not hasattr(cls, 'registry'):
                        cls.registry = {}
                    cls.registry.setdefault(hook, []).append(func)
                    return func
                return decorator
        
        instance = RegistryClass()
        hook_name = 'new_hook'
        
        @instance.on(hook_name)
        def handler():
            pass
        
        self.assertTrue(hasattr(RegistryClass, 'registry'))
        self.assertIn(hook_name, RegistryClass.registry)
        self.assertIn(handler, RegistryClass.registry[hook_name])
```

```python
def on(self, hook):
    """
    Return a decorator function to add a new handler to the "hook" in the registry in the class.
    """
    def decorator(func):
        cls = self.__class__
        if not hasattr(cls, 'registry'):
            cls.registry = {}
        registry = cls.registry
        registry.setdefault(hook, []).append(func)
        return func
    return decorator
```