

```python
def popitem(self):
    """
    Remove and return the `(key, value)` pair least recently used.
    """
    if not hasattr(self, "_cache") or not self._cache:
        raise KeyError("popitem(): empty structure")
    # Assuming an ordered dictionary-like structure where the first item is the LRU
    key = next(iter(self._cache))
    value = self._cache.pop(key)
    return key, value
```

Wait, actually, considering the initial problem statement and the need to use test-driven development, the correct approach would involve using an `OrderedDict` to track the order. Here's the corrected version:

```python
from collections import OrderedDict

class LRUCache:
    def __init__(self):
        self.cache = OrderedDict()

    def popitem(self):
        """
        Remove and return the `(key, value)` pair least recently used.
        """
        if not self.cache:
            raise KeyError("popitem(): cache is empty")
        return self.cache.popitem(last=False)
``` 

However, since the original question only asks for the `popitem` method's code and not the entire class, the most accurate isolated code would be:

```python
def popitem(self):
    """
    Remove and return the `(key, value)` pair least recently used.
    """
    return self.cache.popitem(last=False)
```