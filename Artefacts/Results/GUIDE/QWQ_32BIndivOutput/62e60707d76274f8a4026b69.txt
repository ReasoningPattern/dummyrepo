

```python
def point_type(name, fields, srid_map):
    def __init__(self, **kwargs):
        missing = [field for field in fields if field not in kwargs]
        if missing:
            raise ValueError(f"Missing required fields: {', '.join(missing)}")
        for field in fields:
            setattr(self, field, kwargs[field])
        if 'srid' in fields:
            if self.srid not in srid_map:
                raise ValueError(f"Invalid SRID: {self.srid}")

    def __repr__(self):
        return f"{name}({', '.join(f'{field}={getattr(self, field)!r}' for field in fields)})"

    return type(name, (object,), {
        '__init__:': __init__,
        '__repr__': __repr__,
    })
```

Wait, there's a typo in the `__init__:` key in the dictionary passed to `type()`. The colon after `__init__` is misplaced. Let me correct that.

The correct code should have:

```python
def point_type(name, fields, srid_map):
    def __init__(self, **kwargs):
        missing = [field for field in fields if field not in kwargs]
        if missing:
            raise ValueError(f"Missing required fields: {', '.join(missing)}")
        for field in fields:
            setattr(self, field, kwargs[field])
        if 'srid' in fields:
            if self.srid not in srid_map:
                raise ValueError(f"Invalid SRID: {self.srid}")

    def __repr__(self):
        return f"{name}({', '.join(f'{field}={getattr(self, field)!r}' for field in fields)})"

    return type(name, (object,), {
        '__init__': __init__,
        '__repr__': __repr__,
    })
```

I noticed the typo in the `__init__` key (there was an extra colon). This is crucial because the `type()` function uses the keys as the names of the methods. Fixing that ensures the `__init__` method is properly assigned.