

```python
def get_silent_args(self, args):
    """
    List of silenced argument names.

    :param args: The received arguments (a dictionary of argument names to values).
    :return: list, silenced argument names
    """
    return [key for key in args if key.startswith('_')]
```

**Test Cases**
```python
import unittest

class TestSilentArgs(unittest.TestCase):
    def test_mixed_arguments(self):
        args = {'name': 'John', '_secret': 'pass', '__private': 42}
        expected = ['_secret', '__private']
        self.assertEqual(sorted(get_silent_args(args)), sorted(expected))
    
    def test_no_silent_args(self):
        args = {'public': 'value', 'another': 10}
        expected = []
        self.assertEqual(get_silent_args(args), expected)
    
    def test_empty_args(self):
        args = {}
        expected = []
        self.assertEqual(get_silent_args(args), expected)
    
    def test_only_silent(self):
        args = {'_a': 1, '_b': 2, '_c': 3}
        expected = ['_a', '_b', '_c']
        self.assertEqual(sorted(get_silent_args(args)), sorted(expected))
    
    def test_edge_cases(self):
        args = {'_': 'underscore_only', '__': 'double_underscore', '_a_b_': 'with_underscores'}
        expected = ['_', '__', '_a_b_']
        self.assertEqual(sorted(get_silent_args(args)), sorted(expected))

if __name__ == '__main__':
    unittest.main()
```