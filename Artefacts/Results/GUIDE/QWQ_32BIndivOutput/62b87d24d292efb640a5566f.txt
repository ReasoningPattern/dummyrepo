

```python
import unittest

def render(pieces, style):
    """Input pieces and a style, render the pieces to the corresponding style."""
    if style == 'html':
        return '<br>'.join(pieces)
    elif style == 'markdown':
        return '\n\n'.join(pieces)
    elif style == 'plain':
        return ' '.join(pieces)
    else:
        raise ValueError("Unknown style")

class TestRender(unittest.TestCase):
    def test_html_style(self):
        pieces = ['Hello', 'World']
        expected = 'Hello<br>World'
        self.assertEqual(render(pieces, 'html'), expected)

    def test_markdown_style(self):
        pieces = ['Header', 'Content']
        expected = 'Header\n\nContent'
        self.assertEqual(render(pieces, 'markdown'), expected)

    def test_plain_style(self):
        pieces = ['This', 'is', 'a', 'test']
        expected = 'This is a test'
        self.assertEqual(render(pieces, 'plain'), expected)

    def test_unknown_style(self):
        with self.assertRaises(ValueError):
            render(['test'], 'unknown')

    def test_empty_pieces(self):
        self.assertEqual(render([], 'html'), '')
        self.assertEqual(render([], 'markdown'), '')
        self.assertEqual(render([], 'plain'), '')

    def test_single_piece(self):
        self.assertEqual(render(['Only'], 'html'), 'Only')
        self.assertEqual(render(['Only'], 'markdown'), 'Only')
        self.assertEqual(render(['Only'], 'plain'), 'Only')

if __name__ == '__main__':
    unittest.main()
```