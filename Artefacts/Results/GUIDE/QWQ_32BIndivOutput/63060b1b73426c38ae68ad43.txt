

```python
def extend_cli(self, root_subparsers):
    """
    Adds the spec cli options to to the main entry point.

    :param subparser: the subparser object to extend.
    """
    # Create the subparser for the 'spec' command
    spec_parser = root_subparsers.add_parser(
        'spec',
        help='Manage specification-related operations'
    )
    # Add specific arguments for the spec command
    spec_parser.add_argument(
        'input_file',
        help='Path to the input specification file'
    )
    spec_parser.add_argument(
        '--output',
        '-o',
        help='Path to the output file (default: stdout)',
        default='-'
    )
    spec_parser.add_argument(
        '--validate',
        action='store_true',
        help='Validate the specification before processing'
    )
    spec_parser.add_argument(
        '--format',
        choices=['json', 'yaml'],
        default='json',
        help='Output format (default: json)'
    )
```

### Test Cases
```python
import unittest
from unittest.mock import Mock, call

class TestCLIExtension(unittest.TestCase):
    def setUp(self):
        self.mock_subparsers = Mock()
        self.instance = YourClass()  # Replace with actual class name

    def test_adds_spec_subparser(self):
        self.instance.extend_cli(self.mock_subparsers)
        self.mock_subparsers.add_parser.assert_called_once_with(
            'spec',
            help='Manage specification-related operations'
        )

    def test_adds_required_arguments(self):
        spec_parser = Mock()
        mock_parser = self.mock_subparsers.add_parser.return_value = spec_parser
        self.instance.extend_cli(self.mock_subparsers)
        
        spec_parser.add_argument.assert_has_calls([
            call('input_file', help='Path to the input specification file'),
            call('--output', '-o', help='Path to the output file (default: stdout)', default='-'),
            call('--validate', action='store_true', help='Validate the specification before processing'),
            call('--format', choices=['json', 'yaml'], default='json', help='Output format (default: json)')
        ], any_order=True)

if __name__ == '__main__':
    unittest.main()
```