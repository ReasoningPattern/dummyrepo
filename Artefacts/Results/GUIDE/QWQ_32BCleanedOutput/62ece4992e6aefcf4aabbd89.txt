import math
import unittest

def gaussian(x):
    """
    Calculate Gaussian centered with u is 0.2 and sigma is 0.1.
    """
    mu = 0.2
    sigma = 0.1
    exponent = - ( (x - mu)**2 ) / (2 * sigma**2)
    coefficient = 1 / (sigma * math.sqrt(2 * math.pi))
    return coefficient * math.exp(exponent)

class TestGaussian(unittest.TestCase):
    def test_at_mean(self):
        mu = 0.2
        sigma = 0.1
        x = mu
        exponent = - ( (x - mu)**2 ) / (2 * sigma**2)
        coefficient = 1 / (sigma * math.sqrt(2 * math.pi))
        expected = coefficient * math.exp(exponent)
        actual = gaussian(x)
        self.assertAlmostEqual(actual, expected, places=7)

    def test_one_sigma(self):
        mu = 0.2
        sigma = 0.1
        x = mu + sigma
        exponent = - ( (x - mu)**2 ) / (2 * sigma**2)
        coefficient = 1 / (sigma * math.sqrt(2 * math.pi))
        expected = coefficient * math.exp(exponent)
        actual = gaussian(x)
        self.assertAlmostEqual(actual, expected, places=7)

    def test_negative_x(self):
        mu = 0.2
        sigma = 0.1
        x = 0.0
        exponent = - ( (x - mu)**2 ) / (2 * sigma**2)
        coefficient = 1 / (sigma * math.sqrt(2 * math.pi))
        expected = coefficient * math.exp(exponent)
        actual = gaussian(x)
        self.assertAlmostEqual(actual, expected, places=7)

if __name__ == '__main__':
    unittest.main()