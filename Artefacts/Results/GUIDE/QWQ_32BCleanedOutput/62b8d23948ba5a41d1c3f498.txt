import collections

def lru_cache(maxsize=128, typed=False):
    """
    Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Least Recently Used (LRU)
    algorithm.
    """
    def decorating_function(user_function):
        if maxsize == 0:
            return user_function
        cache = collections.OrderedDict()
        def wrapper(*args, **kwargs):
            key_parts = []
            for arg in args:
                if typed:
                    key_parts.append((arg, type(arg)))
                else:
                    key_parts.append(arg)
            sorted_kwargs = sorted(kwargs.items())
            for k, v in sorted_kwargs:
                if typed:
                    key_parts.append((k, v, type(v)))
                else:
                    key_parts.append((k, v))
            key = tuple(key_parts)
            if key in cache:
                val = cache.pop(key)
                cache[key] = val
                return val
            else:
                val = user_function(*args, **kwargs)
                cache[key] = val
                if len(cache) > maxsize:
                    cache.popitem(last=False)
                return val
        return wrapper
    return decorating_function