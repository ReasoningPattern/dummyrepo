def _update_context(self, context):
    """
    Update *context* with the properties of this graph.

    *context.error* is appended with indices of errors.
    Example subcontext for a graph with fields "E,t,error_E_low":
    {"error": {"x_low": {"index": 2}}}.
    Note that error names are called "x", "y" and "z"
    (this corresponds to first three coordinates,
    if they are present), which allows to simplify plotting.
    Existing values are not removed
    from *context.value* and its subcontexts.

    Called on "destruction" of the graph (for example,
    in :class:`.ToCSV`). By destruction we mean conversion
    to another structure (like text) in the flow.
    The graph object is not really destroyed in this process.
    """
    columns = self.columns  # Assuming self.columns holds the list of column names
    error_columns = [col for col in columns if col.startswith('error_')]
    
    if 'error' not in context:
        context['error'] = {}
    error_subcontext = context['error']
    
    for col in error_columns:
        parts = col.split('_')
        if len(parts) < 3:
            continue  # Not enough parts to form coordinate and error type
        coordinate_id = parts[1]
        error_type = '_'.join(parts[2:])
        
        try:
            coord_index = columns.index(coordinate_id)
        except ValueError:
            continue  # Coordinate not in main columns
        
        if coord_index >= 3:
            continue  # Only first three coordinates (x, y, z)
        
        coord_letter = 'x' if coord_index == 0 else 'y' if coord_index == 1 else 'z'
        
        error_col_index = columns.index(col)
        key = f"{coord_letter}_{error_type}"
        error_subcontext[key] = {"index": error_col_index}