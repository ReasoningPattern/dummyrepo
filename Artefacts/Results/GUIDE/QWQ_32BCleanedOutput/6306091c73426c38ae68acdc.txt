from yaml import safe_load

class IRValidatorException(Exception):
    pass

class SpecValidator:
    REQUIRED_FIELDS = []  # Define required fields here

    @classmethod
    def validate_from_content(cls, spec_content=None):
        """
        validates that spec (YAML) content has all required fields

        :param spec_content: content of spec file
        :raise IRValidatorException: when mandatory data is missing in spec file
        :return: Dictionary with data loaded from a spec (YAML) file
        """
        if spec_content is None:
            raise IRValidatorException("Spec content is required")

        try:
            data = safe_load(spec_content)
        except Exception as e:
            raise IRValidatorException(f"Error parsing YAML: {str(e)}")

        if not isinstance(data, dict):
            raise IRValidatorException("Spec must be a valid YAML dictionary")

        for field in cls.REQUIRED_FIELDS:
            if field not in data:
                raise IRValidatorException(f"Missing required field: {field}")

        return data