import functools
from collections import OrderedDict

def mru_cache(maxsize=128, typed=False):
    def decorator(func):
        if maxsize <= 0:
            @functools.wraps(func)
            def wrapper(*args, **kwargs):
                return func(*args, **kwargs)
            return wrapper
        else:
            cache = OrderedDict()
            @functools.wraps(func)
            def wrapper(*args, **kwargs):
                key_parts = []
                for a in args:
                    if typed:
                        key_parts.append((type(a), a))
                    else:
                        key_parts.append(a)
                for k in sorted(kwargs.keys()):
                    v = kwargs[k]
                    if typed:
                        key_parts.append((k, (type(v), v)))
                    else:
                        key_parts.append((k, v))
                key = tuple(key_parts)
                if key in cache:
                    cache.move_to_end(key)
                    return cache[key]
                else:
                    res = func(*args, **kwargs)
                    if len(cache) >= maxsize:
                        cache.popitem(last=False)
                    cache[key] = res
                    return res
            return wrapper
        return decorator
    return decorator