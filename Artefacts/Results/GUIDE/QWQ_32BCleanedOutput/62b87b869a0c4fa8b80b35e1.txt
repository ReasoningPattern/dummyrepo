def hist_to_graph(hist, make_value=None, get_coordinate="left",
                  field_names=("x", "y"), scale=None):
    """
    Convert a histogram to a graph.
    """
    # Handle default make_value
    if make_value is None:
        make_value = lambda content: content

    # Validate get_coordinate
    allowed = {"left", "right", "middle"}
    if get_coordinate not in allowed:
        raise ValueError(
            f"get_coordinate must be one of {allowed}"
        )

    points = []
    for bin in hist.bins:
        coordinates = []
        for edges in bin.edges:
            left = edges[0]
            right = edges[-1]
            if get_coordinate == "left":
                coord = left
            elif get_coordinate == "right":
                coord = right
            else:  # "middle"
                coord = (left + right) / 2.0
            coordinates.append(coord)
        # Process bin content through make_value
        value = make_value(bin.content)
        # Ensure value is a sequence
        if not isinstance(value, (tuple, list)):
            value = [value]
        # Combine coordinates and value parts
        point_data = coordinates + list(value)
        points.append(tuple(point_data))
    
    # Determine scale
    if scale is True:
        graph_scale = hist.scale
    else:
        graph_scale = scale
    
    # Create the graph object (assuming appropriate class structure)
    from some_module import Graph  # Replace with actual import
    graph = Graph(
        points=points,
        field_names=field_names,
        scale=graph_scale,
    )
    return graph