def cachedmethod(cache, key=lambda self, *a, **kw: (self, a, frozenset(kw.items())), lock=None):
    def decorator(func):
        def wrapper(instance, *args, **kwargs):
            k = key(instance, *args, **kwargs)
            if lock is not None:
                lock.acquire()
            try:
                if k in cache:
                    return cache[k]
                result = func(instance, *args, **kwargs)
                cache[k] = result
                return result
            finally:
                if lock is not None:
                    lock.release()
        return wrapper
    return decorator