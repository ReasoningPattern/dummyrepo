import functools

def hashkey(*args, **kwargs):
    return (args, tuple(sorted(kwargs.items())))

def cached(cache, key=hashkey, lock=None):
    """
    Returns a decorator function that saves the results in the cache
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            k = key(*args, **kwargs)
            if k in cache:
                return cache[k]
            if lock is not None:
                lock.acquire()
            try:
                # Double-check after acquiring the lock
                if k in cache:
                    result = cache[k]
                else:
                    result = func(*args, **kwargs)
                    cache[k] = result
                return result
            finally:
                if lock is not None:
                    lock.release()
        return wrapper
    return decorator