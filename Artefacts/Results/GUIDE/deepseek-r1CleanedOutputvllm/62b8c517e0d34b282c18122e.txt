import traceback
from types import FrameType

def extostr(cls, e, max_level=30, max_path_level=5):
    if not isinstance(e, BaseException):
        return str(e)
    
    exc_cls = e.__class__
    s = f"{exc_cls.__name__} {e.__str__()}"

    # Get base exceptions up to max_level
    mro = exc_cls.__mro__
    base_exceptions = []
    for cls in mro[1:max_level + 1]:
        if issubclass(cls, BaseException):
            base_exceptions.append(cls.__name__)
    s += f" bases: {', '.join(base_exceptions)}"

    if hasattr(e, 'traceback') and e.traceback is not None:
        traceback = e.traceback
        # Slice the traceback to max_path_level
        traceback = traceback[:max_path_level]
        # Format each frame
        tb_lines = []
        for frame in traceback:
            if isinstance(frame, FrameType):
                tb_lines.append(f"  {frame.f_code.co_name} {frame.f_lineno}: {frame.filename}")
            else:
                tb_lines.append(f"  {frame.f_code.name} {frame.f_lineno}: {frame.filename}")
        s += '\n' + '\n'.join(tb_lines)

    return s