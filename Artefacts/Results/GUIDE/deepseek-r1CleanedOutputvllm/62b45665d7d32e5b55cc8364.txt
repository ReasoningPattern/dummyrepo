def parse_subparser_arguments(unparsed_arguments, subparsers):
    """
    Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser
    instance, give each requested action's subparser a shot at parsing all arguments. This allows
    common arguments like "--repository" to be shared across multiple subparsers.

    Returns:
        tuple: (a dict mapping from subparser name to a parsed namespace of arguments, a list of remaining arguments not claimed by any subparser).
    """
    parsed = {}
    remaining = list(unparsed_arguments)
    for subparser_name in subparsers:
        subparser = subparsers[subparser_name]
        try:
            subparser_args = subparser.parse_args(remaining)
            parsed[subparser_name] = subparser_args
            remaining = [arg for arg in remaining if arg not in subparser_args.args]
        except (ValueError, TypeError) as e:
            # Handle cases where the subparser cannot parse some arguments
            remaining = [arg for arg in remaining if arg not in subparser_args.args]
            raise e
    return parsed, remaining