import argparse

def make_parsers():
    """
    Build a top-level parser and its subparsers and return them as a tuple.
    """
    # Create the top-level parser
    parser = argparse.ArgumentParser(description='A parser with subparsers',
                                     formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('command', choices=['help', 'version'])

    # Add subparsers
    subparsers = parser.add_subparsers(help='Subparser help',
                                      title='Subparser Title',
                                      description='Description of the subparser',
                                      dest='command',
                                      required=True)

    # Get all subparsers
    subparser_dict = {parser.name: parser for parser in subparsers}

    return parser, subparser_dict

# Unit tests
def test_make_parsers():
    parser, subparsers = make_parsers()
    assert parser is not None
    assert subparsers is not None
    assert 'help' in subparsers
    assert 'version' in subparsers
    assert hasattr(parser, 'formatter_class')
    assert hasattr(subparsers['help'], 'dest')
    assert hasattr(subparsers['version'], 'title')
    for name, subparser in subparsers.items():
        assert subparser in parser.get_subparsers()
        assert subparser.has_help()
        assert subparser.has_title()
        assert subparser.has_description()
        assert subparser.has_dest()

if __name__ == '__main__':
    test_make_parsers()