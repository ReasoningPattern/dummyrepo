import logging

class Logger:
    def __init__(self):
        self.args = []

    def receive_arg(self, name, value):
        """
        Receive and store an argument.

        :param name: Name of the argument
        :param value: Value of the argument
        :return: self for chaining
        """
        self.args.append((name, value))
        return self

    def get_silent_args(self, args):
        """
        Get list of silenced argument names based on logging level.

        :param args: The received arguments.
        :return: List of silenced argument names
        """
        silenced_args = []
        for name, value in args:
            log_level = logging.getLevelName(logging.getLevelName(self.__class__.__name__))

            if log_level < logging.WARNING:
                silenced_args.append(name)
        
        return sorted(silenced_args)

def test_get_silent_args():
    """
    Unit tests for get_silent_args method
    """
    logger = Logger()
    
    # Test case 1: All arguments are logged
    args = [('arg1', 1), ('arg2', 2)]
    logger.receive_arg('arg1', 1)
    logger.receive_arg('arg2', 2)
    result = logger.get_silent_args(args)
    assert result == []

    # Test case 2: Some arguments are silenced
    args = [('arg1', 1), ('arg2', 2)]
    logger.receive_arg('arg1', 1)
    logger.get_silent_args(args)  # Should not affect the state
    result = logger.get_silent_args(args)
    assert result == ['arg1']

    # Test case 3: No arguments are logged
    args = [('arg1', 1)]
    logger.receive_arg('arg1', 1)
    result = logger.get_silent_args(args)
    assert result == []

    # Test case 4: Different log levels
    args = [('arg1', 1), ('arg2', 2)]
    logger.receive_arg('arg1', 1)
    logger.receive_arg('arg2', 2)
    result = logger.get_silent_args(args)
    assert result == []

    # Test case 5: Error level should not be silenced
    args = [('arg1', 1)]
    logger.receive_arg('arg1', 1)
    result = logger.get_silent_args(args)
    assert result == []

    print("All tests passed!")

# Run tests
test_get_silent_args()