from pathlib import Path
import mimetypes
import unittest

def _eval_file(prefix, file_path):
    """
    Identify the type of the given file. Return None if the file does not match the given prefix or is XML.
    Return a dictionary with component_id and file_path for PDF files, and additional information for other types.
    """
    # Check if the file exists and matches the prefix
    file_path = Path(file_path)
    if not file_path.exists():
        raise FileNotFoundError(f"The file {file_path} does not exist.")
    if not file_path.name.startswith(prefix):
        raise ValueError(f"The file {file_path} does not match the prefix {prefix}.")
    
    # Determine the file type
    try:
        _, file_type = mimetypes.guess_type(file_path)
    except Exception as e:
        raise IOError(f"Failed to determine file type for {file_path}. Error: {e}")
    
    # Handle XML case
    if file_type and file_type[0] == 'application/vnd.oasis.xml':
        return None
    
    # Handle PDF case
    if file_type and file_type[0] == 'application/pdf':
        return {
            'component_id': file_path.stem,
            'file_path': file_path
        }
    
    # Handle other file types
    return {
        'component_id': file_path.stem,
        'file_path': file_path,
        'ftype': file_type[0],
        'file_path': file_path
    }

# Test cases
class TestEvalFile(unittest.TestCase):
    def test_pdf(self):
        prefix = "some/prefix/"
        file_path = "some/prefix/test.pdf"
        result = _eval_file(prefix, file_path)
        self.assertIsInstance(result, dict)
        self.assertEqual(result['component_id'], 'test')
        self.assertEqual(result['file_path'], file_path)
        self.assertEqual(result['ftype'], 'application/pdf')
    
    def test_xml(self):
        prefix = "some/prefix/"
        file_path = "some/prefix/test.xml"
        result = _eval_file(prefix, file_path)
        self.assertIsNone(result)
    
    def test_other(self):
        prefix = "some/prefix/"
        file_path = "some/prefix/test.txt"
        result = _eval_file(prefix, file_path)
        self.assertIsInstance(result, dict)
        self.assertEqual(result['component_id'], 'test')
        self.assertEqual(result['file_path'], file_path)
        self.assertEqual(result['ftype'], 'text/plain')

if __name__ == "__main__":
    unittest.main()