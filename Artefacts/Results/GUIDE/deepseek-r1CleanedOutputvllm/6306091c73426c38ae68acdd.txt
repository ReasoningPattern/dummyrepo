:python-markdown
class YAMLValidator:
    def __init__(self, schema_path):
        self.schema = self._load_yaml(schema_path)
        self._validate_schema()
    
    def _load_yaml(self, file_path):
        try:
            with open(file_path, 'r') as file:
                return yaml.safe_load(file)
        except FileNotFoundError:
            raise IRValidatorException(f"YAML file not found at {file_path}")
        except yaml.YAMLError as e:
            raise IRValidatorException(f"Invalid YAML format at {file_path}") from e
    
    def _validate_schema(self):
        required_fields = {'required': [], 'optional': []}
        if 'required' in self.schema:
            required_fields['required'] = self.schema['required']
        elif 'optional' in self.schema:
            required_fields['optional'] = self.schema['optional']
        
        if not required_fields['required']:
            raise IRValidatorException("The YAML file must contain at least one required field")
    
    def validate_data(self, data):
        try:
            self._check_data_types(data)
            self._check_data_presence(data)
            self._check_data_format(data)
            return data
        except IRValidatorException as e:
            raise
    
    def _check_data_types(self, data):
        # Implement type checking based on schema
        pass
    
    def _check_data_presence(self, data):
        for field in self.schema.get('required', []):
            if field not in data:
                raise IRValidatorException(f"Required field '{field}' missing")
    
    def _check_data_format(self, data):
        # Implement format checking based on schema
        pass

def validate_from_file(cls, yaml_file=None):
    """
    Loads & validates that a YAML file has all required fields

    :param yaml_file: Path to YAML file
    :raise IRValidatorException: when mandatory data is missing in file
    :return: Dictionary with data loaded from a YAML file
    """
    if yaml_file is None:
        raise ValueError("YAML file path must be provided")
    
    validator = YAMLValidator(yaml_file)
    data = validator.validate_data(yaml_file)
    return data