from uuid import uuid1
from hypothesis import given, strategies as st

def int_to_string(number: int, alphabet: list[str], padding: Optional[int] = None) -> str:
    """
    Convert a number to a string, using the given alphabet.
    The number represents a short uuid.
    The output has the most significant digit first.
    @param number: Int value
    @param alphabet : List with letters
    @param padding : Optional with int value
    @return  string value corresponded to int
    """
    if not alphabet:
        return ""
    
    max_without_padding = (len(alphabet) ** 128) - 1
    if number < 0 or number > max_without_padding:
        raise ValueError("Number out of valid range for the given alphabet and padding.")
    
    if padding is not None:
        required_length = padding
    else:
        required_length = len(bin(number)[2:])  # Calculate the actual needed length
    
    if required_length > padding:
        # Pad with leading characters
        padding_length = required_length - padding
        padding_char = alphabet[0]
        number = int(padding_char * padding_length) + number
    
    # Convert number to string using the alphabet
    str_num = 0
    result = []
    for char in reversed(alphabet):
        value = ord(char)
        while number >= value:
            result.append(char)
            number -= value
        if number == 0:
            break
    if not result:
        return ""
    return ''.join(reversed(result))