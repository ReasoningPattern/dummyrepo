import datetime
from datetime import datetime as dt
from typing import Dict, Any, Optional

class DateTimeParser:
    def __init__(self):
        pass

    def parse(self, timestr: str, default: Optional[dt] = None,
              ignoretz: bool = False, tzinfos: Optional[Dict[str, Any]] = None, **kwargs) -> dt:
        """
        Parse the date/time string into a datetime.datetime object.

        Parameters:
        timestr (str): Date/time string using supported formats.
        default (Optional[datetime.datetime]): The default datetime object.
        ignoretz (bool): If True, time zones in parsed strings are ignored.
        tzinfos (Optional[Dict[str, Any]]): Mapping of timezone names to time zones.

        Returns:
        datetime.datetime: Parsed datetime object.

        Raises:
        ParserError: For invalid format or timezone.
        TypeError: For non-string input.
        OverflowError: For invalid date/times.
        """
        if not isinstance(timestr, str):
            raise TypeError("timestr must be a string")

        if ignoretz:
            tzinfos = None

        if tzinfos is None:
            tzinfos = {}

        # Extract timezone information
        if tzinfos:
            try:
                tzname, tzoffset = next(iter(tzinfos.items()))
                self._tzinfo = tzinfo_from_string(tzname, tzoffset)
            except StopIteration:
                self._tzinfo = None
        else:
            self._tzinfo = None

        # Parse the datetime string
        parsed = dt.fromisoformat(timestr, tzinfo=self._tzinfo, **kwargs)
        if default is not None:
            parsed = _replace_in_datetime(parsed, default)

        return parsed

def tzinfo_from_string(tzname: str, tzoffset: int) -> Any:
    """
    Convert timezone name and offset to a tzinfo object.
    """
    if isinstance(tzoffset, int):
        return datetime.timezone(tzoffset)
    else:
        return tzoffset

def _replace_in_datetime(parsed: dt, default: dt) -> dt:
    """
    Replace parts of the default datetime with parsed datetime.

    :param parsed: The parsed datetime object
    :param default: The default datetime object to replace parts of
    :return: A new datetime object with replaced parts
    """
    # Implementation for part replacement logic
    # This is a placeholder and should be expanded based on specific requirements
    return default

def pytestmark pytestmark = pytest.mark