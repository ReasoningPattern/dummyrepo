def get_spec_defaults(self, spec, default_values=None, required=None):
    """
    Resolve arguments' values from spec and other sources with self._get_defaults()
    
    Args:
        spec (dict): The specification containing values to resolve
        default_values (dict, optional): Values to use if spec does not contain them
        required (list, optional): List of keys that are required (if None, no requirements)
        
    Returns:
        dict: Merged values from spec and defaults
    """
    # First try to get values from spec
    values = {}
    for key, value in spec.items():
        if key in default_values:
            if required and key in required:
                raise ValueError(f"Required value {key} is missing from spec")
            values[key] = value
        else:
            # If not required, fall back to default
            if required and key in required:
                raise ValueError(f"Required value {key} is missing from spec or defaults")
            values[key] = default_values.get(key, self._get_defaults().get(key, None))
    
    return values

def test_get_spec_defaults():
    import pytest
    from unittest.mock import patch

    @patch('self._get_defaults')
    def test_case1(spec_defaults_mock):
        spec_defaults_mock.return_value = {'name': 'Test'}
        spec = {'name': None}
        result = get_spec_defaults(spec)
        assert result == {'name': 'Test'}

    @patch('self._get_defaults')
    def test_case2(spec_defaults_mock):
        spec_defaults_mock.return_value = {'name': None}
        spec = {'name': None}
        result = get_spec_defaults(spec)
        assert result == {'name': None}

    @patch('self._get_defaults')
    def test_case3(spec_defaults_mock):
        spec_defaults_mock.return_value = {'name': 'Default'}
        spec = {}
        result = get_spec_defaults(spec)
        assert result == {'name': 'Default'}

    test_case1()
    test_case2()
    test_case3()