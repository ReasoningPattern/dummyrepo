from unittest.mock import Mock, patch

class TestFile:
    def setup(self):
        self.file = Mock()
        self.file.read = Mock()
        self.file.read.return_value = b'ABCDEF'
        self.file.write = Mock()
        self.set_cut_chars = Mock()
        self.get_cut_chars = Mock()
        return self

    @patch('tests.file.File')
    def test_set_cut_chars(self, mock_file, test_class):
        # Setup
        test_class.file = self.file
        self.file.file = test_class
        before = b'ABC'
        after = b'DEF'
        self.set_cut_chars(before, after)

        # When
        self.file.write.assert_called_once_with(before)
        self.file.write.assert_called_once_with(after)
        self.get_cut_chars.return_value = (before, after)
        result = self.get_cut_chars()

        # Then
        self.assertEqual(result, (before, after))
        self.file.read.assert_called_once()

    def test_same_cut_chars(self, test_class):
        before = b'ABC'
        self.set_cut_chars(before, before)
        result = self.get_cut_chars()
        self.assertEqual(result, (before, before))

    def test_empty_cut_chars(self, test_class):
        before = b''
        after = b''
        self.set_cut_chars(before, after)
        result = self.get_cut_chars()
        self.assertEqual(result, (before, after))