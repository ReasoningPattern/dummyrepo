from collections.abc import Sequence

def _get_seq_with_type(seq, bufsize=None):
    """
    Return a (sequence, type) pair.
    Sequence is derived from *seq* (or is *seq*, if that is of a sequence type).
    """
    if isinstance(seq, Sequence):
        return (seq, type(seq))
    else:
        return (list(seq), type(list(seq)))

def test_get_seq_with_type():
    import pytest
    pytestmark = pytest.mark.unit

    def test BasicList():
        seq = [1, 2, 3]
        result = _get_seq_with_type(seq)
        assert result[0] is seq
        assert result[1] == list

    def test BasicTuple():
        seq = (1, 2, 3)
        result = _get_seq_with_type(seq)
        assert result[0] is seq
        assert result[1] == tuple

    def test BasicString():
        seq = "abc"
        result = _get_seq_with_type(seq)
        assert result[0] is seq
        assert result[1] == str

    def test CustomObject():
        class MyClass:
            pass
        obj = MyClass()
        result = _get_seq_with_type(obj)
        assert isinstance(result[0], list)
        assert result[1] == list

    def testNone():
        seq = None
        result = _get_seq_with_type(seq)
        assert result[0] is [None]
        assert result[1] == list

    testBasicList()
    testBasicTuple()
    testBasicString()
    testCustomObject()
    testNone()

if __name__ == "__main__":
    import sys
    sys.path.append(sys.path[0])
    pytest.main()