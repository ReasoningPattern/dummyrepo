import argparse
import unittest
from unittest.mock import patch, MagicMock

class CommandLineOptions:
    def __init__(self, parser):
        self.parser = parser
        self.parser.add_argument('argument_name', type=str)
        self.parser.add_argument('--command_name', type=str)

    def get_parser_option_specs(self):
        """
        Returns a dictionary containing specifications for all parsed options.
        """
        return {
            'argument_name': {
                'type': str,
                'help': 'Description of the argument'
            },
            '--command_name': {
                'type': str,
                'nargs': '+',
                'help': 'Description of the command'
            }
        }

    def get_option_spec(self, command_name, argument_name):
        """
        Gets the specification for the specified option name.
        """
        option_specs = self.get_parser_option_specs()
        return option_specs.get(argument_name, None)

class TestGetOptionSpec(unittest.TestCase):
    @patch('argparse.ArgumentParser')
    def test_get_option_spec(self, mock_parser):
        mock_parser.return_value.parse_args.return_value = MagicMock(
            args=MagicMock(),
            specs={
                'argument_name': {'type': str, 'help': 'Test argument help'},
                '--command_name': {'type': str, 'help': 'Test command help'}
            }
        )
        
        command_name = "test_command"
        argument_name = "test_argument"
        
        under_test = CommandLineOptions(mock_parser)
        result = under_test.get_option_spec(command_name, argument_name)
        
        self.assertEqual(result, {'type': str, 'help': 'Test argument help'})
        self.assertEqual(result['argument_name']['type'], str)
        self.assertEqual(len(result), 1)
        self.assertEqual(list(result.keys()), ['argument_name'])

if __name__ == "__main__":
    unittest.main()