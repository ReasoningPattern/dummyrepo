import logging
import unittest

def build_app_logger(name='app', logfile='app.log', debug=True):
    """
    General purpose application logger. Useful mainly for debugging
    
    Args:
        name: The name of logger
        logfile: The log file need to save
        debug: is need to debug
    
    Returns:
        Returns an instantiated logger object
    """
    # Configure the logger
    logger = logging.getLogger(name)
    
    # Set the level based on debug flag
    if debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)
    
    # Create file handler
    file_handler = logging.handlers.RotatingFileHandler(
        logfile,
        maxBytes=1024 * 1024,  # 1MB
        backupCount=5,
        encoding='utf-8'
    )
    
    # Create console handler
    console_handler = logging.StreamHandler()
    
    # Set the formatter
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    # Apply formatter to handlers
    file_handler.setFormatter(formatter)
    console_handler.setFormatter(formatter)
    
    # Add handlers to logger
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    return logger

class TestAppLogger(unittest.TestCase):
    def test_app_logger(self):
        # Create logger instance
        logger = build_app_logger(debug=True)
        
        # Check file handler
        self.assertEqual(logger.handlers[0].filename, 'app.log')
        
        # Check console handler
        self.assertEqual(len(logger.handlers[1].handler), 1)
        
        # Test debug logging
        self.assertIn('DEBUG: ', logger.handlers[0].formatter)
        
        # Test non-debug logging
        logger = build_app_logger(debug=False)
        self.assertIn('INFO: ', logger.handlers[0].formatter)
        
        # Test exception handling
        try:
            logger.error('Test error')
        except Exception as e:
            self.fail(f"Expected exception but got {e}")
        
        logger = build_app_logger(debug=True)
        try:
            logger.exception('Test exception')
        except Exception as e:
            self.fail(f"Expected exception but got {e}")