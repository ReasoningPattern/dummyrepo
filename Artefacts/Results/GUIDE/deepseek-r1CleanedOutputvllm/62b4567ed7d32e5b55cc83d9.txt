class MappingNode:
    def __init__(self, key, value):
        self.key = key
        self.value = value

def deep_merge(a, b):
    if isinstance(a, MappingNode) and isinstance(b, MappingNode):
        return MappingNode(a.key, deep_merge(a.value, b.value))
    elif isinstance(a, MappingNode):
        return MappingNode(a.key, deep_merge(a.value, b))
    elif isinstance(b, MappingNode):
        return MappingNode(b.key, deep_merge(a, b.value))
    else:
        return b

def deep_merge_nodes(nodes):
    """
    Merge any node values corresponding to duplicate keys and return the result.
    If there are colliding keys with non-MappingNode values, the last of the values remains.
    """
    merged = {}
    for node in nodes:
        key = node.key
        value = node.value
        if key in merged:
            if isinstance(merged[key], MappingNode):
                merged[key] = deep_merge(merged[key], value)
            else:
                merged[key] = value
        else:
            merged[key] = value
    return merged