def vertex3tuple(vertices):
    """
    Get 3 points for each vertex of the polygon.
    This will include the vertex and the 2 points on both sides of the vertex
    If the subscript is out of bounds, take the value of index as 0
    Args:
        vertices: vertices to be converted

    Returns:
        A list where the elements of vertices represented by tuple
    """
    result = []
    n = len(vertices)
    for i in range(n):
        prev_i = (i - 1) % n
        next_i = (i + 1) % n
        current = vertices[i]
        prev = vertices[prev_i]
        next_v = vertices[next_i]
        result.append((current, prev, next_v))
    return result

# Example unit tests
import unittest

class TestVertex3Tuple(unittest.TestCase):
    def test_empty_list(self):
        self.assertEqual(vertex3tuple([]), [])

    def test_single_vertex(self):
        self.assertEqual(vertex3tuple([A]), (A, A, A))

    def test_triangle(self):
        vertices = [A, B, C]
        expected = [(A,B,C), (B,C,A), (C,A,B)]
        self.assertEqual(vertex3tuple(vertices), expected)

# Replace A, B, C with actual test data
# For example:
# A = (0,0)
# B = (1,0)
# C = (0,1)
# self.assertEqual(test_triangle(), expected)

if __name__ == "__main__":
    unittest.main()