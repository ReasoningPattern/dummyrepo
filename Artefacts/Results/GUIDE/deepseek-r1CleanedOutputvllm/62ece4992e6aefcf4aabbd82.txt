import re
import unittest

def get_pattern(pattern, strip=True):
    """
    Converts a string to a regex pattern object, optionally stripping whitespace.
    
    Args:
            pattern: str or regex pattern object
            strip: boolean, whether to strip whitespace from the start/end of the string
    Returns:
            regex pattern object
    """
    if isinstance(pattern, str):
        if strip:
            stripped = pattern.strip()
        else:
            stripped = pattern
        return re.compile(stripped)
    else:
        return pattern

class TestGetPattern(unittest.TestCase):
    def test_get_pattern_string_with_spaces(self):
        pattern = "  hello  "
        expected = re.compile("hello")
        actual = get_pattern(pattern, strip=True)
        self.assertEqual(actual, expected)

    def test_get_pattern_string_without_strip(self):
        pattern = "  hello  "
        expected = re.compile("  hello  ")
        actual = get_pattern(pattern, strip=False)
        self.assertEqual(actual, expected)

    def test_get_pattern_string_without_spaces(self):
        pattern = "hello"
        expected = re.compile("hello")
        actual = get_pattern(pattern, strip=True)
        self.assertEqual(actual, expected)

    def test_get_pattern_regex_object(self):
        pattern = re.compile("world")
        actual = get_pattern(pattern)
        self.assertEqual(actual, pattern)

    def test_get_pattern_none(self):
        pattern = None
        actual = get_pattern(pattern)
        self.assertEqual(actual, pattern)

    def test_get_pattern_empty_string(self):
        pattern = ""
        expected = re.compile("")
        actual = get_pattern(pattern)
        self.assertEqual(actual, expected)

    def test_get_pattern_leading_trailing_newlines(self):
        pattern = "\nhello\n"
        expected = re.compile("hello")
        actual = get_pattern(pattern, strip=True)
        self.assertEqual(actual, expected)

    def test_get_pattern_strip_false(self):
        pattern = "  test  "
        expected = re.compile("  test  ")
        actual = get_pattern(pattern, strip=False)
        self.assertEqual(actual, expected)

if __name__ == "__main__":
    unittest.main()