def _dictsum(dicts):
    """
    Sum values with the same key in the dictionaries and return a new dictionary.
    
    Args:
        dicts (list of dict): A list of dictionaries to be summed.
        
    Returns:
        dict: A dictionary with summed values for each key.
    """
    result = {}
    for d in dicts:
        for key, value in d.items():
            result[key] = result.get(key, 0) + value
    return result

import unittest

class TestDictSum(unittest.TestCase):
    def test_dictsum_single_dict(self):
        dicts = [{'a': 1, 'b': 2}]
        expected = {'a': 1, 'b': 2}
        self.assertEqual(_dictsum(dicts), expected)
    
    def test_dictsum_multiple_dicts(self):
        dicts = [{'a': 1, 'b': 2}, {'a': 5, 'b': 0}]
        expected = {'a': 6, 'b': 2}
        self.assertEqual(_dictsum(dicts), expected)
    
    def test_dictsum_empty_list(self):
        dicts = []
        expected = {}
        self.assertEqual(_dictsum(dicts), expected)
    
    def test_dictsum_non_overlapping_keys(self):
        dicts = [{'a': 3}, {'b': 5}]
        expected = {'a': 3, 'b': 5}
        self.assertEqual(_dictsum(dicts), expected)
    
    def test_dictsum_mixed_values(self):
        dicts = [{'a': 10, 'b': 20}, {'a': 5, 'b': 15}, {'c': 30}]
        expected = {'a': 15, 'b': 35, 'c': 30}
        self.assertEqual(_dictsum(dicts), expected)

if __name__ == "__main__":
    unittest.main()