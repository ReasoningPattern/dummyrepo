import copy

class GraphContext:
    def _update_context(self, context):
        """
        Update *context* with the properties of this graph.

        *context.error* is appended with indices of errors.
        Example subcontext for a graph with fields "E,t,error_E_low":
        {"error": {"x_low": {"index": 2}}}.
        Note that error names are called "x", "y" and "z" (this corresponds
        to first three coordinates, if they are present), which allows to
        simplify plotting. Existing values are not removed from *context.value*
        and its subcontexts.

        Called on "destruction" of the graph (for example, in
        :class:`.ToCSV`). By destruction we mean conversion to another
        structure (like text) in the flow. The graph object is not really
        destroyed in this process.
        """
        # Create a deep copy to avoid modifying the original context
        new_context = copy.deepcopy(context)

        # Update error properties
        error_index = 2  # Starting index as per example
        for coord in ['x', 'y', 'z']:
            if coord in new_context.get('error', {}):
                continue  # Skip if already exists
            new_context['error'][coord] = {'index': error_index}
            error_index += 1

        # Update value properties
        for key, value in new_context.items():
            if isinstance(value, dict) and 'value' not in value:
                new_context['value'][key] = value.copy()

        return new_context