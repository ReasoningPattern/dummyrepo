def point_type(name, fields, srid_map):
    """
    Dynamically Generating Point Class
    """
    class Point:
        def __init__(self, **kwargs):
            for field in fields:
                value = kwargs.get(field, 0)
                if field == 'x':
                    setattr(self, field, value)
                elif field == 'y':
                    setattr(self, field, value)
                elif field == 'z':
                    setattr(self, field, value)
                elif field == 'srid':
                    if value is not None:
                        setattr(self, field, value)
                    else:
                        raise ValueError(f"SRID field '{field}' must have a value")
                else:
                    raise ValueError(f"Invalid field '{field}' for Point class")
    
    Point.__name__ = name
    return Point

def test_point_type():
    import inspect
    from unittest import TestCase

    class TestPoint(TestCase):
        def test_point_class_exists(self):
            pt = point_type('TestPoint', ['x', 'y', 'z'], {})
            self.assertIsInstance(pt, type)
            self.assertIn('x', pt.__dict__)
            self.assertIn('y', pt.__dict__)
            self.assertIn('z', pt.__dict__)
            self.assertIn('__init__', pt.__dict__)

        def test_point_initialization(self):
            pt = point_type('TestPoint', ['x', 'y', 'z'], {})
            self.assertEqual(getattr(pt, 'x', 0), 0)
            self.assertEqual(getattr(pt, 'y', 0), 0)
            self.assertEqual(getattr(pt, 'z', 0), 0)

        def test_point_srid(self):
            pt = point_type('TestPoint', ['x', 'y', 'z', 'srid'], {'srid': 4326})
            self.assertEqual(getattr(pt, 'srid'), 4326)

        def test_invalid_field(self):
            with self.assertRaises(ValueError) as cm:
                point_type('TestPoint', ['invalid_field'], {})
            self.assertIn('invalid_field must have a value', str(cm.exception))

    TestPoint().run()