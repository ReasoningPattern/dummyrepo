from abc import ABC, ABCMeta
from six import issubclass_
import sys

def verifyClass(iface, candidate, tentative=False):
    """
    Verify that the *candidate* might correctly provide *iface*.

    :param iface: The interface to verify against
    :param candidate: The class to test
    :param tentative: (Optional) If True, allows some flexibility in verification
    :return: True if candidate might provide the interface, False otherwise
    """
    if not isinstance(iface, ABC):
        # If it's not an ABC, check all methods are present
        if not issubclass_(type(iface), ABC):
            raise TypeError("iface must be a subclass of ABC")
        for attr in getattr(iface, "__dict__", {}):
            if attr not in candidate.__dict__:
                return False
        return True
    else:
        # If it's an ABC, check all methods are present or abstract in candidate
        for attr in getattr(iface, "__dict__", {}):
            if attr not in candidate.__dict__:
                if tentative:
                    return True
                else:
                    return False
            if isinstance(candidate, ABCMeta) and attr.startswith('__'):
                continue
        return True