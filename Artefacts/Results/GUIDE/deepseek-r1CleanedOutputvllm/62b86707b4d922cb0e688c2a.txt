class MyClass:
    _HOOKS = {}

    @classmethod
    def on(cls, hook):
        """
        Return a decorator function to add a new handler to the "hook" in the registry in the class.
        """
        def decorator(func):
            cls._HOOKS[hook] = func
            return func
        return decorator

# Test code (to be run separately)
import unittest

class TestHooks(unittest.TestCase):
    def test_on_decorator(self):
        class TestClass:
            _HOOKS = {}

            @classmethod
            def on(cls, hook):
                def decorator(func):
                    cls._HOOKS[hook] = func
                    return func
                return decorator

        test_instance = TestClass()
        test_instance.on('test_hook')(lambda: None)
        self.assertEqual(test_instance._HOOKS['test_hook'], lambda: None)

    def test Multiple Handlers(self):
        class TestClass:
            _HOOKS = {}

            @classmethod
            def on(cls, hook):
                def decorator(func):
                    cls._HOOKS[hook] = func
                    return func
                return decorator

        test_instance = TestClass()
        test_instance.on('hook1')(print)
        self.assertEqual(test_instance._HOOKS['hook1'], print)

        test_instance.on('hook2')(lambda: None)
        self.assertEqual(test_instance._HOOKS['hook2'], lambda: None)

if __name__ == "__main__":
    unittest.main()