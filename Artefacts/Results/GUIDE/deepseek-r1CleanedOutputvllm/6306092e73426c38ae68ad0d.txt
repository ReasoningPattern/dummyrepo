def create_complex_argument_type(self, subcommand, type_name, option_name, spec_option):
    """
    Returns the corresponding function in COMPLEX_TYPES based on type_name and returns the result obtained by complex_action after option_name,(self.vars, self.defaults, self.plugin_path), subcommand, spec_option) is input.
    """
    def create_complex_argumet_type(*args, **kwargs):
        # Assuming args are self, vars, defaults, plugin_path, subcommand, spec_option
        # Based on the function signature, we'll extract the necessary arguments
        self_vars, self_defaults, plugin_path = args[1], args[2], args[3]
        
        # Call complex_action with the specified arguments
        action_result = complex_action(option_name, (self_vars, self_defaults, plugin_path), subcommand, spec_option)
        
        # Get the function from COMPLEX_TYPES
        complex_func = COMPLEX_TYPES[option_name][type_name]
        
        return complex_func
    return create_complex_argumet_type