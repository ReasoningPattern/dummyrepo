from collections import defaultdict

class PopItemDict(dict):
    def __init__(self):
        super().__init__()
        self.counts = defaultdict(int)
    
    def __setitem__(self, key, value):
        if key not in self:
            self[key] = value
            self.counts[key] += 1
        else:
            self.counts[key] += 1
    
    def __getitem__(self, key):
        if key in self:
            self.counts[key] += 1
            return self[key]
        else:
            raise KeyError
    
    def __delitem__(self, key):
        if key in self:
            self.counts[key] -= 1
            del self[key]
            del self.counts[key]
    
    def popitem(self):
        if not self:
            raise KeyError("popitem(): empty")
        min_count = None
        min_key = None
        for key in self:
            count = self.counts[key]
            if (min_count is None) or (count < min_count):
                min_count = count
                min_key = key
        del self[min_key]
        del self.counts[min_key]
        return (self[min_key], min_key)