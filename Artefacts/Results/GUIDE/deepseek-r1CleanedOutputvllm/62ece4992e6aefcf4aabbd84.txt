def is_ipv4(target):
    """
    Test if IPv4 address or not.

    Args:
        target (str, int, float, etc.): The input to test.

    Returns:
        bool: True if target is a valid IPv4 address, False otherwise.
    """
    # Convert target to string for consistent processing
    s = str(target)
    
    # Split the string into parts by dot
    parts = s.split('.')
    
    # Check if there are exactly four parts
    if len(parts) != 4:
        return False
    
    # Check each part for valid numeric range
    for part in parts:
        # Check if the part is a valid integer
        if not part.isdigit():
            return False
        # Convert to integer and check range
        num = int(part)
        if num < 0 or num > 255:
            return False
    
    return True

# Test cases
def test_is_ipv4():
    test_cases = [
        ("192.168.0.1", True),
        ("192.168.0.1.", False),
        ("192.168.0.1a", False),
        ("abc.def.ghi.jkl", False),
        ("192.168.0.192", True),
        ("192.168.0.0", True),
        ("172.16.254.1", True),
        ("192.168.0.1", True),
        ("192.168.0", False),
        ("192.168.0.1.1", False),
        ("  192.168.0.1  ", False),
        ("192.168. 0.1", False),
        ("192.168.0.123.45", False),
        (192.168.0.1, True),
        (192.168.0.1.0, False),
        (192.168.0.123, False),
        (192.168.01.1, False),  # Note: '01' is invalid in IP addresses
    ]
    
    for target, expected in test_cases:
        result = is_ipv4(target)
        assert result == expected, f"Test failed for input: {target}"
        print(f"Test passed for input: {target}")
    
    print("All tests passed!")