import random

def _shuffled(seq: Sequence[str]) -> list[str]:
    """
    Shuffles a given sequence of strings using a fixed random seed.

    Args:
        seq: The sequence of strings to be shuffled.

    Returns:
        A new list containing the shuffled strings.

    Note:
        Uses a fixed random.seed for reproducibility.
    """
    random.seed(42)  # Fixed seed for reproducibility
    if len(seq) <= 1:
        return list(seq)
    
    shuffled = list(seq)
    random.shuffle(shuffled)
    return shuffled

def test_shuffled():
    import pytest
    from collections.abc import Sequence
    
    @pytest.mark.parametrize("seq", [
        [],
        ["a"],
        ["one", "two", "three"],
        ["apple", "banana", "cherry", "date"]
    ])
    def test_case(seq):
        shuffled = _shuffled(seq)
        assert isinstance(shuffled, list)
        assert all(isinstance(item, str) for item in shuffled)
        assert shuffled != seq  # Unless seq had duplicate elements
        assert len(shuffled) == len(seq)
    
    @pytest.mark.parametrize("seq", [
        ["a", "b"],
        ["one", "two", "three"]
    ])
    def test_fixed_seed(seq):
        shuffled1 = _shuffled(seq)
        shuffled2 = _shuffled(seq)
        assert shuffled1 == shuffled2
    
    pytest.main()