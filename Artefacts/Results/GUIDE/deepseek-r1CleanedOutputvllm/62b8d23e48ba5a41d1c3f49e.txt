import random

class MyClass:
    def __init__(self, data=None):
        if data is None:
            self.items = {}
        else:
            self.items = data.copy()

    def popitem(self):
        """
        Find, remove and return a random (key, value) pair via __choice in the class
        """
        # Create a list of all key-value pairs to safely remove the item
        items = list(self.items.items())
        if not items:
            raise KeyError("popitem(): empty")
        # Select a random item
        key, value = random.choice(items)
        # Remove and return the selected item
        del self.items[key]
        return key, value

def test_popitem():
    import unittest
    class TestSuite(unittest.TestCase):
        def setUp(self):
            self.obj = MyClass({'a': 1, 'b': 2, 'c': 3})
            self.obj2 = MyClass()

        def test_basic(self):
            key, value = self.obj.popitem()
            self.assertIn(key, self.obj.items.keys())
            self.assertIn(value, self.obj.items.values())
            self.assertEqual(self.obj.items[key], value)
            self.assertNotIn(key, self.obj.items.keys())

        def test_empty(self):
            with self.assertRaises KeyError:
                self.obj2.popitem()

    suite = TestSuite()
    unittest.main()

if __name__ == "__main__":
    test_popitem()