import subprocess
import shlex
from pathlib import Path

def prepare_repository_from_archive(
    archive_path: str,
    filename: Optional[str] = None,
    tmp_path: Union[PosixPath, str] = "/tmp",
) -> str:
    """
    Given an existing archive_path, uncompress it.
    Returns a file repo url which can be used as origin url.

    This does not deal with the case where the archive passed along does not exist.
    @param archive_path : archive file path
    @param filename: File name
    @param tmp_path: Temporary file path
    @return Repo URL
    """
    # Determine the command based on the archive type
    if archive_path.lower().endswith('.tar'):
        cmd = f"tar -xvf {archive_path}" if filename is None else f"tar -xvf {filename} {archive_path}"
    elif archive_path.lower().endswith('.zip'):
        cmd = f"zip -xvf {archive_path}" if filename is None else f"zip -xvf {filename} {archive_path}"
    else:
        raise ValueError("Archive must be a tar or zip file")

    # Extract the contents
    result = subprocess.run(
        shlex.split(cmd),
        text=True,
        capture_output=True,
        check=False
    )

    # Get the output and construct the URL
    extracted_path = result.stdout.strip()
    if extracted_path:
        return f"file://{extracted_path}"
    else:
        raise RuntimeError("Failed to extract archive")