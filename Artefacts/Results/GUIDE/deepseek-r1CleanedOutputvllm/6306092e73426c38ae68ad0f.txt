def get_nested_custom_and_control_args(self, args):
    """
    Split input arguments into control, nested, and custom arguments.

    Control arguments are those that control the IR behavior and are not included in the spec file.
    Nested arguments are used by Ansible playbooks and are included in the spec file.
    Custom arguments are ansible variables that replace normal nested usage.

    Args:
        args (list): The collected list of arguments.

    Returns:
        tuple: (control_args, nested_args, custom_args) where each is a dictionary.
    """
    control_args = {}
    nested_args = {}
    custom_args = {}

    for arg in args:
        if isinstance(arg, bool):
            # Control boolean arguments
            control_args[arg] = arg
        elif isinstance(arg, str):
            # Check if the string is a control word
            if arg.lower() in ['become', 'state', 'vars', 'become', 'state']:
                control_args[arg] = arg
            else:
                # Check if the string is a nested or custom argument
                if arg.strip().upper() == 'YES' or arg.strip().upper() == 'NO':
                    control_args[arg] = arg
                else:
                    # Determine if it's nested or custom based on presence of special characters
                    if arg.count('=') or arg.count('-'):
                        nested_args[arg] = arg
                    else:
                        custom_args[arg] = arg
        else:
            # For non-string, non-bool values, default to nested or custom
            if isinstance(arg, (int, float)):
                nested_args[arg] = arg
            else:
                # For objects, assume custom
                custom_args[arg] = arg

    return (control_args, nested_args, custom_args)