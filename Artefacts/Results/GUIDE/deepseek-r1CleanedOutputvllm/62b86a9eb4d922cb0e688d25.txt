import re

def _get_resource_name_regex():
    """
    Return the regular expressions that are used to validate the name of the Krake resources
    """
    # Regex patterns for resource name validation
    address_regex = re.compile(
        r'^[A-Za-z0-9]{32}$',  # 32 character alphanumeric string
        re.IGNORECASE
    )
    
    mnemonic_regex = re.compile(
        r'^[a-ix-z0-9]{3,44}$',  # 3-44 character alphanumeric string
        re.IGNORECASE
    )
    
    alphanumeric_regex = re.compile(
        r'^[a-zA-Z0-9]{1,}',  # Any length alphanumeric string
        re.IGNORECASE
    )
    
    return (
        (address_regex, "Wallet Address Regex"),
        (mnemonic_regex, "Mnemonic Phrase Regex"),
        (alphanumeric_regex, "General Alphanumeric Regex")
    )

def does_match(pattern, text):
    """
    Helper function to test if a string matches a regex pattern.
    """
    return bool(pattern.match(text))

def test_resource_name_regex():
    """
    Unit tests for resource name regex patterns.
    """
    # Test cases for address regex
    address_valid = does_match(address_regex, "ABC1234567890XYZABCDEF12345")
    address_invalid = does_match(address_regex, "@$%^&*()_+{}|;:")
    assert address_valid, "Address regex did not match valid address string"
    assert not address_invalid, "Address regex incorrectly matched invalid string"
    
    # Test cases for mnemonic regex
    mnemonic_valid = does_match(mnemonic_regex, "a bcdefghijklmnopqrstuvwxyz12345678")
    mnemonic_invalid = does_match(mnemonic_regex, "1234567890123456789012345678901234567890")
    assert mnemonic_valid, "Mnemonic regex did not match valid mnemonic string"
    assert not mnemonic_invalid, "Mnemonic regex incorrectly matched invalid string"
    
    # Test cases for alphanumeric regex
    alphanumeric_valid = does_match(alphanumeric_regex, "ValidString123")
    alphanumeric_invalid = does_match(alphanumeric_regex, "@$%^&*()_+{}|;")
    assert alphanumeric_valid, "Alphanumeric regex did not match valid alphanumeric string"
    assert not alphanumeric_invalid, "Alphanumeric regex incorrectly matched invalid string"
    
    print("All tests passed!")

# Example usage
if __name__ == "__main__":
    test_resource_name_regex()