import unittest
from unittest.mock import Mock, call, patch
from typing import ServiceName

class WorkspaceManagerTests(unittest.TestCase):
    @patch(ServiceName.WORKSPACE_MANAGER)
    def test_workspace_manager_exists(self, mock_service):
        mock_service.return_value = Mock()
        self.assertEqual(workspace_manager(), mock_service.return_value)

    @patch(ServiceName.WORKSPACE_MANAGER)
    def test_workspace_manager_not_found(self, mock_service):
        mock_service.side_effect = Exception("Service not found")
        with self.assertRaises(Exception) as context:
            workspace_manager()
        self.assertEqual(str(context.exception), "Service not found")

def workspace_manager(cls):
    """
    Gets the workspace manager via ServiceName.WORKSPACE_MANAGER in cls._get_service()
    """
    return cls._get_service(ServiceName.WORKSPACE_MANAGER)