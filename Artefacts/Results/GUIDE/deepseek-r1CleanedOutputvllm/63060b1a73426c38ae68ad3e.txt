import os
import yaml

def get_plugin_spec_flatten_dict(plugin_dir):
    """
    Use YAML to read various information in plugin_dir and return the information in dictionary form.
    """
    result = {}
    
    for entry in os.scandir(plugin_dir):
        if entry.is_file() and entry.name.endswith('.yaml'):
            with open(entry.path, 'r', encoding='utf-8') as f:
                data = yaml.safe_load(f)
                if isinstance(data, dict):
                    result.update(data)
                elif isinstance(data, list):
                    for item in data:
                        if isinstance(item, dict):
                            result.update(item)
                        elif isinstance(item, str):
                            for char in item:
                                result[char] = item
    return result

# Unit test examples
# Example 1: Single YAML file with basic structure
yaml_file_1 = """
- key1: value1
  subkey: subvalue
"""
get_plugin_spec_flatten_dict("test plugged") should return {'key1': 'value1', 'subkey': 'subvalue'}

# Example 2: Directory with multiple YAML files
yaml_file_2 = """
- key2: value2
"""
os.makedirs("test plugged", exist_ok=True)
os.utime("test plugged", None)
get_plugin_spec_flatten_dict("test plugged") should return {'key1': 'value1', 'subkey': 'subvalue', 'key2': 'value2'}

# Example 3: Nested structures in YAML
nested_yaml = """
- nested:
    - key3: value3
    - key4: value4
"""
get_plugin_spec_flatten_dict("test plugged") should return {'key3': 'value3', 'key4': 'value4'}