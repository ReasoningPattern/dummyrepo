Okay, I need to write a Python function called split that takes a string s and a platform argument, which defaults to 'this'. The function should split the string based on the platform rules. Let me think about what each platform means.

First, if the platform is 'this', I need to auto-detect the current operating system. That means on Unix-like systems, it should split on '/' and on Windows, it should split on '\'. So I'll need to check the platform using sys module functions like platform.system(). But wait, sometimes on Windows, the path separator is backslash, and on Unix, it's forward slash. Also, sometimes paths can have backticks on Windows, so maybe I should handle those as well.

Next, if the platform is 1, I should use POSIX style splitting. From what I remember, POSIX uses '/' as the separator and removes empty strings from the result. So I can use the split('/') method but then filter out any empty strings.

For platform 0, it's Windows/CMD style. That uses backslash as the separator and also removes empty strings. So I'll use split('\\) and then filter out empty strings.

I should also make sure that the function handles different cases and edge conditions. For example, if the string is empty, it should return an empty list. If the string has consecutive separators, it should still return the correct parts without empty strings in the middle.

Now, for the unit tests. I'll need to test all possible scenarios: auto-detecting the OS, splitting with POSIX style, splitting with Windows style, and edge cases like empty strings, strings with multiple separators, etc. I'll write tests for each case to ensure the function behaves as expected.

Putting it all together, I'll import the platform module, handle the platform argument, and then decide which separator to use. Then, split the string accordingly and return the list.

Wait, what about cases where the string starts or ends with a separator? For example, 'a//b' should split into ['a', '', 'b'] when using POSIX, but after filtering, it becomes ['a', 'b']. Similarly for Windows. So the split and then list comprehension to remove empty strings should handle that.

Also, I should consider that on Windows, sometimes paths use backslashes as part of the file names, but in the context of this function, the split is only on the separator character, so it should still work as intended.

I think that's the plan. Now I'll write the code, making sure to handle all these cases and include comprehensive tests.
