Okay, I need to write a Python function called vertex3tuple that takes a list of vertices and returns a list of tuples. Each tuple should contain three points: the vertex itself and the two adjacent vertices around it. The polygon is a closed shape, so the first and last vertices are also adjacent. Also, if the index goes out of bounds, I should wrap around to the beginning.

First, I should think about how to handle the indices. For each vertex at index i, the previous vertex is i-1, and the next is i+1. But since the list is circular, when i is 0, i-1 should be the last element, and when i is the last index, i+1 should be 0.

I can loop through each vertex index. For each i, I'll get the current vertex, the previous vertex (i-1 % len(vertices)), and the next vertex (i+1 % len(vertices)). Then, I'll create a tuple with these three and add it to the result list.

Wait, but what if the vertices list is empty or has only one element? Well, the problem says it's a polygon, so it should have at least three vertices. But the function should handle any case gracefully.

I should also test some examples. For example, if vertices = [A, B, C], the output should be [(A,B,C), (B,C,A), (C,A,B)]. If there's only one vertex, it should still loop around, but in that case, the tuple would be (A, A, A).

I should write unit tests to cover these cases. Maybe using the unittest module to create test classes and methods. Each test will check if the function returns the expected output for given inputs.

Putting it all together, the function will loop through each index, compute the previous and next indices using modulo, create the tuples, and collect them into a list to return.

I think that's the plan. Now, I'll write the code accordingly.
