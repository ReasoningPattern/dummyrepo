Okay, so I'm trying to figure out how to implement the _get_conditionally_required_args method. The function is supposed to list arguments that meet a certain condition, specifically the 'required_when' condition. Let me break down what I need to do.

First, I'll look at the parameters. The method takes three arguments: command_name, options_spec, and args. The options_spec is a list of command spec options, and args is the list of received input arguments.

I remember that in Python, when you have a list of options, each option has a name and a value. So, I think I'll need to loop through each option in options_spec.

Wait, the function is part of a class, right? So, I'm probably working with a command-line parser that has a base class with this method. The args are likely the parsed arguments, maybe in the form of a list of strings or a namespace.

The goal is to check each option in options_spec against the args and see if it's required when the condition is met. So, I need to find out when each option is considered required.

Hmm, how does the 'required_when' condition work? I guess it's a function that takes the option's value and the command name and returns a boolean. If the function returns True, then the argument is required.

So, for each option in options_spec, I'll check if it's required. If it is, I'll add its name to the result list.

Let me think about the steps:

1. Initialize an empty list to hold the required argument names.
2. Iterate over each option in options_spec.
3. For each option, determine if it's required by calling the required_when condition.
4. If it's required, append the option's name to the list.
5. After processing all options, return the list.

Wait, how do I check if an option is required? I think each option has a 'required' attribute or maybe a method to check if it's required under certain conditions.

Oh right, in argparse, each option can have a 'required' attribute. But in this case, it's more about the 'required_when' condition, which is a function passed to the method.

So, the condition is applied to each option. If the condition returns True, the argument is required.

Putting it all together, I'll loop through each option, apply the condition, and collect the names.

I should also make sure that the method is part of a class, so I'll need to access the command name and options correctly.

Now, considering unit tests. Since the user mentioned using a test-driven approach, I should think about what test cases would cover this method.

Test cases might include:
- An option that's required when a condition is met.
- An option that's not required when the condition isn't met.
- Handling cases where the condition function returns False or True.

I should write tests that cover these scenarios to ensure the method works as expected.

Wait, but the user said to output only the code, so I don't need to write the tests, just the code.

So, the code will involve iterating over each option, checking the condition, and collecting the names.

I think that's the plan. Now, time to write the code.
