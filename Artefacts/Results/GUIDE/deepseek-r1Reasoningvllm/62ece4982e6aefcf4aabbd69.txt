Okay, so I need to write a Python function called _replace_register based on the given docstring. The function signature is def _replace_register(flow_params, register_number, register_value): and it's supposed to replace the value of flow_params[register_number] with flow_params[register_value] and then delete flow_params[register_value]. 

Hmm, wait a minute. That sounds a bit tricky. If I delete flow_params[register_value], what happens to the value that was at register_number? Because if I delete the key first, I'll lose the value at register_number. So I need to make sure I don't delete it before replacing. 

Let me think about the steps. Maybe I should first get the value from register_value, then replace register_number's value with that, and then delete the register_value key. That way, the data isn't lost. 

So, the steps would be:
1. Check if both register_number and register_value are valid indices in flow_params. Because if one of them is out of bounds, the function should probably raise an error. But the problem statement doesn't specify error handling, so maybe I'll assume the inputs are valid for now.
2. Retrieve the value from flow_params at register_value.
3. Replace the value at flow_params[register_number] with this retrieved value.
4. Delete the key register_value from flow_params.

Wait, but what if register_number and register_value are the same? That would mean replacing a value with itself and then deleting it, which would remove the value. That might not be intended. But the function's docstring doesn't mention that case, so perhaps we should proceed as is.

Now, considering unit tests. The tips suggest using a test-driven approach. So I should write tests before writing the code. But since I'm just generating the code, I'll think about what the tests should look like.

For example, a test case where register_number is 0 and register_value is 1. The function should replace index 0 with the value from index 1 and then remove index 1. Another test case where register_number and register_value are the same, which would result in deleting that key.

But since the user mentioned to output only the code in markdown, I'll focus on writing the function first, ensuring it handles these cases correctly.

Wait, another thing: in Python, dictionaries are ordered since 3.7, but if flow_params is a list, deleting by index could be more efficient. However, the function is named _replace_register, which suggests it's working with a dictionary, perhaps representing registers. So flow_params is likely a dictionary.

So, the function should work with a dictionary. Therefore, accessing by keys is appropriate.

Putting it all together, the function will:

- Get the value from register_value.
- Replace the value at register_number.
- Delete the register_value key.

I should also consider edge cases, like when one of the registers doesn't exist. But again, the problem statement doesn't specify, so I'll proceed under the assumption that the inputs are valid.

So the code would look something like:

def _replace_register(flow_params, register_number, register_value):
    value = flow_params[register_value]
    flow_params[register_number] = value
    del flow_params[register_value]

Wait, but what if register_number is the same as register_value? Then we're replacing it with itself and deleting it, which would remove the value. Is that intended? The docstring doesn't specify, but perhaps the function should handle it as per the code written.

I think that's acceptable unless the problem states otherwise. So the code should be as written.

Now, for the unit tests, I should write several test cases. But since the user is asking for the code, I'll just provide the function as the answer.
