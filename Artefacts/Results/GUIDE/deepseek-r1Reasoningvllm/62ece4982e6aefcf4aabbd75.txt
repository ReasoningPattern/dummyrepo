Okay, I need to generate Python code based on the given function signature and docstring. The function is called addignored, and it takes a parameter 'ignored'. The docstring explains that the function should use the git command to get file names, turn them into a list, sort only the ignored files, and return them as a comma-separated string.

First, I should figure out how to execute the git command from Python. I remember that the subprocess module can run system commands. So I'll need to import subprocess.

The git command to list ignored files is 'git status --porcelain'. That gives a list of ignored files in a format that's easy to parse. Once I run this command, I'll need to capture its output.

Next, I'll process the output. I'll use subprocess.run to execute the command and capture the output as text. Then, I'll split the output into individual file names using splitlines(). But wait, sometimes the output might have empty lines, so I should filter those out.

After getting the list of ignored files, I need to sort them. The example in the tips shows that the output is sorted, so I'll sort the list in ascending order.

Finally, I'll join the sorted list into a single string with commas separating each filename. If the list is empty, I should return an empty string instead of an empty list to avoid a trailing comma.

Putting it all together, I'll write the function, making sure to handle any potential errors, like if the git command fails. But since the tips suggest a test-driven approach, maybe I should consider writing unit tests later, but for now, the function should be straightforward.

I should also make sure to import the necessary modules, like subprocess and os, and handle any exceptions that might occur when running git commands.

Wait, the function is supposed to return a string of filenames separated by commas. So after sorting, I'll join them with commas. If the list is empty, return an empty string.

I think that's all. Now, I'll write the code step by step, making sure each part works as intended.
