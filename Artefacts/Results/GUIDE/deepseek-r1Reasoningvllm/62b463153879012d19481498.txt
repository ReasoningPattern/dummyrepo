Okay, I need to write a Python function called files_list that returns the files in a given path. The user mentioned following a test-driven development approach, so I should start by thinking about what test cases I should write before even writing the code.

First, I should consider what the function is supposed to do. It should list all the files in the specified path. But wait, does it include directories or only files? The docstring says "Return the files in given path," so I think it should only return files, not directories.

Next, I need to think about different scenarios. For example, if the path is a directory, it should list all the files inside. If the path is a file, it should probably return an empty list or maybe just indicate that it's a file. Also, what about nested files, like subdirectories? I think the function should return all files recursively unless specified otherwise. But the problem statement doesn't mention handling subdirectories, so maybe it's only for the immediate directory.

I should also consider edge cases, like if the path doesn't exist, the function should return an empty list. What about hidden files on Unix systems? Are they included? I think the standard Unix behavior is to include them, so I should include them unless told otherwise.

Now, for the tests. I'll need to write unit tests using a testing framework like pytest. The tests should cover various scenarios: empty directory, directory with files, directory with subdirectories, file in the directory, and non-existent path.

In the test cases, I'll use the unittest.mock module to mock the platform and walk functions to isolate the behavior of the files_list function. Each test will call the function and assert the expected result.

Once the tests are written, I can proceed to implement the files_list function. Using the os module, I can list the contents of the directory. I'll check if the given path is a directory. If not, return an empty list. Then, I'll use os.listdir to get all entries. For each entry, I'll check if it's a file using os.path.isfile. I'll collect all such entries into a list and return it.

Wait, but what if the path is a file? Like, if someone calls files_list with a file path instead of a directory. In that case, the function should return an empty list because it's not a directory. So I should add a check at the beginning of the function: if not os.path.isdir(path), return an empty list.

Also, I need to handle cases where the path doesn't exist. The os.path.isdir function will return False, so the function will correctly return an empty list.

I should also make sure to import the necessary modules: os and unittest.mock. And since the function is supposed to return a list of filenames, the function will return a list of strings.

Putting it all together, the code will import the required modules, write the function, and then include the test cases. The test cases will use mocks to verify that the function behaves as expected under different conditions.

I think that's a solid plan. Now, I'll write the code, making sure to include all the necessary imports and structure the function correctly. Then, I'll write the test cases using pytest and ensure they cover all the scenarios I thought of.
