Okay, I need to generate Python code based on the given function signature and docstring. The function is called process_text_links and it takes text as an argument. The docstring says it processes links in text, adding attributes and linkifying textual links.

First, I should think about what this function is supposed to do. Processing links could involve identifying URLs within the text and converting them into clickable links. Also, textual links, which are phrases or words that point to something, should be recognized and formatted.

I remember that using regular expressions is a common approach for text processing. So, I'll need to import the re module for that. The function will likely return a string where the links are formatted with square brackets and underlined, like [text](url).

Next, I should consider unit tests. Since the user mentioned a test-driven development approach, I'll outline test cases that cover different scenarios. For example, a text without any links, a text with a URL, a text with a textual link, and a mix of both. Each test case will check if the function behaves as expected.

Let me outline the test cases. The first test, test_no_links, will pass a simple string and expect the same string back. The second, test_url_only, will check if a URL is correctly formatted. The third, test_textual_link, will ensure a textual link is enclosed in brackets. The fourth, test混合 links, will test handling multiple link types.

For each test case, I'll use the assertEqual function to compare the expected output with the actual output of the process_text_links function. This will help catch any bugs early.

Now, I'll structure the code. I'll start by importing re. Then, define the process_text_links function. Inside, I'll use re.sub to replace all matches of the pattern. The pattern should match both URLs and textual links.

The regex pattern needs to be flexible enough to capture URLs and textual links. For URLs, I'll allow http, https, and ftp protocols, followed by optional whitespace, the domain, port, path, query, and fragment. The pattern will capture the entire URL as group 1.

For textual links, the pattern will match any word characters, possibly including underscores, and capture them as group 2. The replacement function will format these as [text](url) or [text].

Wait, but URLs can have various formats, and sometimes they might not be URLs but other text. So, I need to ensure that the regex correctly identifies URLs and captures the textual links without overlapping.

I'll write the regex pattern using alternation (|) to match either a URL or a textual link. The pattern will be compiled once inside the function for efficiency.

Then, the function will use re.sub with this pattern and a lambda function as the replacement. The lambda will take a match object and return the formatted string based on whether it's a URL or a textual link.

After defining the function, I'll write the unit tests. Each test will create a sample input, call process_text_links, and assert the output matches the expected result.

I should also consider edge cases, like URLs with spaces, different protocols, and links that are part of larger text. The tests will help ensure the function handles these scenarios correctly.

Finally, I'll put all this together into a Python script, making sure to include the necessary imports and structure the code properly.
