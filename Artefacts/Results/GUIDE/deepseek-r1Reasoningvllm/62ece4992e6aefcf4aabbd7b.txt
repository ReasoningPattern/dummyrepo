Okay, I need to write a Python function called write_configuration based on the given function signature and docstring. The tips suggest using test-driven development, so I should start by creating unit tests before writing the actual code. Let me think about what this function needs to do.

The function takes four parameters: config_filename, rendered_config, mode, and overwrite. The docstring explains that it writes the rendered YAML config to a file. If the file exists and overwrite is False, it should abort without writing. If it doesn't exist, create it. It should handle writing to the file otherwise.

First, I'll outline the function's behavior. It should check if the config_filename exists. If it doesn't, open it in write mode and write the rendered_config. If it does exist, check the overwrite flag. If overwrite is True, write the config. If not, raise an error or do nothing? Wait, the docstring says abort before writing anything, so it should probably raise an error or just not proceed. Hmm, but the example in the answer shows it raises a FileNotFoundError when trying to open an existing file with overwrite=False. That makes sense.

I should also consider the mode parameter. The default is 0o600, which in Python 3 is equivalent to 600 in octal. Mode 600 means the file is writable by everyone, which is probably intended for testing purposes.

Now, for the tests. I'll need to cover different scenarios: file doesn't exist, file exists with overwrite=True, file exists with overwrite=False, and maybe different modes. Also, handling exceptions, like when the file can't be opened.

Let me think about the test cases. I'll write unit tests using pytest. The first test, test_write_configuration_file_does_not_exist, will create a non-existent file and ensure the function writes the config. The second test, test_write_configuration_file_exists_with_overwrite, will check that when overwrite is True, the function writes the config and the file is created. The third test, test_write_configuration_file_exists_without_overwrite, will attempt to write when the file exists and overwrite is False, expecting an error. The fourth test, test_write_configuration_file_exists_without_overwrite_and_mode, will check the mode parameter, perhaps trying to write with a mode that doesn't allow writing.

Wait, in the fourth test, maybe I should check if the function correctly handles a mode that's not writable. For example, if mode is 0o400, which is read-only, and the function tries to write, it should raise a PermissionError.

Also, I should handle exceptions, like when the file can't be opened, such as a permissions error. So in the test where the file doesn't exist, I should ensure that the function raises a FileNotFoundError instead of an IOError.

Putting it all together, I'll structure the tests to cover these scenarios. Then, I'll write the function, making sure it handles all these cases correctly.

In the function, I'll first check if the file exists. If not, open it in write mode with the given mode and write the rendered_config. If it does exist, check if overwrite is True. If yes, proceed to write. If not, raise a FileNotFoundError. Also, ensure that the mode is applied correctly when opening the file.

Wait, in the function, when opening the file, I should use the mode parameter. So when the file doesn't exist, I open it with mode=mode. When it does exist and we're overwriting, I open it with mode=mode as well. But when not overwriting, I don't open it, just write directly.

I should also make sure that the function doesn't attempt to write if the file exists and overwrite is False. So in that case, it should do nothing and return None, as per the docstring.

Testing these scenarios will ensure that the function behaves as expected. Also, handling exceptions properly is important, such as when the file can't be opened due to permissions.

So, in summary, the function will:

1. Check if config_filename exists.
2. If it doesn't, open it in the given mode and write rendered_config.
3. If it does exist, check if overwrite is True.
4. If overwrite is True, open and write.
5. If overwrite is False, raise FileNotFoundError.
6. Handle mode correctly, ensuring the file is writable as per the mode.

Now, I'll write the code, making sure to import necessary modules like os and yaml. Then, implement the function and the tests.
