Okay, so the user wants me to generate Python code based on a function signature and docstring. They also mentioned following a test-driven development approach, which means I should create unit tests first before writing the actual code.

First, I'll look at the function signature: def get_nodeinfo_well_known_document(url, document_path=None):. The docstring says it returns a formatted dictionary with info like url and document_path. So the function takes a url and an optional document_path, which defaults to None.

I need to think about what other information the function might return. Common fields in such functions include version, node_name, and node_type. These are typical in node info dictionaries, so I'll include them.

Next, I'll structure the function. It should create a dictionary with the url, document_path, version, node_name, and node_type. If document_path is provided, it should be included; otherwise, it'll be None.

Now, for the unit tests. I'll need to cover different scenarios: when document_path is None, when it's an empty string, and when it's a valid path. Each test case will call the function with specific inputs and check if the output matches the expected dictionary.

I'll write three test cases. The first tests the default case where document_path is None. The second tests an empty string for document_path. The third tests a valid path. Each test will assert that the returned dictionary has all the correct keys and the document_path is correctly included or excluded based on the input.

I should also make sure to import the necessary modules, like unittest and unittest.mock, to create the test cases and mocks.

Finally, I'll present the code in Python markdown format, including both the function and the unit tests. I'll organize them clearly so that the user can easily understand and run the tests.
