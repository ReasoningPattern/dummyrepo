

```python
def generate_default_observer_schema(app):
    """
    Generate the default observer schema for each Kubernetes resource present in ``spec.manifest`` for which a custom observer schema hasn't been specified.
    """
    # Assume spec.manifest is a list of resource names
    # Assume custom_schemas is a dictionary mapping resource names to their custom schemas
    default_schemas = []
    for resource in app.spec_manifest:
        if resource in app.custom_schemas:
            default_schemas.append(app.custom_schemas[resource])
        else:
            # Generate default schema for resource
            default_schema = {
                'type': 'object',
                'properties': {
                    'metadata': {
                        'type': 'object',
                        'properties': {
                            'name': {'type': 'string'},
                            'namespace': {'type': 'string'},
                            'labels': {'type': 'object'},
                            'annotations': {'type': 'object'}
                        },
                        'required': ['name', 'namespace']
                    },
                    'spec': {
                        'type': 'object',
                        'properties': {
                            'containers': {
                                'type': 'array',
                                'items': {
                                    'type': 'object',
                                    'properties': {
                                        'name': {'type': 'string'},
                                        'image': {'type': 'string'},
                                        'args': {'type': 'array'},
                                        'env': {
                                            'type': 'array',
                                            'items': {
                                                'type': 'object',
                                                'properties': {
                                                    'name': {'type': 'string'},
                                                    'value': {'type': 'string'}
                                                },
                                                'required': ['name', 'value']
                                            }
                                        }
                                    },
                                    'required': ['name', 'image']
                                }
                            }
                        },
                        'required': ['containers']
                    }
                },
                'required': ['metadata', 'spec']
            }
            default_schemas.append(default_schema)
    return default_schemas
```