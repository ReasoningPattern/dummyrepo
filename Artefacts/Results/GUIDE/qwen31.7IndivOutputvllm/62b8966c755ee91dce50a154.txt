

```python
from datetime import datetime, timezone
from dateutil import parser

def isoparse(self, dt_str):
    """
    Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.

    Args:
        dt_str: A string or stream containing only an ISO-8601 datetime string

    Returns:
        A :class:`datetime.datetime` representing the string.
        Unspecified components default to their lowest value.

    Raises:
        ValueError: If the input string is invalid.
    """
    if 'T' in dt_str:
        date_part, time_part = dt_str.split('T', 1)
    else:
        date_part = dt_str
        time_part = None

    # Parse date part
    date_formats = [
        "%Y",  # year only
        "%Y-%m",  # year and month
        "%Y-%m-%d",  # year, month, day
        "%Y%m%d",  # year, month, day as four-digit numbers
    ]
    for fmt in date_formats:
        try:
            date = parser.parse(date_part, fuzzy=True)
            break
        except ValueError:
            continue
    else:
        # If none of the formats work, assume it's a year
        date = parser.parse(date