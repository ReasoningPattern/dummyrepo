

```python
def lfu_cache(maxsize=128, typed=False):
    def decorator(func):
        cache = {}
        freq = {}
        cache_size = maxsize

        def wrapper(*args, **kwargs):
            key = (args, kwargs)
            if key in cache:
                freq[key] += 1
                cache[key] = freq[key]
            else:
                freq[key] = 1
                cache[key] = freq[key]
            if len(cache) > cache_size:
                min_freq = min(freq.values())
                min_key = None
                for k in freq:
                    if freq[k] == min_freq:
                        min_key = k
                        break
                del cache[min_key]
                del freq[min_key]
            return func(*args, **kwargs)
        return wrapper
    return decorator
```