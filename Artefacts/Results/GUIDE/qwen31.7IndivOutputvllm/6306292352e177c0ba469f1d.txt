

```python
from typing import Tuple, Set
import re

def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:
    """
    Find tags in text, ignoring tags inside code blocks.
    Optionally replace the tag word with the result of the replacer function.
    """
    # Split text into parts, ignoring code blocks
    code_blocks = re.findall(r'```(.*?)```', text, re.DOTALL)
    parts = []
    in_code_block = False
    current = ""
    for line in text.split('\n'):
        if line.strip() == '```':
            in_code_block = True
            current = ""
        elif in_code_block:
            current += line + "\n"
            in_code_block = False
        else:
            current += line + "\n"
            if not in_code_block:
                parts.append(current)
                current = ""
    # Process non-code block parts
    tags = set()
    for part in parts:
        words = part.split()
        for word in words:
            if is_tag(word):
                tags.add(word)
    # Replace tags with replacer if provided
    if replacer:
        # Replace tags in the original text
        # This is a simplified approach; actual implementation would need more sophisticated parsing
        # For the purpose of this example, we'll replace tags in the original text
        # Note: This is a placeholder and may not work as intended
        result = text
        for tag in tags:
            result = result.replace(tag, replacer(tag))
        return tags, result
    return tags, text

def is_tag(word: str) -> bool:
    """Helper function to determine if a word is a tag."""
    # This is a simplistic check; in a real scenario, a more sophisticated tag detection would be needed
    return bool(re.match(r'\b[a-zA-Z0-9_]+\b', word))
```