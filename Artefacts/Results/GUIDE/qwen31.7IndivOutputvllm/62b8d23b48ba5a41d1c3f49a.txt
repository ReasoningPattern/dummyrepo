

```python
def mru_cache(maxsize=128, typed=False):
	"""
	Decorator to wrap a function with a memoizing callable that saves
	up to `maxsize` results based on a Most Recently Used (MRU)
	algorithm.
	"""
	def decorator(func):
		cache = []
		cache_dict = {}
		def wrapper(*args, **kwargs):
			if typed:
				key_args = tuple(str(arg) for arg in args)
				key_kwargs = tuple(f"{k}={v}" for k, v in kwargs.items())
				key = key_args + key_kwargs
			else:
				key = tuple(args) + tuple(kwargs.items())
			if key in cache_dict:
				return cache_dict[key]
			if len(cache) >= maxsize:
				removed = cache.pop(0)
				del cache_dict[removed]
			cache.append(key)
			cache_dict[key] = func(*args, **kwargs)
			return cache_dict[key]
		return wrapper
	return decorator
```