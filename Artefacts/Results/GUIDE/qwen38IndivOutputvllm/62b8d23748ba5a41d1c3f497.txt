

```python
import heapq

class LFUCache:
    def __init__(self, capacity):
        self.capacity = capacity
        self.data = {}
        self.freq = {}
        self.heap = []

    def popitem(self):
        """
        Remove and return the `(key, value)` pair least frequently used.
        """
        while self.heap:
            freq, key, value = heapq.heappop(self.heap)
            if self.freq.get(key, 0) == freq:
                del self.data[key]
                del self.freq[key]
                return (key, value)
        raise KeyError("popitem from empty container")
```

```python
import pytest

def test_popitem_empty():
    cache = LFUCache(0)
    with pytest.raises(KeyError):
        cache.popitem()

def test_popitem_single_item():
    cache = LFUCache(1)
    cache.data['a'] = 1
    cache.freq['a'] = 1
    heapq.heappush(cache.heap, (1, 'a', 1))
    assert cache.popitem() == ('a', 1)

def test_popitem_multiple_items():
    cache = LFUCache(2)
    cache.data['a'] = 1
    cache.freq['a'] = 1
    heapq.heappush(cache.heap, (1, 'a', 1))
    cache.data['b'] = 2
    cache.freq['b'] = 1
    heapq.heappush(cache.heap, (1, 'b', 2))
    assert cache.popitem() in [('a', 1), ('b', 2)]

def test_popitem_after_access():
    cache = LFUCache(2)
    cache.data['a'] = 1
    cache.freq['a'] = 1
    heapq.heappush(cache.heap, (1, 'a', 1))
    cache.data['b'] = 2
    cache.freq['b'] = 1
    heapq.heappush(cache.heap, (1, 'b', 2))
    # Access 'a' to increase its frequency
    cache.freq['a'] = 2
    heapq.heappush(cache.heap, (2, 'a', 1))
    assert cache.popitem() == ('b', 2)
```