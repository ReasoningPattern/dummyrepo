

```python
class ProtocolHandlerClass:
    @classmethod
    def protocol_handlers(cls, protocol_version=None):
        """
        Different forms of Bolt protocol handlers are returned based on the value of protocol_version.
        """
        if protocol_version is None:
            protocol_version = 1  # default to version 1
        if protocol_version == 1:
            return cls.Bolt1Handler()
        elif protocol_version == 2:
            return cls.Bolt2Handler()
        elif protocol_version == 3:
            return cls.Bolt3Handler()
        else:
            raise ValueError(f"Unsupported protocol version: {protocol_version}")

import unittest

class TestProtocolHandlers(unittest.TestCase):
    def test_default_protocol_version(self):
        handler = ProtocolHandlerClass.protocol_handlers()
        self.assertIsInstance(handler, ProtocolHandlerClass.Bolt1Handler)

    def test_protocol_version_1(self):
        handler = ProtocolHandlerClass.protocol_handlers(1)
        self.assertIsInstance(handler, ProtocolHandlerClass.Bolt1Handler)

    def test_protocol_version_2(self):
        handler = ProtocolHandlerClass.protocol_handlers(2)
        self.assertIsInstance(handler, ProtocolHandlerClass.Bolt2Handler)

    def test_protocol_version_3(self):
        handler = ProtocolHandlerClass.protocol_handlers(3)
        self.assertIsInstance(handler, ProtocolHandlerClass.Bolt3Handler)

    def test_invalid_protocol_version(self):
        with self.assertRaises(ValueError):
            ProtocolHandlerClass.protocol_handlers(4)
```