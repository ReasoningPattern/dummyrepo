

```python
def validate(self, inventory, extract_spec_version=False):
    """
    Validate a given inventory. If extract_spec_version is True then will look at the type value to determine the specification version. In the case that there is no type value or it isn't valid, then other tests will be based on the version given in self.spec_version. (D)
    """
    if extract_spec_version:
        if 'type' not in inventory:
            raise ValueError("Inventory must have 'type' field when extract_spec_version is True")
        # Assume type determines spec version, e.g., 'inventory' -> '1.0', 'inventory_v2' -> '2.0'
        if not isinstance(inventory['type'], str):
            raise ValueError("Type must be a string")
        self.spec_version = inventory['type']
    else:
        if not hasattr(self, 'spec_version'):
            raise AttributeError("spec_version attribute is required but not set")
        self.spec_version = getattr(self, 'spec_version')

    # Example validation based on spec version
    if self.spec_version == 'inventory':
        if 'items' not in inventory:
            raise ValueError("Inventory missing required 'items' key")
    elif self.spec_version == 'inventory_v2':
        if 'items' not in inventory or 'metadata' not in inventory:
            raise ValueError("Inventory missing required keys for version v2")
    else:
        # Default validation or handle unknown versions
        pass
```