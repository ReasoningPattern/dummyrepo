

```python
def find_roots(graph: "Graph", prop: "URIRef", roots: Optional[Set["Node"]] = None) -> Set["Node"]:
    """
    Find the roots in some sort of transitive hierarchy.

    find_roots(graph, rdflib.RDFS.subClassOf)
    will return a set of all roots of the sub-class hierarchy

    Assumes triple of the form (child, prop, parent), i.e. the direction of
    RDFS.subClassOf or SKOS.broader

    Args:
        graph: Graph Class Object
        prop: URIRef Class Object
        roots: Optional list with set type
    Return:
        roots: a set with nodes
    """
    # Collect all nodes that are subjects of triples with the given property
    subjects = set()
    for s, p, o in graph.triples((None, prop, None)):
        subjects.add(s)
    
    # Get all nodes in the graph
    all_nodes = set(graph.nodes())
    
    # Roots are nodes not appearing as subjects in any triple with the given property
    return all_nodes - subjects
```