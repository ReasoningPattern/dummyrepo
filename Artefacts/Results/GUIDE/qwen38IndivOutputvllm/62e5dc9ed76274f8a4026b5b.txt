

```python
import warnings

def deprecated(message):
    """
    Return a decorator function for deprecating functions and methods.
    """
    def decorator(func):
        def wrapper(*args, **kwargs):
            warnings.warn(
                f"The function {func.__name__} is deprecated: {message}",
                DeprecationWarning,
                stacklevel=2
            )
            return func(*args, **kwargs)
        return wrapper
    return decorator
```

```python
import unittest
import warnings

class TestDeprecatedDecorator(unittest.TestCase):
    def test_deprecated_warning(self):
        @deprecated("This function is deprecated")
        def sample_func():
            pass

        with self.assertWarns(DeprecationWarning) as cm:
            sample_func()
        self.assertIn("sample_func", str(cm.warning))
        self.assertIn("This function is deprecated", str(cm.warning))

    def test_function_still_works(self):
        @deprecated("This function is deprecated")
        def sample_func(x):
            return x + 1

        self.assertEqual(sample_func(2), 3)

    def test_multiple_decorators(self):
        @deprecated("First message")
        @deprecated("Second message")
        def sample_func():
            pass

        with self.assertWarns(DeprecationWarning) as cm:
            sample_func()
        self.assertIn("sample_func", str(cm.warning))
        self.assertIn("Second message", str(cm.warning))
```