def absorb(self, args):
    """
    Given an `args` sequence of expressions, return a new list of expression applying absorption.
    """
    simplified = []
    for expr in args:
        # Check for absorption laws
        # OR absorption: A | (A & B) → A
        # AND absorption: A & (A | B) → A
        if ' | ' in expr and ' & ' in expr:
            # Check for OR absorption pattern
            parts = expr.split(' | ')
            if len(parts) == 2:
                left = parts[0]
                right = parts[1]
                if right.startswith('(') and right.endswith(')'):
                    right = right[1:-1]
                    if ' & ' in right:
                        right_parts = right.split(' & ')
                        if len(right_parts) == 2 and right_parts[0] == left:
                            simplified.append(left)
                            continue
        # Check for AND absorption pattern
        if ' & ' in expr and ' | ' in expr:
            parts = expr.split(' & ')
            if len(parts) == 2:
                left = parts[0]
                right = parts[1]
                if right.startswith('(') and right.endswith(')'):
                    right = right[1:-1]
                    if ' | ' in right:
                        right_parts = right.split(' | ')
                        if len(right_parts) == 2 and right_parts[0] == left:
                            simplified.append(left)
                            continue
        # If no absorption applies, add as is
        simplified.append(expr)
    return simplified