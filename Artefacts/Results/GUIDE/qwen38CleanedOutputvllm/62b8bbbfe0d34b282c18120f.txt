def file_to_textbuffer(file_name, encoding):
    """
    Load a file toward a text buffer
    """
    with open(file_name, 'r', encoding=encoding) as file:
        return file.read()

import unittest
import os
import tempfile

class TestFileToTextbuffer(unittest.TestCase):
    def test_read_file(self):
        with tempfile.NamedTemporaryFile(mode='w', encoding='utf-8', delete=False) as tmp_file:
            tmp_file.write("Hello, world!")
            tmp_file_path = tmp_file.name

        result = file_to_textbuffer(tmp_file_path, 'utf-8')
        self.assertEqual(result, "Hello, world!")

        os.remove(tmp_file_path)

    def test_empty_file(self):
        with tempfile.NamedTemporaryFile(mode='w', encoding='utf-8', delete=False) as tmp_file:
            tmp_file_path = tmp_file.name

        result = file_to_textbuffer(tmp_file_path, 'utf-8')
        self.assertEqual(result, "")

        os.remove(tmp_file_path)

    def test_file_not_found(self):
        with self.assertRaises(FileNotFoundError):
            file_to_textbuffer("nonexistent_file.txt", 'utf-8')