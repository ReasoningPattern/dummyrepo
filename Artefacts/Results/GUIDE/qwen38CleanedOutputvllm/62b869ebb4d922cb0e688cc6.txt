def update_last_applied_manifest_list_from_resp(
    last_applied_manifest, observer_schema, response
):
    """
    Together with :func:`update_last_applied_manifest_dict_from_resp`, this
    function is called recursively to update a partial ``last_applied_manifest``
    from a partial Kubernetes response

    Args:
        last_applied_manifest (list): partial ``last_applied_manifest`` being
            updated
        observer_schema (list): partial ``observer_schema``
        response (list): partial response from the Kubernetes API.

    This function goes through all observed fields, and initializes their value in
    last_applied_manifest if they are not yet present
    """
    for schema_item, resp_item in zip(observer_schema, response):
        # Check if the schema_item has a 'name' key
        name = schema_item.get('name')
        if name in resp_item:
            # Check if the name is already in last_applied_manifest
            found = False
            for item in last_applied_manifest:
                if item.get('name') == name:
                    found = True
                    break
            if not found:
                last_applied_manifest.append({'name': name, 'value': resp_item[name]})
            # Check if there are sub_fields to process
            if 'sub_fields' in schema_item:
                sub_schema = schema_item['sub_fields']
                sub_resp = resp_item.get('sub_fields', [])
                update_last_applied_manifest_list_from_resp(last_applied_manifest, sub_schema, sub_resp)
    return last_applied_manifest