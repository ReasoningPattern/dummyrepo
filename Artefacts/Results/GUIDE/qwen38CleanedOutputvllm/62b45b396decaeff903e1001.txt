class BugzillaClient:
    def amend_bzparams(self, params, bug_ids):
        """
        Amend the Bugzilla params
        """
        if 'bug_ids' in params:
            params['bug_ids'].extend(bug_ids)
        else:
            params['bug_ids'] = bug_ids

import unittest

class TestBugzillaClient(unittest.TestCase):
    def test_amend_bzparams_empty_params(self):
        params = {}
        bug_ids = [1, 2]
        client = BugzillaClient()
        client.amend_bzparams(params, bug_ids)
        self.assertEqual(params, {'bug_ids': [1, 2]})

    def test_amend_bzparams_existing_bug_ids(self):
        params = {'bug_ids': [3], 'limit': 10}
        bug_ids = [4]
        client = BugzillaClient()
        client.amend_bzparams(params, bug_ids)
        self.assertEqual(params, {'bug_ids': [3, 4], 'limit': 10})

    def test_amend_bzparams_other_keys(self):
        params = {'limit': 10, 'offset': 5}
        bug_ids = [1, 2]
        client = BugzillaClient()
        client.amend_bzparams(params, bug_ids)
        self.assertEqual(params, {'limit': 10, 'offset': 5, 'bug_ids': [1, 2]})

    def test_amend_bzparams_empty_bug_ids(self):
        params = {'bug_ids': [3]}
        bug_ids = []
        client = BugzillaClient()
        client.amend_bzparams(params, bug_ids)
        self.assertEqual(params, {'bug_ids': [3]})

    def test_amend_bzparams_no_existing_bug_ids(self):
        params = {}
        bug_ids = []
        client = BugzillaClient()
        client.amend_bzparams(params, bug_ids)
        self.assertEqual(params, {'bug_ids': []})