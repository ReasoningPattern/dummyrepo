import unittest
from unittest import mock

class TestGetOptionSpec(unittest.TestCase):
    def test_get_option_spec_exists(self):
        mock_parser = mock.Mock()
        mock_parser.get_parser_option_specs.return_value = [
            mock.Mock(name='foo'),
            mock.Mock(name='bar')
        ]
        class MockClass:
            def get_parser_option_specs(self, command_name):
                return mock_parser.get_parser_option_specs(command_name)
        instance = MockClass()
        result = instance.get_option_spec('some_command', 'foo')
        self.assertEqual(result, mock_parser.get_parser_option_specs.return_value[0])

    def test_get_option_spec_not_exists(self):
        mock_parser = mock.Mock()
        mock_parser.get_parser_option_specs.return_value = []
        class MockClass:
            def get_parser_option_specs(self, command_name):
                return mock_parser.get_parser_option_specs(command_name)
        instance = MockClass()
        result = instance.get_option_spec('some_command', 'nonexistent')
        self.assertIsNone(result)

class CommandParser:
    def get_parser_option_specs(self, command_name):
        # This method should return the list of option specs for the given command
        pass

    def get_option_spec(self, command_name, argument_name):
        options = self.get_parser_option_specs(command_name)
        for option in options:
            if option.name == argument_name:
                return option
        return None