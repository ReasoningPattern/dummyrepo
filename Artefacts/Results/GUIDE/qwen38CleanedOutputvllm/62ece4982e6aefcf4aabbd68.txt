from typing import List, Optional

def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:
    """
    Convert a number to a string, using the given alphabet.
    The number represents a short uuid.
    The output has the most significant digit first.
    @param number: Int value
    @param alphabet : List with letters
    @param padding : Optional with int value
    @return  string value corresponded to int
    """
    if not alphabet:
        raise ValueError("Alphabet cannot be empty")
    
    # Handle the case where number is zero
    if number == 0:
        chars = [alphabet[0]]
    else:
        chars = []
        while number > 0:
            remainder = number % len(alphabet)
            chars.append(alphabet[remainder])
            number = number // len(alphabet)
        # Reverse to get most significant digit first
        chars = chars[::-1]
    
    # Apply padding
    if padding is not None:
        required_length = padding
        current_length = len(chars)
        if current_length < required_length:
            # Prepend the first character of the alphabet
            chars = [alphabet[0]] * (required_length - current_length) + chars
    
    return ''.join(chars)