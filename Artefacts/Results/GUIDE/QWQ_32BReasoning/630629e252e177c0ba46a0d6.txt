Okay, I need to write a Python function called retrieve_diaspora_host_meta that takes a host as an argument and returns an XRD instance. The function's docstring says it should retrieve a remote Diaspora host-meta document. 

First, I should think about how to approach this. The user mentioned using test-driven development, so I should start by writing unit tests before the actual code. But since the problem is to generate the code based on the given signature and docstring, maybe I should focus on the code first, but keep in mind the tests.

Wait, the user's instruction says to output only the code generated in Python markdown format. So perhaps I should first outline the steps for the code, then write it.

The function needs to get the host-meta document from the given host. The host is a string like 'example.com'. The host-meta file is typically located at /.well-known/host-meta, right? So the URL would be http://host/.well-known/host-meta or https? Or maybe it's possible that the protocol isn't specified. Hmm, maybe the function should handle both http and https, or perhaps it uses a default protocol. The problem doesn't specify, so maybe I should assume http, but perhaps the standard expects https. Wait, Diaspora's documentation might specify that. 

Alternatively, perhaps the host is just the domain, and the function constructs the URL as http://host/.well-known/host-meta. But maybe it should check both http and https? Or maybe it just tries one. Since the function is supposed to retrieve the document, maybe it uses a requests.get or similar to fetch the resource. But the return is an XRD instance, so I need to parse the XML response into an XRD object.

Wait, what is an XRD? Oh right, XRD is eXtensible Resource Descriptor, an XML format used in some protocols. The Python code would need a library to parse XRD documents. But the problem doesn't mention any dependencies. Maybe the user expects that there's an XRD class that can be imported, perhaps from a module like xrd or something. Since the problem doesn't specify, maybe I can assume that there's an existing XRD class that can parse the XML content. 

So the steps for the function would be:

1. Construct the URL to fetch the host-meta document. The URL is http://host/.well-known/host-meta or maybe with https. Let's see, the standard might require that it uses HTTPS. Wait, I should check the RFC or the Diaspora spec. But since I can't look that up right now, perhaps the URL should be built with http, but maybe the user expects to use HTTPS. Alternatively, maybe the function should try both, but that complicates things. Maybe the host is given without the protocol, so the URL is constructed as http://host/.well-known/host-meta. 

2. Use a HTTP client like requests to get the content. So the code would need to import requests. 

3. Check the response's status code. If it's successful (200), then parse the content as XRD. 

4. If there's an error (like 404, or connection error), perhaps raise an exception? The function's docstring says it returns an XRD instance, so maybe it's expected that the function raises an exception if the document can't be retrieved. 

Wait, the function's return is the XRD instance, so in case of failure, perhaps it raises an error. But the docstring doesn't specify that. Hmm. The user needs to handle exceptions in their code, but the function's responsibility is to retrieve and parse. 

So, the code steps:

- Build the URL: "http://{host}/.well-known/host-meta".format(host=host) ?

Wait, but if the host has a path, like a subdomain, but I think the host is just the domain. 

Then, make a GET request. 

Parse the XML content into an XRD object. 

Assuming there's an XRD class that can parse the XML. Let's say there's a module like xrd_parser, but the user hasn't provided that. Maybe in the code, the XRD class is part of a library, so the code would import it. 

Wait, perhaps the XRD is from the xrd module. Let's assume that. 

So the code would look something like:

import requests
from xrd import XRD

def retrieve_diaspora_host_meta(host):
    url = f"http://{host}/.well-known/host-meta"
    response = requests.get(url)
    response.raise_for_status()  # Raises an HTTPError for bad responses
    return XRD(response.text)

But wait, maybe the URL uses HTTPS? The standard might require HTTPS. So maybe the URL should be "https://" instead. 

Alternatively, the function should try both. But that complicates the code. The problem says to return an XRD instance, so perhaps the code should handle the case where the URL is not found and raise an error. 

Also, need to handle possible exceptions from requests.get, like connection errors, timeouts, etc. But the function's docstring doesn't mention any exceptions, so perhaps it's okay to let them propagate. 

Another thing: the host could be an IPv6 address with brackets, but the function's argument is a host string, so the code should handle that. The f-string with http://{host} should work as long as the host is properly formatted. 

Wait, but maybe the host could include a port? Like 'example.com:8080'? The URL would then be http://example.com:8080/.well-known/host-meta, which is correct. 

So the code as above would work, but perhaps the URL should use HTTPS. Let me think again. 

Looking up: The host-meta document is typically served over HTTPS. The .well-known URI is often used with HTTPS. So maybe the URL should be constructed with https://. 

Changing the code to:

url = f"https://{host}/.well-known/host-meta"

But then if the server doesn't support HTTPS, the request would fail. But perhaps that's the responsibility of the function to return the correct XRD. 

Alternatively, the function should try both protocols? But that's more complex. Since the problem doesn't specify, perhaps the code uses https. 

Another possible issue: the host-meta document might have a Content-Type of application/xrd+xml, but the XRD parser might not care as long as it's XML. 

Assuming the XRD class can parse the XML string, the code is okay. 

Now, for the unit tests. 

The user mentioned to first write comprehensive unit tests. But since the code is to be generated, perhaps the tests would be written first in TDD, but the code here is the final product. 

But the problem requires the code, so I can proceed. 

Wait, but the code needs to return an XRD instance, so the code must import that class. 

Assuming the XRD is from a module like 'xrd', perhaps the code should have:

from xrd import XRD

But if that module isn't present, the code would fail. But since the problem states that the function returns an XRD instance, I can assume that such a module exists. 

Putting it all together, the code would be:

import requests
from xrd import XRD

def retrieve_diaspora_host_meta(host):
    """
    Retrieve a remote Diaspora host-meta document.

    :arg host: Host to retrieve from
    :returns: XRD instance
    """
    url = f"https://{host}/.well-known/host-meta"
    response = requests.get(url)
    response.raise_for_status()
    return XRD(response.text)

Wait, but why https? What if the server is only available via http? The problem doesn't specify, but perhaps the standard requires HTTPS. 

Alternatively, maybe the URL should be constructed without the protocol, but that's not possible. The code has to choose. 

Another point: The function's docstring says "returns an XRD instance", so the code must return that. 

Potential edge cases: 

- The host does not have a host-meta file. The function would raise an HTTP error (since response.raise_for_status() would trigger for 404). 

- The host-meta file is present but not parseable as XRD. Then, the XRD constructor would raise an error. 

But the function's docstring doesn't mention handling those cases, so perhaps they are out of scope. 

Another consideration: The host may have a path in the URL, but according to the problem, the host is just the domain. 

So the code seems okay. 

Wait, but what about the XRD parser's requirements? Like, maybe the XRD constructor requires a file or a parsed XML tree. But according to the problem's docstring, the function should return an XRD instance, so passing the text should be okay. 

I think that's the code. 

Now, the user wants the code in Python markdown format. So, enclosed in triple backticks with the language specified. 

So the final code block would be:

```python
import requests
from xrd import XRD

def retrieve_diaspora_host_meta(host):
    """
    Retrieve a remote Diaspora host-meta document.

    :arg host: Host to retrieve from
    :returns: XRD instance
    """
    url = f"https://{host}/.well-known/host-meta"
    response = requests.get(url)
    response.raise_for_status()
    return XRD(response.text)
```

Wait, but in the problem's function signature, the returns is an XRD instance, so the code must return that. 

However, maybe the XRD module's constructor is different. Like, maybe it's XRD.parse(response.text), but without knowing the exact module, I have to make an assumption. 

Alternatively, perhaps the XRD class is initialized with the XML string. 

Assuming that's the case, the code is okay. 

Another possible issue: The URL might need to be encoded. But the host is given as a properly formatted host string, so the f-string should handle it. 

Wait, but if the host contains characters that need percent-encoding? For example, if host is 'example.com: some space', but the problem states that host is a valid host, so the function can assume it's properly formatted. 

So this should be okay. 

Therefore, the code should be as above.
