Okay, I need to write a Python function called replace_dots that replaces all the dots in a string with another given string. Let me think about how to approach this. 

First, the function signature is given: def replace_dots(value, arg). The docstring says it returns a string with all '.' replaced by arg. So the task is straightforward: take the input string 'value', find every occurrence of '.' and replace each with 'arg'. 

Hmm, the straightforward way would be to use the string's replace method. Like value.replace('.', arg). But wait, are there any edge cases I should consider?

Let me think about possible test cases. For example, if the input has no dots, then the function should return the original string. What if arg is an empty string? The function should still work, just replacing dots with nothing. What if value is an empty string? Then the result is also empty. Also, need to make sure that only periods are replaced, not other characters. 

So the unit tests should cover these scenarios. Let me outline some test cases first as per the TDD approach.

Test case 1: Input string has multiple dots. Like "a.b.c", replacing with "x" should become "axbxc".
Test case 2: No dots. "hello" with arg "X" should return "hello".
Test case 3: Arg is empty string. "test.string." becomes "teststring" (assuming the trailing dot is removed).
Test case 4: Value is empty string. Should return empty.
Test case 5: Arg is a multi-character string. Like replacing "." with "XYZ" in "a.b" gives "aXYZb".
Test case 6: What if the arg is None? Wait, the function's doc says arg is a new string. So probably, the user is supposed to pass a string. But in Python, if someone passes a non-string, like an integer, that would cause an error. But the function's parameters are not type-checked here. Since the problem doesn't mention handling that, maybe we can ignore it for now, as per the given spec.

Now, writing the actual code. The replace method is straightforward. So the function can be as simple as return value.replace('.', arg). But wait, what if value is None? The problem says value is the old string, so perhaps it's assumed to be a string. The function's doc doesn't mention handling None, so maybe we can proceed under the assumption that value is a string.

So the code is simple. But let's make sure. Let me think again. The replace method replaces all occurrences, which is exactly what's needed here. So yes, the function can be written in one line.

Now, the user asked to output only the code in Python markdown format. So I need to structure it properly. Also, the problem mentions generating unit tests first, but the actual code is required here. Wait, the user's instruction says to generate the code based on the function signature and docstring, and to output only the code. So maybe the TDD part is just part of the thinking process, but the code is the function itself.

So putting it all together, the code would be:

def replace_dots(value, arg):
    """
    Replaces all values of '.' to arg from the given string
    Args:
        value: old string
        arg: new string to replace '.'
    Returns:
        str, the replaced string
    """
    return value.replace('.', arg)

Wait, but I should check if the parameters are correctly named. The function's parameters are value and arg, which matches the docstring. The return type is a string, which the replace method returns. 

Yes, that should work. Let me think of possible test cases again. For example, "hello.world" with arg "!" becomes "hello!world". That's correct. 

Edge case: if the arg is also a string containing dots, but that shouldn't matter. The replacement is straightforward. So the code should work.
