Okay, I need to write a Python function called select_filenames_by_prefix. The function takes a prefix and a list of files, and returns all files that start with that prefix. Let me think about how to approach this.

First, the function signature is def select_filenames_by_prefix(prefix, files). The docstring says to return all files that match the given prefix. So for each file in the files list, check if the filename starts with the prefix. If yes, include it in the result.

Hmm, I should loop through each file in the files list and check if the string starts with the prefix. So like, for file in files: if file.startswith(prefix), then add to the result list.

Wait, but what about case sensitivity? The problem doesn't mention it, so I assume it's case-sensitive. So 'Prefix' is different from 'prefix'.

Also, need to make sure that the prefix can be any string. Edge cases: if the prefix is an empty string, then all files should be returned? Or maybe the function expects a non-empty prefix? The problem says "given prefix", so maybe it's up to the user, but according to the problem statement, the function should handle whatever is passed.

Another edge case: if a file is exactly the prefix, that should be included. Like prefix is 'img' and a file is 'img', so it's included.

Now, the unit tests. Since I need to follow TDD, I should first write the tests.

Let's think of some test cases.

Test case 1: prefix is 'img', files include 'img1.jpg', 'image2.png', 'doc.txt'. The expected output should be ['img1.jpg', 'image2.png'] because both start with 'img'.

Test case 2: empty prefix. Then all files should be selected. Suppose files are ['a', 'b'], then the result is ['a', 'b'].

Test case 3: prefix longer than some files. Like prefix is 'image', and a file is 'img' → it doesn't start with 'image', so not included.

Test case 4: case sensitivity. If prefix is 'Img', and a file is 'img1.jpg', since it's lowercase, it won't match. So the test should check that.

Test case 5: empty files list → returns empty list.

Test case 6: multiple matches. Like files have 'img_', 'img-', 'IMG' (but the prefix is 'img', so the third one in uppercase won't match).

Wait, but how to structure the tests. Let's think in pytest style.

So, in the tests, I can write functions using pytest. For example:

def test_select_filenames_by_prefix_empty_prefix():
    files = ['a.txt', 'b.txt']
    assert select_filenames_by_prefix('', files) == files

Another test for case sensitivity:

def test_case_sensitive():
    assert select_filenames_by_prefix('Img', ['imgfile.txt', 'ImgFile.txt']) == ['ImgFile.txt']

Wait, the first element is lowercase, so 'Img' vs 'imgfile' → starts with? The first character is lowercase 'i' vs uppercase 'I'? No, because 'Img' starts with uppercase I, while the first file starts with lowercase i. So the first file would not be selected, but the second 'ImgFile' would match.

Hmm, okay.

Another test case where the prefix is exactly the filename.

def test_exact_match():
    files = ['prefix']
    assert select_filenames_by_prefix('prefix', files) == ['prefix']

Now, the actual code. The function can be implemented using a list comprehension:

def select_filenames_by_prefix(prefix, files):
    return [f for f in files if f.startswith(prefix)]

That's straightforward. But let me check the docstring. The description says "return all files that match the given prefix". So the code should do exactly that.

Wait, the docstring says "for each file in files, return all files that match the given prefix". Wait, maybe that's a typo. The wording is a bit off. The correct meaning is to return all files in the list that start with the prefix. So the code I have is correct.

Now, the user asked to generate the code after writing the tests. But the problem says to output only the code generated, in Python markdown format. So I need to write the function.

Wait, but according to the instructions, the user wants the code generated based on the function signature and docstring. The think section is my internal monologue.

So the final code is the function using startswith. Let me make sure there are no mistakes.

Yes, the code should be as written. The function is simple. The tests would help verify that, but the code is straightforward.
