Okay, I need to write a Python function called generate_default_observer_schema that takes an app as an argument. The function's purpose is to generate the default observer schema for each Kubernetes resource in the app's spec.manifest, but only if a custom schema hasn't already been specified. 

First, I should understand what the parameters mean. The 'app' here is likely an instance of some class that has a 'spec' attribute, which in turn has a 'manifest' containing the Kubernetes resources. The observer schema is probably part of some configuration that defines how the system observes or monitors these resources. 

The function should loop through each resource in the manifest. For each resource, check if there's already an observer schema defined. If not, generate a default one. 

But how do I check if a custom schema exists? Maybe each resource has an 'observer_schema' field, and if it's not present or None, then we generate the default. Alternatively, maybe there's a separate structure that holds the custom schemas, and we check against that.

Assuming that each resource in the manifest has an 'observer_schema' attribute. So for each resource in app.spec.manifest.resources (or however they are stored), if resource.observer_schema is None, then generate the default.

The default schema structure might depend on the kind of Kubernetes resource. For example, Deployments might have a different default schema than Services. So the function needs to determine the kind of each resource and generate the schema accordingly.

Wait, the problem says "for each Kubernetes resource present in spec.manifest". So perhaps each resource is a dictionary with a 'kind' field. So the steps would be:

1. Iterate over each resource in app.spec.manifest (assuming it's a list of resources)
2. For each resource, check if it already has an observer schema. How? Maybe each resource has an 'observer_schema' key. If that key is present and not None, skip it.
3. If not, generate the default schema based on the resource's kind.

But how to generate the default schema? The function needs to know what the default is for each resource type. Maybe there's a predefined mapping for different Kubernetes resources. For example:

defaults = {
    'Deployment': {'type': 'json', 'path': '.status.readyReplicas'},
    'Service': {'type': 'yaml', 'path': '.spec.clusterIP'},
    # etc.
}

So the function would look up the default based on the resource's 'kind' and assign it to the resource's observer_schema if it's not already set.

Alternatively, maybe the default is a generic schema that applies to all resources, but that seems unlikely. The problem mentions generating the default for each resource, so probably per-kind.

Therefore, the code structure would be:

def generate_default_observer_schema(app):
    for resource in app.spec.manifest:
        if 'observer_schema' not in resource or resource['observer_schema'] is None:
            kind = resource['kind']
            default_schema = get_default_schema_for_kind(kind)
            resource['observer_schema'] = default_schema

But how to implement get_default_schema_for_kind? That's part of the function. Maybe have a helper function or a dictionary inside.

Wait, the problem states that the function should generate the default schema. So the code must include the logic for determining the default based on the kind.

So, in the code, perhaps there's a dictionary mapping resource kinds to their default schemas. For example:

default_schemas = {
    'Deployment': {
        'type': 'json',
        'path': '.status.availableReplicas',
    },
    'Service': {
        'type': 'json',
        'path': '.spec.clusterIP',
    },
    'Pod': {
        'type': 'json',
        'path': '.status.phase',
    },
    # and so on for other resource types
}

But what if the app's manifest contains a resource kind not in this list? Then the function might need to either raise an error or use a generic default. The problem doesn't specify, so perhaps we just proceed with the available defaults, and assume that the manifest only contains known kinds, or that if not, they just don't get a schema? Hmm, maybe the problem expects that the default is a generic one, but the question mentions "for each Kubernetes resource", so perhaps the default is generic. Alternatively, perhaps the function should have a default for any kind, like a basic schema that works for most resources.

Alternatively, maybe the default schema is a standard one that applies to any resource, like monitoring the status conditions or something. But the problem says "generate the default observer schema for each Kubernetes resource", so perhaps each resource type has a specific default. Since the problem doesn't give specifics, perhaps in the code, the default schema is a generic one, but in practice, the actual code would need to know the right path for each resource. Since I don't have that info, maybe I can make up some example defaults.

Alternatively, perhaps the default schema is to observe the resource's .metadata generation, but that's just a guess.

Alternatively, maybe the default is a schema that just uses the resource's status. But without more info, I need to make some assumptions here. Since the problem is about generating code, perhaps the function will have a default that is a generic structure, but the actual code would depend on the resource's kind.

So, in code, the function would have a dictionary mapping the kind to the schema. Let's proceed with that.

Now, the function's parameters: the app. Assuming that app.spec.manifest is a list of resource dictionaries. So each resource has a 'kind' and possibly an 'observer_schema' key.

The function loops over each resource in app.spec.manifest, checks if observer_schema is not present, then sets it to the default for that kind.

Now, for the code structure:

def generate_default_observer_schema(app):
    default_schemas = {
        'Deployment': {'type': 'json', 'path': '.status.availableReplicas'},
        'Service': {'type': 'json', 'path': '.spec.clusterIP'},
        'Pod': {'type': 'json', 'path': '.status.phase'},
        # Add other resource types as needed
    }

    for resource in app.spec.manifest:
        if 'observer_schema' not in resource or resource['observer_schema'] is None:
            kind = resource.get('kind', '')
            if kind in default_schemas:
                resource['observer_schema'] = default_schemas[kind]
            else:
                # What to do if the kind isn't in the default_schemas?
                # Maybe skip, or use a generic default?
                # The problem says "generate the default for each present", so perhaps we should still assign a generic one.
                # Let's assume a generic schema, or perhaps raise an error?
                # Since the problem doesn't specify, maybe just skip, but that's not helpful.
                # Alternatively, set a default that works for most resources.
                # For example:
                generic = {'type': 'json', 'path': '.metadata.generation'}
                resource['observer_schema'] = generic

Wait, but the problem says "for each Kubernetes resource present in spec.manifest for which a custom observer schema hasn't been specified". So if the resource's kind isn't in the default_schemas, but the code can't find a default, then perhaps it's okay to leave it without? But the problem says to generate the default, so maybe it's required to have a default for all resources. Therefore, perhaps the default_schemas should cover all possible resource types that could be in the manifest. But since the problem doesn't specify, I'll proceed with the example above, and maybe in the code, the default_schemas is a placeholder with some common resources.

Alternatively, maybe the default schema is always the same, but the problem implies that it's per resource type. Since I can't know the exact defaults, I'll have to make up some examples.

Now, the code would look like that. But also, the user mentioned using test-driven development, so first write unit tests before the code. But since the user is asking for the code, I just need to write the function.

Wait, the user's instruction says to generate the code based on the function signature and docstring. The code should be only the generated code in Python markdown format, so I should write the function code.

Another thing to consider: the app's structure. Maybe the manifest is stored as a list under app.spec.manifest, and each resource is a dict with 'kind' and possibly 'observer_schema'.

Another possible edge case: if the resource is None or the manifest is empty. But the function should handle that gracefully, perhaps by skipping.

Putting it all together:

def generate_default_observer_schema(app):
    """
    Generate the default observer schema for each Kubernetes resource present in ``spec.manifest`` for which a custom observer schema hasn't been specified.
    """
    default_schemas = {
        'Deployment': {'type': 'json', 'path': '.status.availableReplicas'},
        'Service': {'type': 'json', 'path': '.spec.clusterIP'},
        'Pod': {'type': 'json', 'path': '.status.phase'},
        # Add other resource types as needed
    }

    for resource in app.spec.manifest:
        if not resource.get('observer_schema'):
            kind = resource.get('kind')
            if kind in default_schemas:
                resource['observer_schema'] = default_schemas[kind]
            else:
                # Handle unknown kinds, perhaps log a warning or use a generic schema
                # For the sake of example, use a generic one
                generic_schema = {'type': 'json', 'path': '.metadata.generation'}
                resource['observer_schema'] = generic_schema

Wait, but in the 'if not resource.get('observer_schema')' check, that would be if it's None or empty? But maybe the observer_schema is an empty dict. So perhaps better to check if it's explicitly None or not present.

Alternatively, the condition is: if 'observer_schema' not in resource or resource['observer_schema'] is None:

So in code:

if 'observer_schema' not in resource or resource['observer_schema'] is None:

But in Python, if the key is present but the value is an empty dict, that's considered a custom schema (even if empty?), so perhaps the condition is only if it's None or not present.

Hence, in code:

if 'observer_schema' not in resource or resource.get('observer_schema') is None:

Alternatively, perhaps the user expects that if the observer_schema is an empty dictionary, then it's considered as needing a default. But the problem's docstring says "a custom observer schema hasn't been specified". So perhaps the presence of the key but with a non-null value means it's specified. So the check is correct.

So adjusting the code:

def generate_default_observer_schema(app):
    default_schemas = {
        'Deployment': {'type': 'json', 'path': '.status.availableReplicas'},
        'Service': {'type': 'json', 'path': '.spec.clusterIP'},
        'Pod': {'type': 'json', 'path': '.status.phase'},
        # Add other resource types here as needed
    }

    for resource in app.spec.manifest:
        if 'observer_schema' not in resource or resource['observer_schema'] is None:
            kind = resource.get('kind', '')
            if kind in default_schemas:
                resource['observer_schema'] = default_schemas[kind]
            else:
                # Fallback to a generic schema if the kind isn't recognized
                generic_schema = {'type': 'json', 'path': '.metadata.generation'}
                resource['observer_schema'] = generic_schema

Wait, but the problem says "generate the default observer schema for each Kubernetes resource present...", so even if the kind isn't in the default_schemas, we still need to generate a default. So the generic schema is necessary.

Alternatively, perhaps the default_schemas should cover all possible Kubernetes resource types, but since that's impractical, the code must have a fallback.

This code should work. Now, the code uses a dictionary to map kinds to their schemas. The user might need to expand the default_schemas with more entries, but that's beyond the problem's scope.

Another thing to note: the function modifies the app's spec.manifest in-place, adding the observer_schema to each resource. That's probably the intended behavior.

Now, the function's docstring says it generates the default schema for each resource in the manifest where a custom hasn't been specified. The code should do exactly that.

So that's the code. Now, to present it in the required format.
