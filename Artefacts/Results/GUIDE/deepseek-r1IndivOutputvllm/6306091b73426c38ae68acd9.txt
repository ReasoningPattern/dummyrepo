

To solve this problem, we need to create a Python function that retrieves a service from a class using a specific service name. We'll also include comprehensive unit tests to ensure the function behaves as expected.

### Approach
1. **Problem Analysis**: The task is to implement a class method `workspace_manager` that retrieves a service named `WORKSPACE_MANAGER` from the class using the `_get_service` method.
2. **Test-Driven Development**: Before writing the actual function, we'll create unit tests to verify the function's correctness under different scenarios:
   - Test when the service exists.
   - Test when the service does not exist and raises an exception.
3. **Mocking Services**: We'll use Python's `unittest.mock` to mock service calls to simulate both successful and failure cases.

### Solution Code

```python
import unittest
from unittest.mock import Mock, call, patch
from typing import ServiceName

class WorkspaceManagerTests(unittest.TestCase):
    @patch(ServiceName.WORKSPACE_MANAGER)
    def test_workspace_manager_exists(self, mock_service):
        mock_service.return_value = Mock()
        self.assertEqual(workspace_manager(), mock_service.return_value)

    @patch(ServiceName.WORKSPACE_MANAGER)
    def test_workspace_manager_not_found(self, mock_service):
        mock_service.side_effect = Exception("Service not found")
        with self.assertRaises(Exception) as context:
            workspace_manager()
        self.assertEqual(str(context.exception), "Service not found")

def workspace_manager(cls):
    """
    Gets the workspace manager via ServiceName.WORKSPACE_MANAGER in cls._get_service()
    """
    return cls._get_service(ServiceName.WORKSPACE_MANAGER)
```

### Explanation
1. **Function Implementation**: The `workspace_manager` function is a class method that calls `_get_service` on the class instance with the service name `WORKSPACE_MANAGER`.
2. **Unit Tests**:
   - `test_workspace_manager_exists`: Mocks the service to return an object and verifies the function returns it.
   - `test_workspace_manager_not_found`: Mocks the service to raise an exception and ensures the function correctly catches and raises this exception.
3. **Mocking**: The `@patch` decorator is used to simulate service calls, allowing us to test both successful and failure scenarios effectively.

This approach ensures that the function behaves correctly under different conditions and is robust against missing services.