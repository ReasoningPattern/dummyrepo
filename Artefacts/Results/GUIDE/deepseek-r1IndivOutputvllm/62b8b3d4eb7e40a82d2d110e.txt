

```python
import os

def _c_optimizations_ignored():
    """
    Return True if get "PURE_PYTHON" environ is not none and not 0, else return False
    """
    pure_python = os.environ.get("PURE_PYTHON")
    return pure_python is not None and pure_python != 0
```

To ensure this function works correctly, here are some comprehensive unit tests:

```python
import unittest

class TestCOptimizationsIgnored(unittest.TestCase):
    def test_c_optimizations_ignored(self):
        # Test case 1: PURE_PYTHON is None
        self.assertFalse(_c_optimizations_ignored())
        
        # Test case 2: PURE_PYTHON is 0
        self.assertFalse(_c_optimizations_ignored())
        
        # Test case 3: PURE_PYTHON is a non-zero value
        self.assertTrue(_c_optimizations_ignored())
        
        # Test case 4: PURE_PYTHON is a string
        self.assertTrue(_c_optimizations_ignored())

if __name__ == "__main__":
    unittest.main()
```

The function will return `True` if the "PURE_PYTHON" environment variable exists and is not 0, otherwise it returns `False`.