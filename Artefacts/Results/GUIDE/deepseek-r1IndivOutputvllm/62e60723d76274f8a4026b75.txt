

To solve this problem, we need to create a Python function that rounds a floating-point number using the "round half to even" strategy, also known as banker's rounding. This method rounds a number to the nearest integer, and if the number is exactly halfway between two integers, it rounds to the nearest even number.

### Approach
The approach to solve this problem is straightforward because Python's built-in `round` function already implements the "round half to even" strategy. Therefore, we can leverage this built-in function to achieve the desired behavior without writing complex logic.

### Solution Code
```python
def round_half_to_even(n):
    """
    Round a floating-point number using the round half to even strategy.
    """
    return round(n)
```

### Explanation
The function `round_half_to_even` takes a single argument `n`, which is a floating-point number. It uses Python's built-in `round` function to round `n` to the nearest integer. The `round` function in Python uses the round half to even strategy, which means that if the number is exactly halfway between two integers, it rounds to the nearest even number. This approach ensures that the function is both efficient and concise, leveraging Python's built-in capabilities to handle the rounding logic correctly.