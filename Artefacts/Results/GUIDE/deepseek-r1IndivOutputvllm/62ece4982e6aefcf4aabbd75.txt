

To solve this problem, we need to create a Python function that retrieves ignored files from the current directory using the `git` command, processes these files, sorts them, and returns them as a comma-separated string. 

### Approach
1. **Retrieve Ignored Files**: Use the `git` command `git status --porcelain` to get a list of ignored files in the current directory. This command outputs the file names in a format that is easy to parse.
2. **Parse Output**: Capture the output of the `git` command and split it into individual file names. We will handle any potential empty lines that might result from the command.
3. **Sort Files**: Sort the list of ignored files alphabetically.
4. **Format Output**: Join the sorted file names into a single string, with each filename separated by a comma. If there are no ignored files, return an empty string.

### Solution Code
```python
import subprocess
import os

def addignored(ignored):
    """
    Use the git command to obtain the file names.
    Turn the file names into a list, sort the list for only ignored files
    return those files as a single string with each filename separated by a comma.
    """
    try:
        # Execute the git command to get ignored files
        result = subprocess.run(['git', 'status', '--porcelain'], 
                                capture_output=True, 
                                text=True, 
                                shell=True)
        ignored_files = result.stdout.strip().split('\n')
        
        # Filter out any empty strings from the list
        ignored_files = [file for file in ignored_files if file]
        
        # Sort the list of ignored files
        ignored_files.sort()
        
        # Join the files into a comma-separated string
        return ','.join(ignored_files)
    except subprocess.CalledProcessError:
        # Handle the case where git command fails
        return ""
```

### Explanation
1. **Retrieving Ignored Files**: The `git status --porcelain` command is executed using `subprocess.run()`. The output is captured in text format for easy parsing.
2. **Parsing Output**: The output is split into individual lines, which are then filtered to remove any empty strings that might result from the command.
3. **Sorting Files**: The list of ignored files is sorted alphabetically using Python's built-in `sort()` method.
4. **Formatting Output**: The sorted list is joined into a single string with commas separating each filename. If no ignored files are found, an empty string is returned.

This approach ensures that we handle potential errors gracefully and return the expected output format.