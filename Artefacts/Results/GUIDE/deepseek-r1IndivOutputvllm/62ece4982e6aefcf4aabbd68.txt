

To solve this problem, we need to create a function that converts a given integer into a string using a specified alphabet, similar to how UUIDs are generated. The function should handle optional padding to ensure the output string has a consistent length.

### Approach
1. **Understand the Problem**: The function needs to convert an integer into a string using a given alphabet. The output should have the most significant digit first. If padding is specified, the output string should be padded with the first character of the alphabet to reach the desired length.
2. **Determine Maximum Value**: The maximum value that can be represented by the alphabet without padding is calculated as \( \text{len(alphabet)}^{128} - 1 \). This is based on the fact that a UUID has 128 bits.
3. **Handle Padding**: If padding is provided, the output string should be padded with the first character of the alphabet to reach the specified length. If the number requires more characters than the padding allows, it will be truncated.
4. **Edge Cases**: Handle cases where the number is zero, the alphabet is empty, or padding is invalid.
5. **Conversion Logic**: Convert the integer into the string representation using the provided alphabet, ensuring that the most significant digit comes first.

### Solution Code
```python
from uuid import uuid1
from hypothesis import given, strategies as st

def int_to_string(number: int, alphabet: list[str], padding: Optional[int] = None) -> str:
    """
    Convert a number to a string, using the given alphabet.
    The number represents a short uuid.
    The output has the most significant digit first.
    @param number: Int value
    @param alphabet : List with letters
    @param padding : Optional with int value
    @return  string value corresponded to int
    """
    if not alphabet:
        return ""
    
    max_without_padding = (len(alphabet) ** 128) - 1
    if number < 0 or number > max_without_padding:
        raise ValueError("Number out of valid range for the given alphabet and padding.")
    
    if padding is not None:
        required_length = padding
    else:
        required_length = len(bin(number)[2:])  # Calculate the actual needed length
    
    if required_length > padding:
        # Pad with leading characters
        padding_length = required_length - padding
        padding_char = alphabet[0]
        number = int(padding_char * padding_length) + number
    
    # Convert number to string using the alphabet
    str_num = 0
    result = []
    for char in reversed(alphabet):
        value = ord(char)
        while number >= value:
            result.append(char)
            number -= value
        if number == 0:
            break
    if not result:
        return ""
    return ''.join(reversed(result))
```

### Explanation
1. **Input Validation**: The function first checks if the alphabet is empty and raises an error if it is. It also checks if the number is within the valid range for the given alphabet.
2. **Padding Handling**: If padding is provided, the function calculates how much padding is needed and adjusts the number accordingly.
3. **Conversion Logic**: The number is converted into the string representation by repeatedly subtracting the value of each character in the alphabet, starting from the most significant character.
4. **Edge Cases**: The function handles cases where the number is zero, the alphabet is empty, and invalid padding values.

This approach ensures that the function works correctly for all valid inputs and handles edge cases gracefully.