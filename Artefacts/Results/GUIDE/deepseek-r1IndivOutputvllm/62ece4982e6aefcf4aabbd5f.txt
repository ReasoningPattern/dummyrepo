

To solve this problem, we need to create a function that takes a list of WAPI responses and an integer specifying the maximum number of items to return per page. The function should yield the list in chunks, each containing up to the specified number of items.

### Approach
The approach involves iterating over the list in chunks of the specified size. We will use a while loop to continuously yield chunks of the list until all elements have been processed. Each iteration will slice the list from the current index to the current index plus the chunk size, then yield that slice. The loop continues until the current index exceeds the length of the list.

### Solution Code
```python
def paging(response, max_results):
    """
    Return a generator that yields pages of the response, each containing up to max_results items.
    
    Args:
        response (list): WAPI response.
        max_results (int): Maximum number of objects to be returned in one page.
        
    Yields:
        Generator: Each page as a list containing up to max_results items.
    """
    page_index = 0
    while page_index < len(response):
        yield response[page_index:page_index + max_results]
        page_index += max_results
```

### Explanation
1. **Initialization**: The function starts by initializing `page_index` to 0. This variable keeps track of the current position in the list.
2. **While Loop**: The loop continues as long as `page_index` is less than the length of the response list.
3. **Slicing and Yielding**: In each iteration, the function slices the list from `page_index` to `page_index + max_results` and yields this slice. This effectively creates a new page containing up to `max_results` items.
4. **Increment Index**: After yielding each page, `page_index` is incremented by `max_results` to move to the next chunk of data.
5. **Termination**: The loop terminates when `page_index` exceeds the length of the response list, ensuring all elements have been processed.

This approach ensures that the list is divided into pages of the specified size, efficiently handling various edge cases such as an empty list or a chunk size larger than the list length.