

To solve this problem, we need to create a function that removes trailing OS-specific separators from each string in a given list. The function should handle different operating systems and edge cases such as empty strings and strings shorter than the separator length.

### Approach
1. **Handle None Input**: If the input list is None, return an empty list immediately.
2. **Determine OS Separator**: Identify the appropriate separator based on the operating system using the `sys.platform` module. For Windows, the separator is '\', for Unix-like systems, it is '/', and a default '/' is used for other cases.
3. **Process Each String**: For each string in the input list:
   - If the string length is less than or equal to 1, add it to the result list as is.
   - Otherwise, iterate from the end of the string towards the beginning to find the first non-separator character. If found, slice the string up to that character and add it to the result list. If no non-separator character is found, add an empty string to the result list.

This approach ensures that all trailing separators are removed efficiently.

### Solution Code
```python
import sys

def remove_ending_os_sep(input_list):
    """
    If input list is None, return []
    Iterate over a string list and remove trailing os separators.
    Each string is tested if its length is greater than one and if the last
    character is the pathname separator.
    Returns:
    A list after removing trailing os separators.
    """
    if input_list is None:
        return []
    
    # Determine the appropriate separator based on the OS
    if sys.platform == 'win32':
        separator = '\\'
    elif sys.platform == 'linux' or sys.platform == 'darwin':
        separator = '/'
    else:
        separator = '/'
    
    result = []
    for s in input_list:
        if len(s) <= 1:
            result.append(s)
        else:
            # Find the last non-separator character
            i = len(s) - 1
            while i >= 0 and s[i] == separator:
                i -= 1
            if i >= 0:
                result.append(s[:i+1])
            else:
                result.append('')
    return result
```

### Explanation
- **Handling None Input**: The function checks if the input list is None and returns an empty list immediately if true.
- **OS-Specific Separator**: The function uses `sys.platform` to determine the correct separator for different operating systems.
- **String Processing**: Each string is processed to remove trailing separators by iterating from the end of the string until a non-separator character is found. This ensures all trailing separators are removed efficiently.

This solution is efficient and handles various edge cases, ensuring correct behavior across different operating systems.