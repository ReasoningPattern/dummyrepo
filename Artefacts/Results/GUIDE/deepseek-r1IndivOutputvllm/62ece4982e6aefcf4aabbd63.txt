

To solve this problem, we need to determine if a given string represents the value `None`. The function should return `True` if the input is a string and its lowercase form is exactly 'none', otherwise it should return `False`.

### Approach
1. **Type Check**: First, we check if the input is a string. If it is not a string, the function immediately returns `False`.
2. **Lowercase Check**: If the input is a string, we convert it to lowercase and check if it equals 'none'. If it does, the function returns `True`; otherwise, it returns `False`.

This approach ensures that we accurately determine if the string represents the value `None` by focusing on both the type and the value of the input.

### Solution Code

```python
def is_none_string(val: any) -> bool:
    if not isinstance(val, str):
        return False
    return val.lower() == 'none'
```

### Explanation
- **Type Check**: The function uses `isinstance(val, str)` to verify if the input is a string. This is more reliable than using `type()` because it accounts for subclassing.
- **Lowercase Check**: The string is converted to lowercase using `val.lower()`, and we check if this lowercase string equals 'none'. This ensures that any string that, when converted to lowercase, matches 'none' will return `True`.

This solution efficiently combines type checking and string manipulation to solve the problem as required.