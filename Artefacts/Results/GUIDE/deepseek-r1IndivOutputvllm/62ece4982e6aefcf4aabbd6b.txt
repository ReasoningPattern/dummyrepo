

To solve this problem, we need to write a Python function called `subclasses` that returns all subclasses of a given class, including those from inheritance and recursion. The function should handle various edge cases, such as classes without subclasses, built-in types, and non-class objects.

### Approach
1. **Problem Analysis**: The goal is to traverse the class hierarchy of a given class and collect all its subclasses. This includes direct and indirect subclasses.
2. **Inspection Module**: Use the `inspect` module, specifically the `getsubclasses()` function, which returns all the subclasses of a given class, including those from inheritance and recursion.
3. **Handling Edge Cases**: 
   - Check if the input is a valid class. If not, return an empty list.
   - Exclude built-in types, as they don't have subclasses in the traditional sense.
4. **Recursive Subclass Collection**: The `getsubclasses()` function inherently handles recursion, so it will correctly collect all levels of subclasses.

### Solution Code
```python
import inspect

def subclasses(cls):
    """
    Return all subclasses of a class, recursively.
    """
    if not isinstance(cls, type) or inspect.isbuiltin(cls):
        return []
    return inspect.getsubclasses(cls)
```

### Explanation
- **Function Definition**: The function `subclasses` takes a single argument `cls`, which is expected to be a class.
- **Type Check**: The function first checks if `cls` is a valid class (an instance of `type`) and is not a built-in type. If either condition fails, it returns an empty list.
- **Subclass Retrieval**: If the input is a valid class, the function uses `inspect.getsubclasses(cls)` to retrieve all subclasses, including those from inheritance and recursion.
- **Return Value**: The function returns a list of all subclasses of the input class.

This approach ensures that the function correctly handles various edge cases and efficiently retrieves all subclasses using Python's built-in module for class inspection.