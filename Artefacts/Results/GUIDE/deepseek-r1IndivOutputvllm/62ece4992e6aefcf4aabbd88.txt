

To solve this problem, we need to create a function that generates a NumPy array filled with zeros of a specified shape and data type. We will also include comprehensive unit tests to ensure the function works correctly under various conditions.

### Approach
1. **Problem Analysis**: The task is to generate a NumPy array of a given shape and data type, initialized with zeros. This can be efficiently achieved using NumPy's `zeros` function, which creates an array of the specified shape filled with zeros.
2. **Intuition**: Using NumPy's `zeros` function allows us to create the desired array efficiently. By default, the array will be of type `float32`, but we can specify any data type using the `dtype` parameter.
3. **Algorithm Selection**: NumPy's `zeros` function is the most appropriate choice as it directly solves the problem of initializing an array with zeros and supports specifying the shape and data type.
4. **Edge Cases Consideration**: We need to ensure that the function handles various edge cases, such as different shapes (1D, 2D, etc.), different data types, and verify that the resulting array is indeed filled with zeros.

### Solution Code
```python
import numpy as np

def make_array(shape, dtype=np.float32):
    """
    Returns a 0-filled array of the given shape and type.

    Args:
        shape : tuple
            shape of the array to create
        dtype : `numpy.dtype`, optional
            data-type of the array to create. Defaults to np.float32.

    Return: np.ndarray
    """
    return np.zeros(shape, dtype=dtype)
```

### Unit Tests
To ensure the correctness of the `make_array` function, we will write comprehensive unit tests. These tests will cover various scenarios including different shapes, different data types, and edge cases.

```python
import numpy as np

def test_make_array_basic():
    arr = make_array((3,))
    assert arr.dtype == np.float32
    assert arr.shape == (3,)
    assert np.all(arr == 0)

def test_make_array_custom_dtype():
    arr = make_array((2,), dtype=np.int32)
    assert arr.dtype == np.int32
    assert arr.shape == (2,)
    assert np.all(arr == 0)

def test_make_array_multi_dimensional():
    arr = make_array((2, 3))
    assert arr.dtype == np.float32
    assert arr.shape == (2, 3)
    assert np.all(arr == 0)

def test_make_array_dtype_check():
    arr = make_array((1,), dtype=np.float64)
    assert arr.dtype == np.float64
    assert arr.shape == (1,)
    assert np.all(arr == 0)

def test_make_array_empty_array():
    arr = make_array(())
    assert arr.dtype == np.float32
    assert arr.shape == ()
    assert np.all(arr == 0)

def test_make_array_string_dtype():
    arr = make_array((2,), dtype=np.dtype("O"))
    assert arr.dtype == np.object
    assert arr.shape == (2,)
    assert np.all(arr == 0)
```

### Explanation
1. **Function Definition**: The `make_array` function takes two parameters: `shape` (a tuple defining the dimensions of the array) and `dtype` (the data type of the array elements, defaulting to `float32`).
2. **Array Creation**: The function uses `np.zeros(shape, dtype=dtype)` to create an array of the specified shape and data type, filled with zeros.
3. **Comprehensive Unit Tests**: The tests cover various scenarios:
   - Basic case with default dtype.
   - Custom data type.
   - Multi-dimensional array.
   - Dtype check for float64.
   - Empty array case.
   - String data type.

These tests ensure that the function behaves correctly under different conditions and helps catch any potential bugs early in the development process.