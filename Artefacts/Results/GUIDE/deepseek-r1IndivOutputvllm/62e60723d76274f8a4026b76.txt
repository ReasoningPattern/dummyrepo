

To solve this problem, we need to create a function `from_ticks` that converts a given number of nanoseconds since midnight into a time object. The function should also accept an optional timezone parameter to handle time zones, if provided.

### Approach
1. **Input Validation**: First, we validate the input to ensure that the number of ticks is within the acceptable range (0 <= ticks < 86400000000000). If the input is out of bounds, we raise an appropriate exception.
2. **Conversion to Time Components**: Convert the given nanoseconds into hours, minutes, seconds, and microseconds. This involves breaking down the total nanoseconds into manageable time components.
3. **Time Object Creation**: Using the converted time components, we create a time object. If a timezone is provided, we ensure the time object is timezone-aware.

### Solution Code

```python
import datetime

def from_ticks(cls, ticks, tz=None):
    """
    Create a time object from ticks (nanoseconds since midnight).

    Parameters:
    :param ticks: nanoseconds since midnight
    :type ticks: int
    :param tz: optional timezone
    :type tz: datetime.timezone or None
    
    :rtype: Time
    """
    if not isinstance(ticks, int):
        raise TypeError("ticks must be an integer")
    if ticks < 0 or ticks >= 86400000000000:
        raise ValueError("ticks out of bounds")
    
    total_nanos = ticks
    hours = total_nanos // 3600000000000
    remaining_nanos = total_nanos % 3600000000000
    minutes = remaining_nanos // 60000000000
    remaining_nanos %= 60000000000
    seconds = remaining_nanos // 1000000000
    remaining_nanos %= 1000000000
    microseconds = remaining_nanos // 1000000
    remaining_nanos %= 1000000
    
    if tz is not None:
        dt = datetime.datetime(
            year=0, month=1, day=1,
            hour=hours, minute=minutes, second=seconds, microsecond=microseconds,
            tzinfo=tz
        )
    else:
        dt = datetime.datetime(
            year=0, month=1, day=1,
            hour=hours, minute=minutes, second=seconds, microsecond=microseconds
        )
    
    return dt.time()
```

### Explanation
1. **Input Validation**: The function first checks if the input `ticks` is an integer and within the valid range. If not, it raises a `TypeError` or `ValueError` respectively.
2. **Conversion to Time Components**: The total number of nanoseconds is converted into hours, minutes, seconds, and microseconds. This is done using integer division and modulus operations to break down the total nanoseconds into the respective time components.
3. **Time Object Creation**: The function then constructs a `datetime` object. If a timezone is provided, the object is marked as timezone-aware. The time component of this `datetime` object is extracted and returned as a `time` object.

This approach ensures that the function correctly converts the given nanoseconds into a time object, handling both standard and timezone-aware cases appropriately.