

To solve this problem, we need to create a Python function that checks whether a given file name exists. The function should return `True` if the file exists and `False` otherwise. Additionally, we will write comprehensive unit tests to ensure the function behaves as expected under various conditions.

### Approach
1. **Check File Existence**: Use the `os.path.exists()` function to determine if the file exists. This function checks for the existence of the file in the current working directory and any relative paths.
2. **Check File Type**: Use the `os.path.isfile()` function to ensure that the file is a regular file and not a directory or a symbolic link.
3. **Unit Tests**: Write multiple test cases to cover different scenarios such as non-existent files, files in the current directory, files in subdirectories, and special directory cases.

### Solution Code
```python
import os

def is_file_exist(file_name):
    """
    Check whether file_name is an existing file.
    
    Args:
        file_name (str): The name of the file to check.
        
    Returns:
        bool: True if the file exists, False otherwise.
    """
    return os.path.isfile(file_name)
```

### Explanation
- **Function Implementation**: The function `is_file_exist` uses `os.path.isfile()` to check if the given file name is a regular file. This ensures that directories and symbolic links are not considered as valid files.
- **Unit Tests**: The test cases will cover scenarios such as checking for a non-existent file, a file in the current directory, a file in a subdirectory, and special directory cases like `.` and `..`. Each test case will call the function with the respective file name and assert the expected result.

### Test Cases
Here are the test cases that can be used to verify the correctness of the `is_file_exist` function:

```python
import unittest
import os

class TestFileExist(unittest.TestCase):
    def setUp(self):
        # Create some test files and directories
        self.test_file = "test_file.txt"
        self.test_dir = "test_dir"
        self symlink = "symlink.txt"
        self.current_dir = "."

        # Create file and directory
        with open(self.test_file, "w") as f:
            f.write("test content")
        os.mkdir(self.test_dir)
        os.symlink("-l", self.test_file, self.symlink)
        os.chmod(self.current_dir, 0o777)

    def test_is_file_exist_with_non_existent_file(self):
        self.assertFalse(is_file_exist("nonexistent.txt"))

    def test_is_file_exist_with_file_in_current_directory(self):
        self.assertTrue(is_file_exist("test_file.txt"))

    def test_is_file_exist_with_file_in_subdirectory(self):
        self.assertTrue(is_file_exist(os.path.join("test_dir", "test_file.txt")))

    def test_is_file_exist_with_symlink(self):
        self.assertTrue(is_file_exist(self.symlink))

    def test_is_file_exist_with_directory(self):
        self.assertFalse(is_file_exist("test_dir"))

    def test_is_file_exist_with_current_directory(self):
        self.assertTrue(is_file_exist('.'))

    def test_is_file_exist_with upwards_subdirectory(self):
        self.assertFalse(is_file_exist(".."))

if __name__ == "__main__":
    unittest.main()
```

This approach ensures that the function is both efficient and reliable, handling various edge cases and providing clear test coverage.