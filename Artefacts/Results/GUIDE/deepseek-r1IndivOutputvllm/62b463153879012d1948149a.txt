

To solve this problem, we need to create a function that groups files based on their corresponding XML filenames. The function will take three parameters: a list of source files, a list of XML filenames, and a list of all files. The goal is to return a dictionary where each key is an XML filename, and the value is a list of corresponding files.

### Approach
1. **Understand the Parameters**: The function will receive three parameters:
   - `source`: A list of files or directories.
   - `xmls`: A list of XML filenames.
   - `files`: A list of filenames to be grouped by their corresponding XMLs.

2. **Group Files by XML Filenames**: For each file in the `files` list, we will extract the base name (filename without extension) and check if it exists in the `xmls` list. If it does, we will add the file to the corresponding group in the dictionary.

3. **Handle File Extensions**: We will use the `os.path.splitext` function to remove the file extension when extracting the base name, ensuring that files with the same base name (regardless of extension) are grouped together.

4. **Return the Result**: The function will return a dictionary where each key is an XML filename, and the value is a list of corresponding files.

### Solution Code
```python
import os

def _group_files_by_xml_filename(source, xmls, files):
    """
    Groups files by their corresponding XML filenames and returns a dictionary.
    """
    file_groups = {}
    for file in files:
        file_base = os.path.splitext(file)[0]
        if file_base in xmls:
            if file_base not in file_groups:
                file_groups[file_base] = []
            file_groups[file_base].append(file)
    return file_groups
```

### Explanation
- **Initialization**: We start by initializing an empty dictionary `file_groups` to store the groups of files.
- **Iterate Over Files**: For each file in the `files` list, we extract the base name using `os.path.splitext(file)[0]`.
- **Check for XML Match**: If the base name exists in the `xmls` list, we add the file to the corresponding group in `file_groups`.
- **Build Groups**: If the base name is not already a key in `file_groups`, we create a new entry and initialize it with a list containing the current file. If it already exists, we append the current file to the list.
- **Return Groups**: Finally, we return the `file_groups` dictionary containing the grouped files.

This approach ensures that files are grouped by their corresponding XML filenames efficiently and correctly, handling both simple and complex cases as described in the problem statement.