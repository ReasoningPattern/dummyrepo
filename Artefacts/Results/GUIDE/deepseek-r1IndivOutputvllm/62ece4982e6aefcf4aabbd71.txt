

To solve this problem, we need to convert a dictionary where the keys are filenames containing wildcards into a dictionary where the keys are regex patterns. The goal is to replace the wildcard characters `*` and `?` in the filenames with their respective regex equivalents.

### Approach
1. **Problem Analysis**: The task is to transform each filename key in the dictionary into a regex pattern. The wildcards `*` and `?` in the filenames need to be converted into regex patterns that match any character or sequence of characters.
2. **Intuition**: In regex, `*` is a quantifier that matches zero or more characters, and `?` is a quantifier that matches zero or one occurrence of the preceding element. To convert these into regex patterns that match any single character, we need to escape them with a backslash. Thus, `*` becomes `\*` and `?` becomes `\?`.
3. **Algorithm**: Iterate through each key-value pair in the input dictionary. For each key, replace `*` with `\*` and `?` with `\?`. The values remain unchanged as they are not affected by this transformation.

### Solution Code
```python
def regex_dict(item):
    return {key.replace('*', r'\*').replace('?', r'\?'): value for key, value in item.items()}
```

### Explanation
- **Conversion of Wildcards**: The function iterates over each key in the input dictionary. For each key, it replaces `*` with `\*` and `?` with `\?` using the `replace` method. This ensures that the resulting keys are valid regex patterns.
- **Preservation of Values**: The values associated with each key remain unchanged as they are not affected by the wildcard transformations.
- **Efficiency**: The solution efficiently processes each key in the dictionary in linear time, making it suitable for large datasets.

This approach ensures that each filename key is correctly converted into a regex pattern, allowing for accurate matching of filenames using regex.