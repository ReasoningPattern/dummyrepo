

To solve this problem, we need to create a Python function that takes command-line arguments and returns an ArgumentParser instance. This function will be useful in parsing arguments for a script or program.

### Approach
The approach involves using Python's `argparse` module, which is designed to handle command-line argument parsing. The function `parse_arguments` will:
1. Create an instance of `ArgumentParser`.
2. Add each argument from the provided tuple (`*arguments`) to the parser.
3. Return the created parser instance.

The function will handle any number of arguments passed to it using `*arguments`. Each argument is added to the parser using the `add_argument` method. The parser is then returned, allowing the caller to parse the arguments using the `parse_args` method if needed.

### Solution Code
```python
import argparse

def parse_arguments(*arguments):
    """
    Given command-line arguments with which this script was invoked, parse the arguments and return them as an ArgumentParser instance.
    """
    parser = argparse.ArgumentParser()
    for arg in arguments:
        parser.add_argument(arg)
    return parser
```

### Explanation
- **Importing argparse**: The `argparse` module is imported to utilize its classes and functions for command-line argument parsing.
- **Creating the parser**: An instance of `ArgumentParser` is created inside the function to handle the parsing logic.
- **Adding arguments**: Each argument from the `*arguments` tuple is added to the parser. This allows the parser to recognize and process these arguments.
- **Returning the parser**: The function returns the created parser instance, which can be used by the caller to parse the actual command-line arguments.

This approach ensures that the function is flexible and can handle any number of command-line arguments, making it a robust solution for parsing arguments in a script.