

To solve this problem, we need to create a function called `directlyProvidedBy` that returns the interfaces directly provided by a given object. The function should use a test-driven development (TDD) approach, first generating comprehensive unit tests before writing the actual code.

### Approach
The function's goal is to identify all interfaces directly provided by the given object. To achieve this, we will use the `inspect` module to examine the object's class and its attributes. Specifically, we will look for attributes that are interfaces and are instances of `IdDeclaration`.

1. **Import Necessary Modules**: We will use the `inspect` module to get attributes of the object's class and `zope.interface` to check for interfaces.
2. **Iterate Over Class Attributes**: For each attribute of the object's class, we check if it is an interface.
3. **Check for Interfaces**: Using `inspect.isInterface`, we determine if the attribute is an interface and if it is an instance of `IdDeclaration`.
4. **Collect Interfaces**: Gather all such interfaces and return them as a list.

### Solution Code
```python
import inspect
from zope.interface import IDeclaration

def directlyProvidedBy(object):
    interfaces = []
    obj_cls = type(object)
    for attr in inspect.getmembers(obj_cls, lambda o: o[1] is not o.__name__):
        value = getattr(obj_cls, attr[0])
        if inspect.isInterface(value) and isinstance(value, IDeclaration):
            interfaces.append(value)
    return interfaces
```

### Explanation
- **Import Modules**: We import `inspect` for attribute inspection and `IdDeclaration` from `zope.interface` to check if an object is an interface.
- **Get Object Class**: We determine the class of the given object using `type(object)`.
- **Inspect Class Attributes**: Using `inspect.getmembers`, we iterate over each attribute of the class. The lambda function filters out attributes that are either built-in or methods.
- **Check for Interfaces**: For each attribute, we check if it is an interface and an instance of `IdDeclaration`.
- **Collect and Return Interfaces**: We collect all valid interfaces and return them as a list.

This approach ensures that we accurately identify all interfaces provided by the object's class, including those inherited from parent classes, while excluding built-in types and methods.