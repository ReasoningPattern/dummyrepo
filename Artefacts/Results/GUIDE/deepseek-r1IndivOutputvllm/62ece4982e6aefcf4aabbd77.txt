

To solve this problem, we need to create a function that parses a frequency string into a `datetime.timedelta` object. The function should handle specific cases where the frequency is `None` or "always" by returning `None`, and it should raise a `ValueError` for invalid inputs.

### Approach
1. **Handle Special Cases**: If the input frequency is `None` or exactly "always", the function should return `None`.
2. **Split the Input String**: The frequency string is expected to be in the format "number unit". Splitting the string into two parts allows us to extract the number and the unit separately.
3. **Validate the Number**: The number part should be a valid integer. If it is not, a `ValueError` is raised.
4. **Normalize the Unit**: Convert the unit part to lowercase to handle case insensitivity.
5. **Check Valid Units**: Ensure the extracted unit is valid by checking against a predefined list of valid units for `datetime.timedelta`.
6. **Construct the Timedelta**: If the unit is valid, construct a `datetime.timedelta` object using the extracted number and the corresponding unit parameter.

### Solution Code
```python
import datetime

def parse_frequency(frequency):
    if frequency is None:
        return None
    if frequency == "always":
        return None

    parts = frequency.split()
    if len(parts) != 2:
        raise ValueError("Invalid frequency string")
    
    try:
        number = int(parts[0])
    except ValueError:
        raise ValueError("Number part is not an integer")
    
    unit = parts[1].lower()

    valid_units = {
        'second': 'seconds',
        'minute': 'minutes',
        'hour': 'hours',
        'day': 'day',
        'week': 'weeks',
        'year': 'years',
        'month': 'months',
        'fortnight': 'fortnights',
        'businessday': 'businessdays',
        'customday': 'customdays',
        'nanosecond': 'nanoseconds',
        'microsecond': 'microseconds',
        'millisecond': 'milliseconds',
    }

    if unit not in valid_units:
        raise ValueError(f"Invalid unit: {unit}")

    param_name = valid_units[unit]
    return datetime.timedelta(**{param_name: number})
```

### Explanation
- **Special Cases Handling**: The function immediately returns `None` if the input is `None` or exactly "always".
- **String Splitting**: The input string is split into two parts using the `split()` method. If the resulting list does not have exactly two elements, a `ValueError` is raised.
- **Number Validation**: The first part of the split string is attempted to be converted into an integer. If this conversion fails, a `ValueError` is raised.
- **Unit Normalization and Validation**: The second part of the string is converted to lowercase to ensure case insensitivity. The function checks if this unit is valid by looking it up in a predefined dictionary of valid units.
- **Timedelta Construction**: If the unit is valid, the function constructs a `datetime.timedelta` object using the appropriate keyword argument based on the valid unit.

This approach ensures that the function correctly handles valid inputs, raises appropriate errors for invalid inputs, and efficiently constructs the required `timedelta` object.