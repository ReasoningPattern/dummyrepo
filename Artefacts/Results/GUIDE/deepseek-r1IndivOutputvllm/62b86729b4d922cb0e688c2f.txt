

To solve this problem, we need to create a Python function called `base_config` that generates a configuration dictionary with specific keys based on the provided parameters. The function should handle both required and optional parameters and return a dictionary containing the configuration settings.

### Approach
1. **Function Signature**: The function `base_config` takes three parameters: `user`, `etcd_host`, and `etcd_port`. The `user` parameter is required, while `etcd_host` and `etcd_port` have default values provided.
2. **Configuration Dictionary**: The function constructs a dictionary that includes several keys specified in the docstring: "tls", "authentication", "authorization", "etcd", "docs", and "log". Each of these keys will have a placeholder value (None) except for the "etcd" key, which will be a dictionary containing the provided `etcd_host` and `etcd_port` values.
3. **Return Value**: The function returns the constructed dictionary containing all the configuration settings.

### Solution Code
```python
def base_config(user, etcd_host="localhost", etcd_port=2379):
    """
    Creates a configuration with some simple parameters.
    
    Args:
        user (str): The user identifier.
        etcd_host (str): The host for the ETCD server, defaults to "localhost".
        etcd_port (int): The port for the ETCD server, defaults to 2379.
        
    Returns:
        dict: A dictionary containing the configuration settings.
    """
    config = {
        "user": user,
        "tls": None,
        "authentication": None,
        "authorization": None,
        "etcd": {
            "host": etcd_host,
            "port": etcd_port
        },
        "docs": None,
        "log": None
    }
    return config
```

### Explanation
- **Function Parameters**: The function accepts `user`, which is a required string parameter, and `etcd_host` and `etcd_port`, which have default values if not provided.
- **Configuration Dictionary**: The dictionary includes all specified keys. The "etcd" key is a nested dictionary containing "host" and "port" keys, which are populated with the provided `etcd_host` and `etcd_port` values.
- **Return Statement**: The function returns the constructed dictionary, which contains the base configuration settings.

This approach ensures that the function is flexible, handles both required and optional parameters, and constructs a comprehensive configuration dictionary as specified.