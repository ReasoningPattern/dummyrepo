

To implement the `_get_conditionally_required_args` method, we'll follow a test-driven development approach. First, we'll outline comprehensive unit tests to ensure the method works as expected, then implement the method based on those tests.

### Unit Tests

1. **Test Case 1: Basic Functionality**
   - **Objective**: Verify the method correctly identifies conditionally required arguments.
   - **Setup**: Command name "example", options with required flags, and arguments.
   - **Expected Outcome**: Returns list of required arguments.

2. **Test Case 2: Condition Not Met**
   - **Objective**: Ensure the method returns no arguments when the condition isn't met.
   - **Setup**: Command name "example", options with flags, arguments not triggering the condition.
   - **Expected Outcome**: Returns empty list.

3. **Test Case 3: Mixed Conditions**
   - **Objective**: Check handling of multiple conditions (some met, some not).
   - **Setup**: Command name "example", options with flags, arguments triggering some conditions.
   - **Expected Outcome**: Returns list of arguments where conditions are met.

4. **Test Case 4: No Required Arguments**
   - **Objective**: Verify the method handles cases with no required arguments.
   - **Setup**: Command name "example", options without required flags.
   - **Expected Outcome**: Returns empty list.

### Python Code

```python
def _get_conditionally_required_args(self, command_name, options_spec, args):
    """
    List arguments with ``required_when`` condition matched.

    :param command_name: the command name.
    :param options_spec:  the list of command spec options.
    :param args: the received input arguments
    :return: list, list of argument names with matched ``required_when`` condition
    """
    required_args = []
    for option in options_spec:
        # Assuming 'required' is a boolean attribute of the option
        if hasattr(option, 'required') and option.required:
            required_args.append(option.name)
    return required_args
```

This implementation iterates over each command specification option, checks if the option is required, and collects the names of options that meet the condition. The method assumes each option has a boolean attribute indicating if it's required.