

To solve this problem, we need to create a function that validates the length of the arguments passed to it. The function should check if the length of the arguments does not exceed a specified maximum length. If the length is exceeded, the function should raise a `ValueError`.

### Approach
1. **Function Signature**: The function will take three parameters: `self`, `args`, and an optional `length` with a default value of 0. This default value ensures that if no length is specified, the function will validate that the arguments are not longer than zero characters.
2. **Validation Logic**: The function will check if the length of `args` exceeds the specified `length`. If it does, a `ValueError` will be raised with an appropriate message.
3. **Test Cases**: To ensure the function works correctly, we will write several test cases covering different scenarios:
   - Valid arguments when length is 0
   - Valid arguments when length is greater than 0
   - Invalid arguments when length is 0
   - Invalid arguments when length is negative
   - Valid arguments when `args` is a list

### Solution Code
```python
def validate_length_args(self, args, length=0):
    """
    Check if the length of the given arguments is not longer than the specified length.
    
    :param self: The instance of the class.
    :param args: The arguments to validate.
    :param length: The maximum allowed length. Defaults to 0.
    :raises ValueError: If the length of args exceeds the specified maximum.
    """
    if len(args) > length:
        raise ValueError(f"Argument length {len(args)} exceeds maximum allowed length {length}")
    return None

def test_validate_length_args():
    import pytest
    from unittest.mock import patch

    @patch('validate_length_args')
    def test_validate_length_args_when_length_is_zero(mock_validate):
        args = "test"
        mock_validate.return_value = None
        validate_length_args(self=object(), args=args, length=0)
        assert mock_validate.call_count == 1

    @patch('validate_length_args')
    def test_validate_length_args_when_length_is_greater_than_length(mock_validate):
        args = "test"
        mock_validate.return_value = None
        validate_length_args(self=object(), args=args, length=4)
        assert mock_validate.call_count == 1

    @patch('validate_length_args')
    def test_validate_length_args_when_length_is_less_than_length(mock_validate):
        args = "test"
        mock_validate.return_value = None
        with pytest.raises(ValueError) as exc_info:
            validate_length_args(self=object(), args=args, length=3)
        assert "Argument length 4 exceeds maximum allowed length 3" in str(exc_info.value)

    @patch('validate_length_args')
    def test_validate_length_args_when_length_is_negative(mock_validate):
        args = "test"
        mock_validate.return_value = None
        with pytest.raises(ValueError) as exc_info:
            validate_length_args(self=object(), args=args, length=-1)
        assert "Argument length 4 exceeds maximum allowed length -1" in str(exc_info.value)

    @patch('validate_length_args')
    def test_validate_length_args_when_args_is_list(mock_validate):
        args = [1, 2, 3]
        mock_validate.return_value = None
        validate_length_args(self=object(), args=args, length=3)
        assert mock_validate.call_count == 1

    pytest.main()
```

### Explanation
- **Function Definition**: The function `validate_length_args` takes three parameters: `self`, `args`, and an optional `length` (defaulting to 0).
- **Validation Logic**: The function checks if the length of `args` exceeds the specified `length`. If it does, it raises a `ValueError`.
- **Test Cases**: The test function `test_validate_length_args` uses pytest to verify the correctness of the `validate_length_args` function. It tests various scenarios including valid arguments, invalid arguments, negative lengths, and when `args` is a list.