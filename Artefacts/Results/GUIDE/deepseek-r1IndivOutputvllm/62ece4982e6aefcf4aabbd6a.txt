

To solve this problem, we need to create a function that replaces all occurrences of the dot character ('.') in a given string with a specified replacement string. The function should handle various edge cases, including replacing dots with empty strings or multi-character strings.

### Approach
The approach to solve this problem is straightforward and leverages Python's built-in string method `str.replace()`. This method efficiently replaces all occurrences of a specified substring within a string. Hereâ€™s a detailed breakdown of the approach:

1. **Problem Analysis**: We need to replace every '.' in the input string with a given replacement string. The replacement string can be of any length, including zero or multiple characters.
2. **Intuition**: The `str.replace(old, new)` method is well-suited for this task as it replaces all occurrences of `old` with `new` in the string. This method handles all edge cases, such as replacing '.' with an empty string (which effectively removes the dots) or a multi-character string.
3. **Algorithm Selection**: Using the built-in `str.replace()` method ensures that our solution is efficient and concise. It abstracts the complexity of iterating through the string and replacing each dot individually.
4. **Edge Cases**: The solution handles cases where the input string is empty, the replacement string is empty, and the input string contains consecutive dots.

### Solution Code

```python
def replace_dots(value, arg):
    """
    Replaces all values of '.' to arg from the given string
    Args:
        value: old string
        arg: new string to replace '.'
    Returns:
        str, the replaced string
    """
    return value.replace('.', arg)
```

### Explanation
- **Function Definition**: The function `replace_dots` takes two parameters: `value` (the input string) and `arg` (the string to replace each '.' with).
- **String Replacement**: The function uses `value.replace('.', arg)` to replace all occurrences of '.' in `value` with `arg`. The `str.replace()` method efficiently handles all replacements in a single operation.
- **Return Value**: The modified string with all dots replaced is returned.

This approach ensures that the function is both efficient and easy to understand, leveraging Python's built-in capabilities to handle string manipulation succinctly.