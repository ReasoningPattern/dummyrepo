

To solve this problem, we need to create a function that retrieves the name and description of each class attribute. The function should return these attributes in a specific format based on a boolean parameter `all`, which determines whether to include all attributes or only those with descriptions.

### Approach
1. **Problem Analysis**: The function `namesAndDescriptions` is an instance method that should return the name and description of each class attribute. If the parameter `all` is `False`, it should return only those attributes that have a description. If `all` is `True`, it should return all attributes, including those without a description.
2. **Intuition**: By iterating over the class's `__dict__` attribute, we can access each attribute's name and description. Using the `getattr` function allows us to handle cases where an attribute might not have a description by providing a default value.
3. **Algorithm**:
   - Iterate over each attribute in the class.
   - For each attribute, check if it has a description.
   - Depending on the value of `all`, include the attribute in the result list.
4. **Edge Cases**: Consider cases where the class has no attributes, attributes with descriptions, and attributes without descriptions.

### Solution Code
```python
def namesAndDescriptions(self, all=False):
    """
    Returns the name and description of the current class attribute.
    
    Args:
        all (bool): If True, returns all attributes; if False, returns only those with descriptions.
    
    Returns:
        list: A list of tuples containing (name, description) for each attribute.
    """
    attrs = []
    for name in self.__class__.__dict__:
        attr = self.__class__.__dict__[name]
        description = getattr(attr, 'description', None)
        if all:
            attrs.append((name, description))
        else:
            if description is not None:
                attrs.append((name, description))
    return attrs
```

### Explanation
- **Iteration over Class Attributes**: The function iterates over each attribute in the class using `self.__class__.__dict__`.
- **Description Handling**: For each attribute, it checks if the attribute has a 'description' using `getattr` with a default value of `None`.
- **Condition Check**: Depending on the `all` parameter, the function either includes all attributes or only those with descriptions.
- **Result Construction**: The function constructs a list of tuples, where each tuple contains the attribute name and its description (or `None` if no description exists).

This approach ensures that the function behaves correctly for both cases of the `all` parameter and handles edge cases efficiently.