

To solve this problem, we need to create a Python class method that retrieves an Ansible service configuration manager based on a specified service name. The method should be designed using a test-driven development approach, ensuring comprehensive unit tests are written before implementing the actual logic.

### Approach
1. **Problem Analysis**: The task is to create a class method that fetches the Ansible Config Manager service. The method should accept a service name, with a default value provided in the docstring.
2. **Intuition**: Utilize the existing `_get_service()` method which likely handles service retrieval based on the provided name. The class method will accept the service name as a parameter with a default value.
3. **Design**: Implement the method with the following:
   - Class method decorator `@classmethod`
   - Accept a `service_name` parameter with a default value
   - Return the service obtained from `_get_service()`

### Solution Code

```python
from unittest import TestCase

class AnsibleServiceManager(TestCase):
    def test_ansible_config_manager(self):
        """Test for ansible_config_manager method."""
        config_manager = self.ansible_config_manager()
        self.assertIsInstance(config_manager, object)
        self.assertEqual(config_manager.__class__.__name__, "ansible_config_manager")
        
    def ansible_config_manager(self, service_name='ServiceName.ANSIBLE_CONFIG_MANAGER'):
        """
        Gets the ansible config manager via ServiceName.ANSIBLE_CONFIG_MANAGER in _get_service()
        """
        return self._get_service(service_name)

@classmethod
def ansible_config_manager(cls, service_name='ServiceName.ANSIBLE_CONFIG_MANAGER'):
    """
    Gets the ansible config manager via ServiceName.ANSIBLE_CONFIG_MANAGER in cls._get_service()
    """
    return cls._get_service(service_name)
```

### Explanation
- **Class Method**: The method `ansible_config_manager` is decorated with `@classmethod`, making it a class method.
- **Parameters**: The method accepts a `service_name` parameter with a default value of `'ServiceName.ANSIBLE_CONFIG_MANAGER'`.
- **Docstring**: The docstring explains the purpose of the method, referencing the provided documentation.
- **Test Cases**: A test class `AnsibleServiceManager` is included with a test method `test_ansible_config_manager` to verify the method's functionality.

This approach ensures that the method is robust, well-documented, and tested before implementation.