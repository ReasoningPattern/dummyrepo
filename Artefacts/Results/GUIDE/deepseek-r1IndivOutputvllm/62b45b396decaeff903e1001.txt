

To solve this problem, we need to create a function that modifies the parameters related to specific Bugzilla bugs based on a list of bug IDs. The function will take a dictionary of parameters and a list of bug IDs, and it will remove or update the parameters for the specified bugs.

### Approach
1. **Problem Analysis**: The function needs to update or remove parameters for specific bugs. The parameters are stored in a dictionary where each key is a bug ID, and the value is another dictionary containing Bugzilla-specific parameters.
2. **Intuition**: By iterating over each bug ID in the provided list, we can check if the bug ID exists in the parameters dictionary. If it does, we remove the bug ID from the dictionary to effectively remove its parameters.
3. **Algorithm**:
   - Iterate over each bug ID in the `bug_ids` list.
   - For each bug ID, check if it exists in the `params` dictionary.
   - If it exists, remove the key from the dictionary to remove the associated parameters.
   - Handle cases where the bug ID does not exist by logging an error message.
4. **Complexity**: The time complexity is O(n), where n is the number of bug IDs, as we iterate through each ID once. The space complexity is O(m), where m is the total number of parameters, as we may remove multiple parameters based on the bug IDs.

### Solution Code

```python
def amend_bzparams(self, params, bug_ids):
    """
    Amend the Bugzilla params by removing parameters for specified bug IDs.

    Args:
        params (dict): Dictionary of Bugzilla parameters where keys are bug IDs.
        bug_ids (list): List of bug IDs to remove parameters for.

    Raises:
        ValueError: If a bug ID is not a string or if it's an invalid ID.
    """
    for bug_id in bug_ids:
        if not isinstance(bug_id, str):
            raise ValueError(f"Invalid bug ID type: {type(bug_id)}")
        if bug_id in params:
            del params[bug_id]
        else:
            logger.error(f"Bug ID {bug_id} not found in parameters")
    return

# Example usage:
# params = {
#     "bz123": {"status": "critical", "severity": "block"},
#     "bz456": {"status": "normal", "severity": "info"},
#     "bz789": {"status": "major", "severity": "critical"}
# }
# bug_ids = ["bz123", "bz456"]
# amend_bzparams(params, bug_ids)
```

### Explanation
- **Function Definition**: The function `amend_bzparams` takes two parameters: `params` (a dictionary of Bugzilla parameters) and `bug_ids` (a list of bug IDs).
- **Iteration and Validation**: For each bug ID, it first checks if the ID is a string. If not, it raises a `ValueError`.
- **Parameter Removal**: If the bug ID exists in the `params` dictionary, it is removed. If not, an error message is logged.
- **Return**: The function returns the modified `params` dictionary with the specified bug IDs and their parameters removed.

This approach ensures that we efficiently remove parameters for the specified bugs while handling invalid inputs gracefully.