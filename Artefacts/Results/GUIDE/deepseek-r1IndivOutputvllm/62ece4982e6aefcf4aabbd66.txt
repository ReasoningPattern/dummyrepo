

To solve this problem, we need to determine if a given file or directory has already been processed. This is crucial in scenarios where we want to avoid redundant processing, such as preventing infinite recursion in directory traversal. The function should handle both absolute and relative paths and provide a verbose output for debugging purposes.

### Approach
1. **Convert Path to Absolute**: Use `os.path.abspath()` to convert the given path to its absolute form. This ensures consistency across different operating systems.
2. **Check Against Processed Set**: After converting the path to an absolute path, check if it exists in the provided set of processed paths.
3. **Handle Non-Existing Paths**: If the converted path does not exist, simply return `False` without adding it to the processed set.
4. **Verbose Output**: If the verbose flag is set, provide a warning message when a path is found to already be processed.
5. **Update Processed Set**: If the path is not already processed, add it to the set and return `False`.

### Solution Code
```python
import os
import warnings

def was_processed(processed, path_name, verbose):
    """
    Check if a file or directory has already been processed.

    Args:
        processed: Set to store processed pathnames
        path_name: Path to a directory or file
        verbose: True if verbose output is requested

    Returns:
        True if it's already in the set. False if not.
    """
    try:
        abs_path = os.path.abspath(path_name)
    except OSError:
        return False
    
    if abs_path in processed:
        if verbose:
            warnings.warn(f"Skipping {abs_path} (already processed)", UserWarning)
        return True
    else:
        processed.add(abs_path)
        return False
```

### Explanation
- **Conversion to Absolute Path**: The function first converts the given path to an absolute path using `os.path.abspath()`. This ensures that the path is consistent and can be checked against the processed set.
- **Handling Non-Existing Paths**: If the path does not exist (e.g., a typo or incorrect path), the function catches the `OSError` and returns `False` immediately.
- **Set Operations**: The function uses a set to track processed paths for efficient membership testing. If the path is found in the set, it returns `True` and issues a warning if verbose is enabled. Otherwise, it adds the path to the set and returns `False`.

This approach ensures that the function efficiently checks for processed paths while handling edge cases such as non-existing paths and providing informative output for debugging purposes.