

To solve this problem, we need to generate a Python function that converts any unicode strings passed to a given function into bytes strings, specifically for Python 2 compatibility. This ensures that any unicode output from the function is correctly converted to a byte string, which is the standard in Python 2.

### Approach
The approach involves the following steps:

1. **Function Signature Inspection**: Use the `inspect` module to get the signature of the function we need to modify. This helps in understanding the parameters and their types.
2. **Argument Processing**: For each argument passed to the function, check if it is a unicode string. If it is, convert it to a byte string using the 'r' encoding, which is compatible with ASCII characters.
3. **Keyword Arguments Handling**: Similarly, process keyword arguments to ensure any unicode strings are converted to bytes.
4. **Function Wrapper**: Create a wrapper function that processes the arguments, converts unicode strings to bytes, and then calls the original function with these modified arguments.
5. **Return Value Handling**: After calling the original function, check if the result is a unicode string and convert it to bytes if necessary.

This approach ensures that all unicode strings passed to or returned from the function are correctly converted to bytes, making the function compatible with Python 2's expectations.

### Solution Code
```python
import inspect
import functools

def tzname_in_python2(namefunc):
    """
    Convert unicode output to bytes in Python 2.
    """
    @functools.wraps(namefunc)
    def wrapper(*args, **kwargs):
        modified_args = []
        for arg in args:
            if isinstance(arg, unicode):
                modified_args.append(arg.encode('r'))
            else:
                modified_args.append(arg)
        modified_kwargs = {}
        for key, value in kwargs.items():
            if isinstance(value, unicode):
                modified_kwargs[key] = value.encode('r')
            else:
                modified_kwargs[key] = value
        result = namefunc(*modified_args, **modified_kwargs)
        if isinstance(result, unicode):
            result = result.encode('r')
        return result
    return wrapper
```

### Explanation
- **Function Signature Inspection**: The `inspect.getfullargspec` is used to get the parameters of the function. However, in the provided solution, we directly process the arguments without explicitly inspecting the function's signature, making the solution more straightforward.
- **Argument Processing**: The wrapper function iterates over each positional argument and keyword argument. If an argument is a unicode string, it is converted to a byte string using 'r' encoding.
- **Keyword Arguments Handling**: Similarly, each keyword argument is checked and converted if it is a unicode string.
- **Function Wrapper**: The wrapper function ensures that the original function is called with the processed arguments. After the function call, the result is checked and converted if it is a unicode string.

This solution effectively ensures that any unicode strings are converted to bytes, making the function compatible with Python 2's requirements.