

To implement the `_get_err_indices` function and create comprehensive unit tests, follow this approach:

### Solution Code

```python
import unittest
from unittest.mock import Mock, patch

class TestGetErrorIndices(unittest.TestCase):
    @patch('self.errors', return_value=[])
    def test_get_err_indices_no_errors(self, mock_self_errors):
        result = self._get_err_indices("test_coord")
        self.assertEqual(result, [])

    @patch('self.errors', return_value=[{"coord_name": "test_coord", "indices": [0, 1]}])
    def test_get_err_indices_multiple_errors(self, mock_self_errors):
        result = self._get_err_indices("test_coord")
        self.assertEqual(result, [0, 1])

    @patch('self.errors', return_value=[{"coord_name": "nonexistent", "indices": [0, 1]}])
    def test_get_err_indices_nonexistent_coord(self, mock_self_errors):
        result = self._get_err_indices("test_coord")
        self.assertEqual(result, [])

    @patch('self.errors', return_value=[{"coord_name": None, "indices": [0, 1]}])
    def test_get_err_indices_none_coord_name(self, mock_self_errors):
        result = self._get_err_indices("test_coord")
        self.assertEqual(result, [])

    @patch('self.errors', return_value=[{"coord_name": "test_coord", "indices": [2]}])
    def test_get_err_indices_single_error(self, mock_self_errors):
        result = self._get_err_indices("test_coord")
        self.assertEqual(result, [2])

    def _get_err_indices(self, coord_name):
        """
        Find all error indexes corresponding to coord_name.
        """
        indices = []
        for error in self.errors:
            if 'coord_name' in error and error['coord_name'] == coord_name:
                indices.extend(error['indices'])
        return indices
```

### Explanation

1. **Function Implementation**:
   - The `_get_err_indices` function iterates through each error in `self.errors`.
   - For each error, it checks if the 'coord_name' key exists and matches the provided `coord_name`.
   - If a match is found, the corresponding indices are collected and returned as a list.

2. **Unit Tests**:
   - **Test Cases**:
     - Test with no errors.
     - Test with multiple errors, ensuring all matching indices are returned.
     - Test with a coord_name that doesn't exist.
     - Test with a coord_name where the coordinate name is None.
     - Test with a single error.
   - **Mocking**: The tests use mocking to isolate the function's behavior and verify its correctness under different scenarios.

This approach ensures that the function behaves as expected and handles various edge cases robustly.