

To solve this problem, we need to create a function that returns a dictionary containing items from the first dictionary that are not present in the second dictionary at a specified level. This function should handle nested dictionaries and allow for a specified level of depth.

### Approach
The approach involves using a helper function to recursively check each level of the dictionaries. The main function will iterate over each key-value pair in the first dictionary and use the helper function to determine if the key exists at the specified level in the second dictionary. If the key does not exist at the specified level, the item is included in the result.

1. **Helper Function**: The helper function `is_in` is used to check if a key exists at a given level in a dictionary. It recursively checks each level, considering nested dictionaries.
2. **Level Handling**: The level parameter is treated as a non-negative integer. If the level is negative, it is converted to 0, meaning the top-level check.
3. **Recursive Check**: For each key-value pair, the helper function checks if the value is a dictionary. If it is, the function proceeds to the next level. If it is not, the key is considered not present at the current level.

### Solution Code
```python
def difference(d1, d2, level=-1):
    def is_in(d, key, level):
        if level < 0:
            level = 0
        if not isinstance(d, dict):
            return False
        if level == 0:
            return key in d
        else:
            current_value = d.get(key)
            if isinstance(current_value, dict):
                return is_in(current_value, key, level - 1)
            else:
                return False

    result = {}
    for key, value in d1.items():
        if not is_in(d2, key, level):
            result[key] = value
    return result
```

### Explanation
1. **Helper Function `is_in`**:
   - Converts any negative level to 0.
   - Checks if the current value is a dictionary. If not, returns False.
   - For level 0, checks if the key exists in the dictionary.
   - For levels greater than 0, recursively checks the next level in nested dictionaries.

2. **Main Function `difference`**:
   - Iterates over each key-value pair in the first dictionary.
   - Uses the helper function to check if the key exists at the specified level in the second dictionary.
   - If the key does not exist at the specified level, the item is added to the result dictionary.

This approach ensures that the function correctly handles both top-level and nested dictionary checks, providing the desired output efficiently.