

To solve this problem, we need to validate both keys and values in a dictionary using two separate validation functions. The function should return `None` if no validation is needed, and raise a `ValueError` if any validation fails.

### Approach
1. **Problem Analysis**: The task is to ensure that both keys and values in a given dictionary adhere to specific validation criteria implemented in `validate_key()` and `validate_value()` functions respectively.
2. **Test-Driven Development**: We will first write comprehensive unit tests to cover various scenarios including valid cases, invalid cases, edge cases (like empty dictionary or `None`), and special cases (like `None` values or keys).
3. **Handling Edge Cases**: The function should handle cases where the input is `None`, an empty dictionary, or contains `None` values appropriately.
4. **Validation Loop**: Iterate over each key-value pair in the dictionary and apply the respective validation functions. If any validation fails, raise a `ValueError` with an appropriate message.

### Solution Code

```python
from validators import validate_key, validate_value

def _validate_labels(labels):
    """
    Check that keys and values in the given labels by validate_key() and validate_value().
    """
    if labels is None:
        return None
    
    for key, value in labels.items():
        if not validate_key(key):
            raise ValueError(f"Invalid key '{key}'.")
        if not validate_value(value):
            raise ValueError(f"Invalid value '{value}'.")
    
    return None

def test_validate_labels():
    import pytest

    # Test case 1: Valid labels
    valid_labels = {'a': 1, 'b': 2}
    _validate_labels(valid_labels)
    
    # Test case 2: Key validation fails
    invalid_key_labels = {'invalid_key': 1}
    with pytest.raises(ValueError):
        _validate_labels(invalid_key_labels)
    
    # Test case 3: Value validation fails
    valid_value_labels = {'a': 0}
    with pytest.raises(ValueError):
        _validate_labels(valid_value_labels)
    
    # Test case 4: Empty labels
    empty_labels = {}
    _validate_labels(empty_labels)
    
    # Test case 5: None input
    _validate_labels(None)
    
    # Test case 6: Key is None
    invalid_key_none = {None: 1}
    with pytest.raises(ValueError):
        _validate_labels(invalid_key_none)
    
    # Test case 7: Value is None
    invalid_value_none = {1: None}
    with pytest.raises(ValueError):
        _validate_labels(invalid_value_none)
```

### Explanation
- **Function Structure**: The function `_validate_labels` first checks if the input is `None` and returns `None` immediately. It then iterates over each key-value pair in the dictionary, applying `validate_key()` to each key and `validate_value()` to each value. If any validation fails, it raises a `ValueError` with a descriptive message.
- **Testing**: The `test_validate_labels` function uses `pytest` to define various test cases:
  - Valid labels: Checks if the function accepts valid keys and values.
  - Key validation fails: Tests if a key fails validation.
  - Value validation fails: Tests if a value fails validation.
  - Empty labels: Ensures the function handles empty dictionaries gracefully.
  - None input: Verifies the function handles `None` input correctly.
  - Key is None: Checks validation when a key is `None`.
  - Value is None: Checks validation when a value is `None`.

This approach ensures that all edge cases are covered and the function behaves correctly under various input conditions.