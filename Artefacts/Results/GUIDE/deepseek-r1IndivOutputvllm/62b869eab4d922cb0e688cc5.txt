

To solve this problem, we need to write a Python function that updates a partial `last_applied_manifest` dictionary based on the values from a Kubernetes response. The function should iterate over a given `observer_schema` and update the `last_applied_manifest` for each observed field. If a field is not present in the response, it should be initialized with `None`.

### Approach
The function `update_last_applied_manifest_from_resp` takes three parameters:
1. `last_applied_manifest`: A dictionary representing the current state of the manifest that needs to be updated.
2. `observer_schema`: A dictionary specifying the observed fields that should be included in the manifest.
3. `response`: A dictionary containing the values from the Kubernetes API response.

The function iterates over each key in `observer_schema`. For each key, it checks if the key exists in the `response`:
- If the key is present, it updates `last_applied_manifest` with the value from the `response`.
- If the key is not present, it initializes the key in `last_applied_manifest` with `None`.

This approach ensures that all observed fields are included in the manifest, either with their response values or initialized to `None` if not found.

### Solution Code
```python
def update_last_applied_manifest_from_resp(
    last_applied_manifest, observer_schema, response
):
    for key in observer_schema:
        if key in response:
            last_applied_manifest[key] = response[key]
        else:
            last_applied_manifest[key] = None
    return last_applied_manifest
```

### Explanation
- The function iterates through each key in `observer_schema`.
- For each key, it checks if the key exists in the `response` dictionary.
- If the key is found in the `response`, the value from the `response` is assigned to `last_applied_manifest` for that key.
- If the key is not found in the `response`, it is added to `last_applied_manifest` with a value of `None`.
- The function returns the updated `last_applied_manifest` after processing all keys in `observer_schema`.

This solution ensures that all observed fields are included in the manifest, providing a robust way to update partial manifests based on Kubernetes API responses.