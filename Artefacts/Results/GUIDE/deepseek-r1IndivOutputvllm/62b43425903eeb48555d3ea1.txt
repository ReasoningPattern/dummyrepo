

To create a function that generates a regular expression pattern for matching keyword arguments in the in-style format (e.g., `key=in_value`), we'll follow a test-driven development approach. 

### Approach
1. **Understand the Use Case**: The function is likely part of a formatters class, used for parsing keyword arguments in string formatting (e.g., f-strings).
2. **Define the Pattern**: The in-style parameter format is `key=in_value`. We need a regex that captures the key and value.
3. **Regex Construction**: Use a regex pattern to match word characters for both key and value, ensuring it's specific to the in-style format.
4. **Compile the Pattern**: Return a compiled regex pattern for efficient matching.

### Solution Code
```python
import re

class Formatters:
    def _create_in_regex(self) -> re.Pattern:
        """
        Create the in-style parameter regular expression.

        Returns the in-style parameter regular expression (:class:`re.Pattern`).
        """
        pattern = r'(\w+)=in(\w+)'
        return re.compile(pattern)
```

### Explanation
- **Regex Pattern**: `r'(\w+)=in(\w+)'` matches sequences of word characters (`\w+`) before and after the `=in` keyword. This ensures it captures the key-value pairs in the in-style format.
- **Functionality**: The function returns a compiled regex pattern, ready for matching keyword arguments in string formatting contexts.
- **Test-Driven Development**: By defining the pattern within the function, we ensure it meets the specified requirements before use.