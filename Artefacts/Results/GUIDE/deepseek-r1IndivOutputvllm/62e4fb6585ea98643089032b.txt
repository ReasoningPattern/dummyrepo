

To solve this problem, we need to create a function that converts a version string into a tuple of integers. The version string is composed of numbers separated by dots, and our task is to split this string and convert each part into an integer.

### Approach
1. **Splitting the String**: The first step is to split the input string by the dot ('.') character. This will give us a list of strings, each representing a part of the version number.
2. **Handling Edge Cases**: If the input string is empty or contains only dots, the resulting list from the split operation will be empty. In such cases, we should return an empty tuple.
3. **Converting to Integers**: Each element in the list obtained from splitting the string is converted to an integer. This is done using a list comprehension that iterates over each part of the split string.
4. **Returning the Result**: The converted list of integers is then returned as a tuple.

This approach ensures that we handle all valid version strings correctly, including edge cases where the input might be empty or contain only dots.

### Solution Code
```python
def parse_version(s: str) -> tuple[int, ...]:
    parts = s.split('.')
    if not parts:
        return ()
    return tuple(int(part) for part in parts)
```

### Explanation
- **Splitting the String**: The `split('.')` method is used to break the input string into a list of substrings based on the dot separator.
- **Handling Edge Cases**: If the resulting list is empty (which happens when the input string is empty or consists only of dots), the function returns an empty tuple.
- **Converting to Integers**: Using a list comprehension, each substring is converted to an integer. This is efficient and concise.
- **Returning the Result**: The list of integers is converted to a tuple and returned, which is the required output format.

This solution is efficient and handles all specified edge cases, ensuring robustness and correctness for various input scenarios.