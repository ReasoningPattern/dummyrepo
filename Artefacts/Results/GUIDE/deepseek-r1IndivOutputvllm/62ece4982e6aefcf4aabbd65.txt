

To solve this problem, we need to create a Python function that extracts argument flags from an argparse.ArgumentParser instance and returns them as a space-separated string. 

### Approach
The approach involves leveraging the capabilities of Python's argparse module. Specifically, we utilize the `get_flags()` method provided by the `argparse.ArgumentParser` class. This method returns a list of argument flags in the order they were defined. By joining these flags into a single string separated by spaces, we can achieve the desired output.

### Solution Code
```python
import argparse

def parser_flags(parser):
    """
    Given an argparse.ArgumentParser instance, return its argument flags in a space-separated string.
    
    Args:
        parser: argparse.ArgumentParser instance
    
    Returns:
        Argument flags as a space-separated string
    """
    return ' '.join(parser.get_flags())
```

### Explanation
1. **Importing argparse**: The `argparse` module is imported to access the necessary functionalities for creating and manipulating command-line argument parsers.
2. **Function Definition**: The function `parser_flags` takes an instance of `argparse.ArgumentParser` as its parameter.
3. **Extracting Flags**: The `get_flags()` method is called on the parser instance to retrieve a list of argument flags in the order they were defined.
4. **Joining Flags**: The list of flags is converted into a string using `' '.join()`, which ensures each flag is separated by a space.
5. **Return Value**: The resulting string of flags is returned.

This solution efficiently extracts and formats the argument flags using built-in methods, ensuring clarity and correctness.