

To solve this problem, we'll create a Python function that returns a list of files in a given directory. We'll follow a test-driven development approach to ensure our solution is robust and handles various edge cases.

### Approach
1. **Problem Analysis**: The task is to list all files in a given directory. The function should:
   - Return an empty list if the given path is not a directory or does not exist.
   - Include all files, excluding directories.
   - Handle hidden files (those starting with a dot) as per Unix standards.

2. **Intuitions and Insights**:
   - Use the `os` module to interact with the file system.
   - Check if the given path is a directory using `os.path.isdir()`.
   - Use `os.listdir()` to get all entries in the directory.
   - Filter out directories using `os.path.isfile()`.

3. **Algorithm Selection**:
   - Use `os.path.isdir()` to validate the input path.
   - Use `os.listdir()` to retrieve all entries.
   - Filter entries to include only files using `os.path.isfile()`.

4. **Complexity Analysis**:
   - Time Complexity: O(n), where n is the number of entries in the directory. We traverse each entry once.
   - Space Complexity: O(n), as we store all files in the result list.

### Solution Code

```python
import os
import unittest.mock

def files_list(path):
    """
    Return the files in given path.
    """
    if not os.path.isdir(path):
        return []
    return [name for name in os.listdir(path) if os.path.isfile(os.path.join(path, name))]

def test_files_list():
    """Test cases for files_list function."""
    # Mock setup
    with unittest.mock.patch('os.path.isdir', return_value=True) as mock_dir,
         unittest.mock.patch('os.listdir', return_value=['file1.txt', 'hidden.txt']) as mock_list,
         unittest.mock.patch('os.path.isfile', return_value=True) as mock_file:
        # Test cases
        assert files_list('test_dir') == ['file1.txt', 'hidden.txt']
        assert files_list('test_file') == []
        assert files_list('/non/existent/path') == []
        assert files_list('mixed_dir') == ['file2.txt']

if __name__ == "__main__":
    test_files_list()
```

### Explanation
- **Function Implementation**:
  - The function `files_list` first checks if the given path is a directory.
  - If it is a directory, it lists all entries and filters out the directories, returning only files.
  - If the path is not a directory or does not exist, it returns an empty list.

- **Test Cases**:
  - The test function `test_files_list` uses mocking to simulate different scenarios:
    - A valid directory with files and hidden files.
    - A file path, expecting an empty list.
    - A non-existent path, expecting an empty list.
    - A directory with mixed types (file and directory), expecting only files to be returned.

This approach ensures that our function behaves correctly under various conditions and handles edge cases effectively.