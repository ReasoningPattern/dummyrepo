

To solve this problem, we need to create a function that converts a string or a regex pattern object into a compiled regex pattern object. The function should also handle the stripping of leading and trailing whitespace from the input string based on a boolean parameter.

### Approach
1. **Input Handling**: The function accepts two types of inputs: a string or a regex pattern object. If the input is a string, it will be compiled into a regex pattern object. If the input is already a regex pattern object, it will be returned as is.
2. **Whitespace Stripping**: If the input string is provided, it will be stripped of leading and trailing whitespace based on the boolean parameter `strip`. If `strip` is `True`, whitespace is removed; if `False`, it is retained.
3. **Compiled Regex**: The function uses Python's `re.compile` to convert the processed string (after optional stripping) into a compiled regex pattern object.
4. **Testing**: Comprehensive unit tests are written to ensure the function works correctly for various input scenarios, including strings with and without whitespace, regex objects, and edge cases like empty strings.

### Solution Code
```python
import re
import unittest

def get_pattern(pattern, strip=True):
    """
    Converts a string to a regex pattern object, optionally stripping whitespace.
    
    Args:
            pattern: str or regex pattern object
            strip: boolean, whether to strip whitespace from the start/end of the string
    Returns:
            regex pattern object
    """
    if isinstance(pattern, str):
        if strip:
            stripped = pattern.strip()
        else:
            stripped = pattern
        return re.compile(stripped)
    else:
        return pattern

class TestGetPattern(unittest.TestCase):
    def test_get_pattern_string_with_spaces(self):
        pattern = "  hello  "
        expected = re.compile("hello")
        actual = get_pattern(pattern, strip=True)
        self.assertEqual(actual, expected)

    def test_get_pattern_string_without_strip(self):
        pattern = "  hello  "
        expected = re.compile("  hello  ")
        actual = get_pattern(pattern, strip=False)
        self.assertEqual(actual, expected)

    def test_get_pattern_string_without_spaces(self):
        pattern = "hello"
        expected = re.compile("hello")
        actual = get_pattern(pattern, strip=True)
        self.assertEqual(actual, expected)

    def test_get_pattern_regex_object(self):
        pattern = re.compile("world")
        actual = get_pattern(pattern)
        self.assertEqual(actual, pattern)

    def test_get_pattern_none(self):
        pattern = None
        actual = get_pattern(pattern)
        self.assertEqual(actual, pattern)

    def test_get_pattern_empty_string(self):
        pattern = ""
        expected = re.compile("")
        actual = get_pattern(pattern)
        self.assertEqual(actual, expected)

    def test_get_pattern_leading_trailing_newlines(self):
        pattern = "\nhello\n"
        expected = re.compile("hello")
        actual = get_pattern(pattern, strip=True)
        self.assertEqual(actual, expected)

    def test_get_pattern_strip_false(self):
        pattern = "  test  "
        expected = re.compile("  test  ")
        actual = get_pattern(pattern, strip=False)
        self.assertEqual(actual, expected)

if __name__ == "__main__":
    unittest.main()
```

### Explanation
- **Function Definition**: The function `get_pattern` takes two parameters: `pattern` and `strip`. The `pattern` can be a string or a regex pattern object, and `strip` is a boolean to control whitespace stripping.
- **String Processing**: If `pattern` is a string, it is stripped of leading and trailing whitespace if `strip` is `True`. The processed string is then compiled into a regex pattern object using `re.compile`.
- **Regex Handling**: If `pattern` is already a regex pattern object, it is returned without modification.
- **Unit Tests**: The provided test cases ensure that the function works correctly for various inputs, including strings with and without whitespace, regex objects, and edge cases like empty strings. The tests verify that the function returns the expected compiled regex pattern objects.