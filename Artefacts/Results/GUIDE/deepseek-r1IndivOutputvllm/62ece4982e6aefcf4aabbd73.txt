

To solve this problem, we need to create a function that splits a given string based on different platform-specific rules. The function should handle three different splitting scenarios: auto-detecting the current platform, using POSIX style splitting, and using Windows/CMD style splitting.

### Approach
1. **Auto-detecting Platform**: If the platform is set to 'this', the function will detect the current operating system and use the appropriate separator. On Unix-like systems, it will use '/' as the separator, while on Windows, it will use '\'.
2. **POSIX Style Splitting**: If the platform is set to 1, the function will split the string using '/' as the separator and remove any empty strings from the result.
3. **Windows/CMD Style Splitting**: If the platform is set to 0, the function will split the string using '\' as the separator and remove any empty strings from the result.

The function will handle edge cases such as empty strings and strings with consecutive separators by ensuring that only non-empty substrings are included in the result.

### Solution Code
```python
import platform

def split(s, platform='this'):
    """
    Split the input string based on the platform rules.
    
    Args:
        s: The input string to split.
        platform: Determines the splitting behavior. 
                 'this' (default): Auto-detect the current platform.
                 1: Use POSIX style splitting (split on '/' and remove empty strings).
                 0: Use Windows/CMD style splitting (split on '\' and remove empty strings).
    
    Returns:
        A list of non-empty substrings after splitting.
    """
    if platform == 'this':
        # Auto-detect the current platform
        current Platform = platform.system()
        if Platform.startswith('Windows'):
            sep = '\\'
        else:
            sep = '/'
    elif platform == 1:
        sep = '/'
    elif platform == 0:
        sep = '\\'
    else:
        raise ValueError("Invalid platform value. Use 'this', 1, or 0.")
    
    # Split the string and filter out empty strings
    result = s.split(sep)
    # Remove any empty strings from the split result
    return [part for part in result if part]
```

### Explanation
1. **Auto-detecting Platform**: The function checks the current operating system using `platform.system()`. If the system is Windows, it uses backslash (`\`) as the separator; otherwise, it uses forward slash (`/`).
2. **POSIX Style Splitting**: When the platform is set to 1, the function splits the string using the forward slash (`/`) as the separator and filters out any empty strings resulting from consecutive separators.
3. **Windows/CMD Style Splitting**: When the platform is set to 0, the function splits the string using the backslash (`\`) as the separator and filters out any empty strings.

This approach ensures that the function works correctly across different operating systems and handles various edge cases, providing a robust solution for splitting strings based on the specified platform rules.