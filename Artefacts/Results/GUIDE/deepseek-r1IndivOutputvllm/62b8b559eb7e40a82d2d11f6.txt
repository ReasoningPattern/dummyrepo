

To solve this problem, we need to determine the metaclass of a class based on its bases and an optional explicit __metaclass__. The metaclass is determined by the first base that specifies a metaclass, or by the explicit __metaclass__ if provided. If neither is specified, the default metaclass is used.

### Approach
1. **Check for Explicit Metaclass**: If an explicit metaclass is provided, it is used immediately as the result.
2. **Iterate Through Bases**: If no explicit metaclass is provided, iterate through each base class in the order they are given.
3. **Determine Metaclass from Bases**: For each base, check if it has its own metaclass. The first base with a non-None metaclass determines the result.
4. **Default Metaclass**: If none of the bases specify a metaclass, the default metaclass (type) is used.

This approach ensures that the metaclass is determined correctly based on the hierarchy of bases and any explicit specifications.

### Solution Code

```python
def determine_metaclass(bases, explicit_mc=None):
    """
    Determine the metaclass based on the given bases and an optional explicit __metaclass__.
    
    Args:
        bases (tuple): The bases classes.
        explicit_mc (type, optional): The explicit __metaclass__ to use if provided.
        
    Returns:
        type: The determined metaclass.
    """
    if explicit_mc is not None:
        return explicit_mc
    for base in bases:
        if base.__metaclass__ is not None:
            return base.__metaclass__
    return type
```

### Explanation
- **Explicit Metaclass Check**: The function first checks if an explicit metaclass is provided. If so, it is returned immediately.
- **Base Iteration**: If no explicit metaclass is given, the function iterates through each base class. For each base, it checks if the base class has its own metaclass.
- **Return First Non-None Metaclass**: The function returns the first base that specifies a non-None metaclass.
- **Default Metaclass**: If none of the bases specify a metaclass, the function defaults to using the `type` metaclass.

This solution efficiently determines the correct metaclass by leveraging the order of bases and any explicit specifications, ensuring accurate and expected behavior.