

Here is the Python code that implements the described functionality using a test-driven development approach:

```python
import logging
import yaml
import time

def load_configurations(config_filenames, overrides=None, resolve_env=True):
    """
    Given a sequence of configuration filenames, load and validate each configuration file. If the configuration file
    cannot be read due to insufficient permissions or error parsing configuration file, the error log will
    be recorded. Otherwise, return the results as a tuple of: dict of configuration filename to corresponding parsed configuration,
    and sequence of logging.LogRecord instances containing any parse errors.
    """
    
    configs = {}
    errors = []
    
    for filename in config_filenames:
        try:
            with open(filename, 'r') as f:
                # Load the configuration
                parsed_config = yaml.safe_load(f)
                
                # Apply overrides if provided
                if overrides is not None:
                    parsed_config.update(overrides)
                
                configs[filename] = parsed_config
        except (PermissionError, IOError, ValueError) as e:
            # Create a logging record for the error
            log_record = logging.LogRecord(
                timestamp=time.time(),
                level=logging.ERROR,
                message=f"Error parsing {filename}: {str(e)}",
                args=(type(e), e),
                exc_info=exc_info(e)
            )
            errors.append(log_record)
    
    return configs, errors
```

This code:
1. Initializes an empty dictionary for storing configurations and a list for logging errors.
2. Iterates over each configuration file, attempting to read and parse it.
3. If reading or parsing fails, it creates a logging record with details about the error and adds it to the errors list.
4. If the configuration is successfully parsed, it applies any provided overrides and stores the result.
5. Returns the configurations and any errors encountered.

The function uses the `yaml.safe_load` method to parse configuration files, which is robust and handles many common YAML parsing issues. The overrides parameter allows modifying the parsed configurations with default values.