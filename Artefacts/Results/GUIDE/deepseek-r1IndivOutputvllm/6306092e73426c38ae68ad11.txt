

To solve this problem, we need to create a function that extends a given dictionary with additional key-value pairs provided in a list. The function should handle both tuples and dictionaries as elements in the list, extracting the key and value appropriately.

### Approach
1. **Check for None**: If the `extra_vars` parameter is `None`, the function should return a copy of the original dictionary to avoid modifying it directly.
2. **Iterate Over Extra Variables**: If `extra_vars` is not `None`, loop through each element in the list.
3. **Extract Key-Value Pairs**: For each element, determine if it is a tuple or a dictionary. Extract the key and value from each element and update the original dictionary with these values.

This approach ensures that the function works flexibly with different data structures in the list, whether they are tuples or dictionaries.

### Solution Code
```python
def merge_extra_vars(vars_dict, extra_vars=None):
    """
    Extend ``vars_dict`` with ``extra-vars``.

    :param vars_dict: Dictionary to merge extra-vars into
    :param extra_vars: List of extra-vars (can be tuples or dictionaries)
    :return: The extended dictionary
    """
    if extra_vars is None:
        return vars_dict.copy()
    
    for item in extra_vars:
        if isinstance(item, (list, tuple)):
            key, value = item[0], item[1]
            vars_dict[key] = value
        elif isinstance(item, dict) and len(item) == 1:
            key, value = next(iter(item.items()))
            vars_dict[key] = value
        else:
            # Handle unexpected cases if necessary
            pass
    
    return vars_dict
```

### Explanation
- **Check for None**: The function first checks if `extra_vars` is `None`. If so, it returns a copy of `vars_dict` to ensure the original dictionary is not modified.
- **Loop Through Elements**: The function iterates over each element in `extra_vars`. Each element can be a tuple or a dictionary.
- **Extract Key-Value Pairs**: If the element is a tuple, it extracts the first element as the key and the second as the value. If the element is a dictionary with a single key-value pair, it extracts that pair.
- **Update Dictionary**: The extracted key-value pairs are then used to update `vars_dict`.

This solution is robust and handles different data structures, ensuring flexibility and correctness in merging additional variables into the original dictionary.