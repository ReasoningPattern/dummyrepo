

To solve this problem, we need to write a Python function that identifies the roots in a given graph based on a specified property. The roots are defined as nodes that do not have any incoming edges via the given property. The function should handle both cases where the roots parameter is provided or not.

### Approach
1. **Understanding the Problem**: The function `find_roots` takes a graph, a property, and an optional set of roots. The property is assumed to point from a child to a parent, meaning the direction is from the child to the parent. The goal is to find all nodes that are roots, i.e., nodes that do not have any incoming edges via the given property.
2. **Handling Optional Roots Parameter**: If the roots parameter is `None`, the function should compute all roots from the graph. If roots are provided, the function should check if these provided roots are actual roots (i.e., they have no incoming edges via the property).
3. **Algorithm**:
   - If roots are not provided, iterate through each node in the graph and collect nodes that have no incoming edges via the given property.
   - If roots are provided, filter these roots to include only those that are actual roots.

### Solution Code
```python
def find_roots(graph: "Graph", prop: "URIRef", roots: Optional[Set["Node"]] = None) -> Set["Node"]:
    """
    Find the roots in the graph based on the given property.

    Parameters:
        graph: The graph object containing triples.
        prop: The property to look for, indicating the direction of hierarchy.
        roots: Optional set of nodes to consider as potential roots.

    Returns:
        A set of nodes that are roots, i.e., nodes with no incoming edges via the property.
    """
    if roots is None:
        roots_set = set()
        for node in graph.nodes():
            if not any(triple[2] == node for triple in graph if triple[1] == prop):
                roots_set.add(node)
        return roots_set
    else:
        valid_roots = set()
        for root in roots:
            if not any(triple[2] == root for triple in graph if triple[1] == prop):
                valid_roots.add(root)
        return valid_roots
```

### Explanation
- **Finding Roots**: The function first checks if the roots parameter is `None`. If it is, it iterates through each node in the graph and checks if there are any incoming edges via the given property. Nodes without any incoming edges are collected as roots.
- **Provided Roots**: If the roots parameter is provided, the function checks each provided root to see if it has any incoming edges via the property. Only those roots that have no incoming edges are included in the result.
- **Efficiency**: The function efficiently checks each node or provided root against the graph's triples, ensuring that the roots are correctly identified based on the given property.

This approach ensures that the function correctly identifies all roots in the graph, whether the roots are provided or not, and efficiently handles the graph traversal to determine the roots.