

```python
import re

def validate_key(key):
    """
    Validate the given key against the corresponding regular expression.
    
    Args:
        key (str): The key to validate.
        
    Returns:
        bool: True if the key matches the regex pattern, False otherwise.
        
    The regular expression pattern used for validation is:
    ^[A-Za-z][A-Za-z0-9_]{3,}$
    This pattern ensures:
    - The key starts with a letter
    - Contains only alphanumeric characters and underscores
    - Has a minimum length of 4 characters
    """
    pattern = r'^[A-Za-z][A-Za-z0-9_]{3,}$'
    return bool(re.fullmatch(pattern, key))
    
def test_validate_key():
    """
    Unit tests for the validate_key function.
    """
    test_cases = [
        ("valid_key1", True),
        ("invalid_key", False),
        ("test_key", True),
        ("_test_key", False),
        ("test", False),
        ("test_key123", True),
        ("test__key", True),
        ("test_key1234", True),
        ("test_key12345", True),
        ("test_key!@#", False),
        ("test_key123", True),
        ("test_key_123", True),
    ]
    
    for key, expected in test_cases:
        result = validate_key(key)
        assert result == expected, f"Test failed for key: {key}"
        
    print("All tests passed!")
    
if __name__ == "__main__":
    import pytest
    pytest.mark.main(test_validate_key)
    pytest.main(args=["-v"])
```