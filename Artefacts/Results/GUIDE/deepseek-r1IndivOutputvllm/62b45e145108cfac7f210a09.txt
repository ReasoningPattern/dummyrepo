

To implement the `check_digests_present_and_used` method, we need to verify that all digests specified in the manifest files are actually present in the available digests. This is a crucial security check to prevent potential vulnerabilities like missing digest validation.

### Approach

1. **Extract Manifest Digests**: Gather all unique digests from the manifest files. This helps in efficiently checking for missing digests later.
2. **Check Availability**: Compare the extracted digests from the manifest against the currently available digests.
3. **Identify Missing Digests**: Determine which digests from the manifest are not present in the available list.
4. **Error Handling**: If any digests are missing, call the parent class's error method with the missing digest names to trigger appropriate error handling.

### Solution Code

```python
def check_digests_present_and_used(self, manifest_files, digests_used):
    """
    Check all digests in manifest that are needed are present and used. Return error() in the class.
    """
    # Get the available digests from the current context
    available = self.digests_available
    
    # Extract digests from manifest files, using a set to avoid duplicates
    manifest = set()
    for file in manifest_files:
        for digest in file.digests:
            manifest.add(digest)
    
    # Check if all required digests are present
    missing = []
    for digest in manifest:
        if digest not in available:
            missing.append(digest)
    
    # If any digests are missing, report the error
    if missing:
        self.error(f"Missing digests: {missing}")
    else:
        self.check()  # Verify all available digests are used
```

### Explanation

- **Extracting Manifest Digests**: The code iterates over each manifest file and collects all unique digests into a set to avoid duplicates.
- **Checking Availability**: For each digest in the manifest set, it checks if the digest exists in the available digests.
- **Identifying Missing Digests**: Any digest found in the manifest that is not available is added to the `missing` list.
- **Error Handling**: If there are any missing digests, the `error()` method is called with the missing digest names. If all digests are present, the parent class's `check()` method is called to ensure all available digests are used.

This approach ensures that we efficiently verify the integrity of the digest set and handle any missing digests appropriately.