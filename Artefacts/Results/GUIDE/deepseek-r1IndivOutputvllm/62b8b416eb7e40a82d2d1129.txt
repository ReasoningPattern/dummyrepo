

To solve this problem, we need to create a Python function that returns the attribute names of the current class. The function should be flexible to include or exclude private attributes based on a boolean parameter.

### Approach
The approach involves the following steps:
1. **Understand the Function Requirements**: The function should return the names of the class's attributes. If the parameter `all` is `False`, it should exclude attributes that start with `__`. If `all` is `True`, it should include all attributes, including those starting with `__`.
2. **Access Class Attributes**: The function will access the class's attributes using the instance's class (`self.__class__`). This allows the function to work when called on an instance of a class.
3. **Filter Attributes**: Depending on the value of `all`, the function will filter the attributes. If `all` is `False`, it will exclude attributes starting with `__`.
4. **Return the Filtered List**: The function will return the filtered list of attribute names.

### Solution Code

```python
def names(self, all=False):
    """
    Return the attribute names of current class.
    """
    cls = self.__class__
    attrs = cls.__dict__.keys()
    if all:
        return list(attrs)
    else:
        return [name for name in attrs if not name.startswith('__')]
```

### Explanation
- **Function Definition**: The function `names` takes an instance `self` and a boolean parameter `all`.
- **Accessing Class**: `self.__class__` retrieves the class of the instance `self`.
- **Getting Attributes**: `cls.__dict__.keys()` retrieves all attribute names of the class.
- **Filtering Attributes**: If `all` is `True`, all attributes are returned. If `all` is `False`, attributes starting with `__` are excluded.
- **Return**: The function returns the filtered list of attribute names.

This approach ensures that the function behaves as expected, providing either all or filtered attribute names based on the input parameter. The solution is efficient and leverages Python's built-in capabilities to access and filter class attributes.