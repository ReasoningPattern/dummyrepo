

```python
import unittest

class TestGetLogicalPathMap(unittest.TestCase):
    def test_get_logical_path_map_normal_case(self):
        inventory = [
            {'name': 'state1', 'version': 'v1.0'},
            {'name': 'state2', 'version': 'v2.0'}
        ]
        version = 'v1.0'
        expected = {'state1': 'state1_v1.0', 'state2': 'state2_v1.0'}
        self.assertEqual(get_logical_path_map(inventory, version), expected)
        
    def test_get_logical_path_map_missing_version(self):
        inventory = [
            {'name': 'state1', 'version': 'v1.0'},
            {'name': 'state2', 'version': 'v2.0'}
        ]
        version = 'v3.0'
        expected = {'state1': 'state1_v1.0', 'state2': 'state2_v2.0'}
        self.assertEqual(get_logical_path_map(inventory, version), expected)
        
    def test_get_logical_path_map_no_version(self):
        inventory = [
            {'name': 'state1'},
            {'name': 'state2'}
        ]
        version = None
        expected = {'state1': 'state1', 'state2': 'state2'}
        self.assertEqual(get_logical_path_map(inventory, version), expected)

def get_logical_path_map(inventory, version):
    """
    Returns the file paths of the states in the inventory in the dict type.
    
    Args:
        inventory (list): A list of dictionaries, each representing a state with 'name' and 'version' keys.
        version (str | None): The version string to use for constructing file paths.
        
    Returns:
        dict: A dictionary mapping state names to their logical file paths.
    """
    path_map = {}
    for item in inventory:
        if isinstance(item, dict) and 'version' in item and item['version'] == version:
            path = f"{item['name']}_{version}"
        else:
            path = item.get('name')
        path_map[item['name']] = path
    return path_map
```