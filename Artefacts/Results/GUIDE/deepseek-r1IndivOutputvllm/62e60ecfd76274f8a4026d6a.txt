

To implement the `protocol_handlers` function, we'll create a handler class that determines message handling based on the protocol version. Here's the implementation:

```python
class BoltProtocolHandler:
    def __init__(self, protocol_version):
        self.protocol_version = protocol_version

    def handle_message(self, message):
        if self.protocol_version == 1:
            # Handle version 1 messages
            pass
        elif self.protocol_version == 2:
            # Handle version 2 messages
            pass
        else:
            # Default handling for unknown versions
            pass

def protocol_handlers(cls, protocol_version=None):
    if protocol_version is None:
        return BoltProtocolHandler(None)
    else:
        return BoltProtocolHandler(protocol_version)
```

To verify the implementation, we can write unit tests:

```python
import unittest

class TestProtocolHandlers(unittest.TestCase):
    def test_handler versions(self):
        handler1 = protocol_handlers(protocol_version=1)
        handler2 = protocol_handlers(protocol_version=2)
        handlerNone = protocol_handlers(protocol_version=None)

        self.assertIsInstance(handler1, BoltProtocolHandler)
        self.assertIsInstance(handler2, BoltProtocolHandler)
        self.assertIsInstance(handlerNone, BoltProtocolHandler)

if __name__ == "__main__":
    unittest.main()
```

This implementation provides a basic structure for handling different Bolt protocols based on version.