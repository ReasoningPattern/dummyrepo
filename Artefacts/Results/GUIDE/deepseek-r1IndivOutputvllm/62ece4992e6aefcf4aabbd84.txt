

To solve this problem, we need to determine if a given input is a valid IPv4 address. An IPv4 address is a string consisting of four octets separated by dots, where each octet is a number between 0 and 255.

### Approach
1. **Input Handling**: The function should handle various input types, including strings, integers, and floats. If the input is not a string, it will be converted to a string for processing.
2. **String Splitting**: The input string will be split into parts using the dot ('.') as a separator.
3. **Part Validation**: Each part must satisfy the following conditions:
   - It must be a numeric string.
   - It must convert to an integer between 0 and 255, inclusive.
4. **Edge Cases**: The function should handle various edge cases, such as invalid formats (e.g., too many dots, non-numeric characters), empty strings, and strings with leading/trailing dots.

### Solution Code
```python
def is_ipv4(target):
    """
    Test if IPv4 address or not.

    Args:
        target (str, int, float, etc.): The input to test.

    Returns:
        bool: True if target is a valid IPv4 address, False otherwise.
    """
    # Convert target to string for consistent processing
    s = str(target)
    
    # Split the string into parts by dot
    parts = s.split('.')
    
    # Check if there are exactly four parts
    if len(parts) != 4:
        return False
    
    # Check each part for valid numeric range
    for part in parts:
        # Check if the part is a valid integer
        if not part.isdigit():
            return False
        # Convert to integer and check range
        num = int(part)
        if num < 0 or num > 255:
            return False
    
    return True

# Test cases
def test_is_ipv4():
    test_cases = [
        ("192.168.0.1", True),
        ("192.168.0.1.", False),
        ("192.168.0.1a", False),
        ("abc.def.ghi.jkl", False),
        ("192.168.0.192", True),
        ("192.168.0.0", True),
        ("172.16.254.1", True),
        ("192.168.0.1", True),
        ("192.168.0", False),
        ("192.168.0.1.1", False),
        ("  192.168.0.1  ", False),
        ("192.168. 0.1", False),
        ("192.168.0.123.45", False),
        (192.168.0.1, True),
        (192.168.0.1.0, False),
        (192.168.0.123, False),
        (192.168.01.1, False),  # Note: '01' is invalid in IP addresses
    ]
    
    for target, expected in test_cases:
        result = is_ipv4(target)
        assert result == expected, f"Test failed for input: {target}"
        print(f"Test passed for input: {target}")
    
    print("All tests passed!")
```

### Explanation
1. **Input Conversion**: The function first converts the input to a string to handle various input types uniformly.
2. **Splitting**: The string is split into parts using the dot separator. If the number of parts is not exactly four, the function returns False.
3. **Part Validation**: Each part is checked to ensure it is a numeric string and falls within the valid range (0-255). If any part fails this check, the function returns False.
4. **Edge Cases Handling**: The function handles various edge cases, such as invalid formats, non-numeric characters, and empty strings, ensuring accurate validation.

The provided test cases cover a wide range of scenarios to ensure the function behaves correctly under different conditions.