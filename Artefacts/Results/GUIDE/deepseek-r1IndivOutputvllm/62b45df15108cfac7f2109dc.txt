

To solve this problem, we need to create a function that generates a string based on a sorted list of messages, each prefixed with a given string. The function should handle the sorting and concatenation efficiently.

### Approach
1. **Sort the Messages**: First, we sort the list of messages. This ensures that the messages are processed in the correct order.
2. **Apply Prefix**: For each message in the sorted list, we prepend the given prefix. This means each message will have the prefix added to it.
3. **Concatenate Messages**: After applying the prefix to each message, we concatenate all the messages into a single string. This is done using the `join` method for efficiency.

### Solution Code

```python
def status_str(self, prefix=''):
    return ''.join(f"{prefix}{msg}" for msg in sorted(self.messages))
```

### Explanation
- **Sorting**: The `sorted()` function is used to sort the `self.messages` list. This ensures that messages are processed in the correct order.
- **Applying Prefix**: Using a generator expression, each message is concatenated with the prefix. This is done efficiently using the `join` method, which is more efficient than a manual loop for string concatenation.
- **Concatenation**: The `join` method is used to concatenate all the prefixed messages into a single string, resulting in the final output.

This approach ensures that the function is both efficient and easy to understand, handling edge cases such as empty message lists gracefully by returning an empty string.