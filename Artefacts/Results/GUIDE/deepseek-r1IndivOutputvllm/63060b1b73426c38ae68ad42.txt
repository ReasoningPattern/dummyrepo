

To solve this problem, we need to write a function that checks if a specific environment variable exists. If it does not exist, the function should set it to a given path. This is a common task in Ansible configurations where you might want to fall back to a default configuration path if a more specific one is not available.

### Approach
The approach to solve this problem involves the following steps:
1. **Check for the Environment Variable**: Determine if the `ANSIBLE_CONFIG` environment variable exists.
2. **Set the Default Path if Necessary**: If the environment variable does not exist, set it to the provided path using the `os.environ.setdefault` method. This method is efficient because it checks if the key exists and sets it if it does not, in a single operation.

### Solution Code

```python
import os

class AnsibleConfigManager:
    def __init__(self, ansible_config_path):
        self.ansible_config_path = ansible_config_path

    def inject_config(self):
        """
        If the ANSIBLE_CONFIG property does not exist in os.environ, set it to self.ansible_config_path.
        """
        os.environ.setdefault('ANSIBLE_CONFIG', self.ansible_config_path)
```

### Explanation
The function `inject_config` is part of a class `AnsibleConfigManager` that takes an `ansible_config_path` during initialization. The function uses `os.environ.setdefault` to check if `ANSIBLE_CONFIG` exists. If it does not exist, it sets the environment variable to the provided path. This approach ensures that the environment variable is efficiently managed without multiple conditional checks.