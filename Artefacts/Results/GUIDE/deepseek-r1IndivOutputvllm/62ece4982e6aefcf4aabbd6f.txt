

To solve this problem, we need to create a Python function that retrieves a .tar.gz archive from a given URL and extracts it to a specified destination path. The function should handle the download and extraction process, ensuring that the destination directory is created if it doesn't exist. Additionally, the function should return the path where the archive is extracted.

### Approach
1. **Download the Archive**: Use the `requests` library to download the file from the provided URL. This library handles the HTTP request and response parsing.
2. **Extract the Archive**: Once the file is downloaded, use the `tarfile` module to extract its contents. The `tarfile.open` method is used with the mode `'r|*gz'` to handle both .tar and .tar.gz files.
3. **Handle the Destination Path**: Ensure that the destination path exists by creating it if necessary. This is done using `Path.mkdir` with `parents=True` and `exist_ok=True`.
4. **Error Handling**: Include error handling to manage cases where the download fails or the extraction fails. This ensures the function robustly handles unexpected issues.

### Solution Code
```python
from pathlib import Path
import requests
import tarfile

def get_repo_archive(url: str, destination_path: Path) -> Path:
    """
    Given an url and a destination path, retrieve and extract .tar.gz archive which contains 'desc' file for each package

    Args:
        url: url of the .tar.gz archive to download
        destination_path: the path on disk where to extract archive

    Returns:
        Path: the path where the archive is extracted to
    """
    # Create the destination directory if it doesn't exist
    destination_path.parent.mkdir(parents=True, exist_ok=True)
    
    # Attempt to download the archive
    response = requests.get(url, stream=True)
    if not response.ok:
        raise ValueError(f"Failed to download {url}. Status code: {response.status_code}")
    
    # Extract the archive
    with tarfile.open(response.content, mode='r|*gz') as archive:
        try:
            archive.extract to destination_path
        except Exception as e:
            raise RuntimeError(f"Failed to extract archive from {url}. Error: {str(e)}")
    
    return destination_path
```

### Explanation
1. **Download the Archive**: The function starts by creating the destination directory using `destination_path.parent.mkdir(...)`. This ensures that the directory exists before attempting to download the file.
2. **Response Check**: The function uses `requests.get` with `stream=True` to efficiently download the file. It checks if the response is successful (`response.ok`), raising a `ValueError` if not.
3. **Extracting the Archive**: The downloaded content is opened as a tar.gz file using `tarfile.open` with the appropriate mode. The `extract` method is then called to extract the contents to the destination path.
4. **Error Handling**: The extraction process is wrapped in a try-except block to handle any exceptions that may occur during extraction, ensuring the function fails gracefully with a meaningful error message.

This approach ensures that the function is robust, handles various edge cases, and efficiently manages the download and extraction process.