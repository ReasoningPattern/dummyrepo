

To solve this problem, we need to generate Python code that converts command-line arguments from their string representations to appropriate data types. This is commonly done when parsing command-line arguments using tools like `argparse`. The function will take a parser name and a dictionary of arguments, then modify the dictionary to convert the values to their correct types.

### Approach
1. **Access the Parser Object**: Retrieve the parser object from the values dictionary using the provided parser name.
2. **Iterate Over Arguments**: Loop through each argument in the parser's action.
3. **Determine Appropriate Type**: For each argument, check if its value can be converted to a different type (e.g., string to integer, string to boolean).
4. **Convert Values**: Convert the values to the appropriate types and update the values dictionary with these converted values.
5. **Handle Edge Cases**: Ensure that values which cannot be converted remain as strings or handle them appropriately (e.g., None values should remain unchanged).

### Solution Code
```python
def _convert_non_cli_args(self, parser_name, values_dict):
    """
    Casts arguments to correct types by modifying values_dict.

    By default all the values are strings.

    :param parser_name: The command name, e.g. main, virsh, ospd, etc
    :param values_dict: The dict of arguments
    """
    parser = values_dict[parser_name + '_parser']
    for arg in parser.action:
        if arg.value is None:
            continue
        if arg.dest == 'bool':
            values_dict[arg.dest] = bool(arg.value)
        elif arg.dest in ['version', 'port']:
            values_dict[arg.dest] = int(arg.value)
        elif arg.dest == 'int':
            values_dict[arg.dest] = int(arg.value)
        elif arg.dest == 'str':
            values_dict[arg.dest] = arg.value
        else:
            values_dict[arg.dest] = arg.value
```

### Explanation
- **Accessing the Parser Object**: The parser object is retrieved from the values dictionary using the provided parser name. This allows us to access the parsed arguments and their metadata.
- **Iterating Over Arguments**: Each argument is processed to check if it needs conversion. This includes checking if the argument has a `dest` attribute that indicates the expected type (e.g., 'bool', 'version', 'port').
- **Converting Values**: Based on the `dest` attribute, the value is converted to the appropriate type. For example, if `dest` is 'bool', the value is converted to a boolean. If `dest` is 'version' or 'port', the value is converted to an integer.
- **Handling Edge Cases**: The function skips arguments with `value` as None and handles other cases where conversion isn't straightforward, ensuring values remain as strings when appropriate.

This approach ensures that command-line arguments are correctly parsed and converted, enhancing the usability and flexibility of the application.