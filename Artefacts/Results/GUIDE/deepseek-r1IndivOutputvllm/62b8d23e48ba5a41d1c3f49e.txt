

To solve this problem, we need to implement a function `popitem` for a class that allows us to retrieve and remove a random key-value pair from the class's underlying data structure. The function should ensure that the pair is removed and returned, and it should handle cases where the data structure might be empty.

### Approach
1. **Problem Analysis**: The function should:
   - Retrieve a random key-value pair from the data structure.
   - Remove that pair from the data structure.
   - Return the retrieved pair.
   - Handle cases where the data structure might be empty without raising errors.

2. **Intuitions and Insights**:
   - Using `random.choice` on a list of key-value pairs allows us to select a random item efficiently.
   - Converting the data structure into a list of tuples (key, value) helps in safely removing the selected item without causing iteration issues.
   - Using `self.pop(key)` ensures that the selected item is removed from the data structure.

3. **Algorithm Selection**:
   - Convert the keys and values into a list of tuples.
   - Use `random.choice` to select a random tuple.
   - Extract the key and remove the tuple using `self.pop`.
   - Return the selected value and key.

4. **Complexity Analysis**:
   - Time Complexity: O(n), where n is the number of key-value pairs. This is because we need to iterate through all elements to find a random one and then remove it.
   - Space Complexity: O(n) for storing the list of key-value pairs.

### Solution Code

```python
import random

class MyClass:
    def __init__(self, data=None):
        if data is None:
            self.items = {}
        else:
            self.items = data.copy()

    def popitem(self):
        """
        Find, remove and return a random (key, value) pair via __choice in the class
        """
        # Create a list of all key-value pairs to safely remove the item
        items = list(self.items.items())
        if not items:
            raise KeyError("popitem(): empty")
        # Select a random item
        key, value = random.choice(items)
        # Remove and return the selected item
        del self.items[key]
        return key, value

def test_popitem():
    import unittest
    class TestSuite(unittest.TestCase):
        def setUp(self):
            self.obj = MyClass({'a': 1, 'b': 2, 'c': 3})
            self.obj2 = MyClass()

        def test_basic(self):
            key, value = self.obj.popitem()
            self.assertIn(key, self.obj.items.keys())
            self.assertIn(value, self.obj.items.values())
            self.assertEqual(self.obj.items[key], value)
            self.assertNotIn(key, self.obj.items.keys())

        def test_empty(self):
            with self.assertRaises KeyError:
                self.obj2.popitem()

    suite = TestSuite()
    unittest.main()

if __name__ == "__main__":
    test_popitem()
```

### Explanation
- **Initialization**: The class `MyClass` initializes with a dictionary of key-value pairs.
- **popitem Method**: This method converts the key-value pairs into a list, selects a random pair, removes it from the dictionary, and returns the pair.
- **Unit Tests**: The `test_popitem` function includes tests to ensure that:
  - The method correctly handles non-empty and empty data structures.
  - The returned pair is indeed present in the original data before removal.
  - The removed key is no longer present after the operation.
  - An exception is raised when attempting to pop from an empty structure.

This solution ensures that the function behaves correctly under various conditions and maintains the integrity of the data structure after each operation.