

To solve this problem, we need to write a function that converts a human-readable file size string into bytes. The function should handle various units such as K, M, G, T, P, and E, and return the corresponding byte value as an integer.

### Approach
1. **Unit Mapping**: Create a dictionary to map each unit to its corresponding multiplier in bytes. The units and their multipliers are:
   - K: 1024^1
   - M: 1024^2
   - G: 1024^3
   - T: 1024^4
   - P: 1024^5
   - E: 1024^6

2. **String Conversion and Splitting**: Convert the input string to uppercase to handle case insensitivity. Split the string into numeric and unit parts.

3. **Validation**: Check if the numeric part is a valid float and if the unit exists in the dictionary. If either check fails, raise a ValueError.

4. **Conversion Calculation**: Multiply the numeric value by the corresponding multiplier to get the byte value, then convert the result to an integer.

### Solution Code
```python
def size_to_bytes(size: str) -> int:
    """
    Convert human readable file size to bytes

    Args:
            size: str, a string representing a human readable file size (eg: '500K')
    Returns:
            int: file size in bytes
    """
    unit_map = {
        'K': 1024,
        'M': 1024 ** 2,
        'G': 1024 ** 3,
        'T': 1024 ** 4,
        'P': 1024 ** 5,
        'E': 1024 ** 6,
    }
    
    size_upper = size.upper()
    parts = size_upper.split()
    
    if len(parts) != 2:
        raise ValueError("Invalid size format")
    
    number_str, unit = parts
    try:
        number = float(number_str)
    except ValueError:
        raise ValueError("Invalid number in size string")
    
    if unit not in unit_map:
        raise ValueError(f"Invalid unit '{unit}'")
    
    bytes_size = number * unit_map[unit]
    return int(bytes_size)
```

### Explanation
- **Unit Mapping**: The dictionary `unit_map` is used to convert each unit to its corresponding byte multiplier.
- **String Handling**: The input string is converted to uppercase to handle different cases (e.g., 'k' and 'K' both convert to 1024).
- **Validation**: The function checks if the numeric part is a valid float and if the unit is valid. If not, it raises an appropriate error.
- **Conversion**: The numeric value is multiplied by the unit's multiplier to get the byte value, which is then returned as an integer.

This approach ensures that the function handles various edge cases, including different units, decimal values, and invalid inputs, providing a robust solution to convert human-readable file sizes to bytes.