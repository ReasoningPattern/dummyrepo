

To solve this problem, we need to write a function that selects filenames from a list based on a given prefix. The function should return all files whose filenames (without extensions) start with the given prefix. 

### Approach
1. **Problem Analysis**: The goal is to filter filenames such that each filename's base name (without the extension) starts with a given prefix. This means we need to handle different operating systems file separators and ensure the comparison is case-sensitive.
2. **Intuition**: By splitting each filename into its base name and extension, we can check if the base name starts with the given prefix. This approach ensures that we correctly handle different file separators and extensions.
3. **Algorithm Selection**: We will use the `os.path.splitext` function to split each filename into its base name and extension. We then check if the base name starts with the given prefix using the `startswith` string method.
4. **Edge Cases**: Consider cases where the prefix is an empty string (all files should be included) or where the prefix is longer than the base name (no files will match).

### Solution Code
```python
import os

def select_filenames_by_prefix(prefix, files):
    """
    Select filenames that start with the given prefix.
    
    Args:
        prefix (str): The prefix to match at the beginning of filenames.
        files (list): List of filenames to filter.
    
    Returns:
        list: A list of filenames that match the prefix.
    """
    matched_files = []
    for file in files:
        base_name = os.path.splitext(file)[0]
        if base_name.startswith(prefix):
            matched_files.append(file)
    return matched_files
```

### Explanation
1. **Importing the Module**: We import the `os` module to handle platform-specific file operations.
2. **Loop Through Files**: For each file in the input list, we split it into the base name and extension using `os.path.splitext`.
3. **Check Prefix Match**: We check if the base name starts with the given prefix using the `startswith` method.
4. **Collect Matches**: If a filename matches the prefix, it is added to the result list.
5. **Return Result**: Finally, the list of matching filenames is returned.

This approach ensures that the function works correctly across different operating systems and handles various edge cases efficiently.