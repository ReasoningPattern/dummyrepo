

To solve this problem, we need to create a method that validates a fixity block in an inventory file. The fixity block should only reference files that are listed in a provided manifest. If any invalid references are found, the method should return an error.

### Approach
1. **Parse the Fixity Block**: The fixity block is a multi-line string where each level is indicated by '---'. Each subsequent line under that level is indented and represents a file.
2. **Extract File Names**: For each line starting with '---', extract the file name which is typically at the end of the line after any whitespace.
3. **Validate Against Manifest**: Check each extracted file name against the list of allowed files provided in `manifest_files`.
4. **Return Error if Invalid**: If any file name is not found in the manifest, collect the names of these invalid files and return an error message.

### Solution Code

```python
def validate_fixity(self, fixity, manifest_files):
    """
    Validate fixity block in inventory. Check the structure of the fixity block and makes sure that only files listed in the manifest are referenced.
    Returns an error message if invalid files are found.
    """
    # Parse the fixity block
    lines = fixity.strip().split('\n')
    # Find all files under any level
    files = []
    for line in lines:
        line = line.strip()
        if line.startswith('---'):
            # Extract file name from indented lines
            indented_lines = line.split('    ')
            for indent in indented_lines:
                indent = indent.strip()
                if indent:
                    files.append(indent)
    
    # Check each file against the manifest
    invalid_files = []
    for file in files:
        if file not in manifest_files:
            invalid_files.append(file)
    
    if invalid_files:
        error_message = f"Invalid files found: {', '.join(invalid_files)}"
        raise ValueError(error_message)
    return None

# Unit tests (to be written)
```

### Explanation
1. **Parsing the Fixity Block**: The fixity string is split into lines, and each line is stripped of leading/trailing whitespace.
2. **Identifying Files**: Lines starting with '---' are considered to be at the same hierarchical level. Each subsequent indented line under '---' is processed to extract the file name.
3. **Validation**: Each extracted file name is checked against the `manifest_files` list. If any file is not found, it is added to the `invalid_files` list.
4. **Error Handling**: If there are any invalid files, a `ValueError` is raised with a message listing the invalid files. If all files are valid, `None` is returned.

This approach ensures that the fixity block adheres to the specified manifest files, providing a clear error message when invalid references are encountered.