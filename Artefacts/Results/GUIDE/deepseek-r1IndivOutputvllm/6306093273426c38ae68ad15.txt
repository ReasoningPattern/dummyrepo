

To generate the Python code based on the given function signature and docstring, we need to construct an Ansible CLI command that runs a playbook with the provided variables. The function should handle both the -e option for variables and Ansible's extra_vars option.

Here's the step-by-step explanation:

1. **Construct the Playbook Path**: Use the Infrared Workspace to get the path to the playbook.
2. **Create Command List**: Start with the Ansible CLI components (ansible, playbook) and add the playbook path.
3. **Add Variables**: If extra_vars is None, use the -e option with the variables string. Otherwise, add the variables directly.
4. **Run the Command**: Use subprocess to execute the constructed command and capture the output.

Here is the Python code:

```python
import os
import subprocess
import shlex
import click

def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):
    """
    Runs ansible cli with vars dict

    :param cli_args: the list of command line arguments
    :param vars_dict: dict, Will be passed as Ansible extra-vars
    :param ir_workspace: An Infrared Workspace object represents the active workspace
    :param ir_plugin: An InfraredPlugin object of the current plugin
    :return: ansible results
    """
    playbook_path = os.path.join(ir_workspace, __init__.py)
    var_str = shlex.join(vars_dict)
    command = ['ansible']
    if cli_args:
        command += cli_args
    command += ['playbook']
    command.append(playbook_path)
    if vars_dict is None:
        command += ['-e', var_str]
    else:
        command.extend(vars_dict)
    result = subprocess.run(
        command,
        text=True,
        shell=True,
        capture_output=True,
        check=False
    )
    return result
```