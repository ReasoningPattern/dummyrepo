

To implement the `popitem` method, we'll create a class that maintains the order of items and allows removal of the most recently used item. Here's the code:

```python
import collections

class PopItemCache:
    def __init__(self):
        self._order = collections.deque()
        self._data = {}

    def __setitem__(self, key, value):
        self._order.append(key)
        self._data[key] = value

    def popitem(self):
        if not self._order:
            raise KeyError("No items in cache")
        key = self._order.pop()
        value = self._data[key]
        del self._data[key]
        return (key, value)
```

This implementation uses a deque to track the order of items, ensuring that the most recently used item is at the end. The `popitem` method removes and returns this item.

To test this class, you can use the following test cases:

```python
from unittest import TestCase

class TestPopItemCache(TestCase):
    def test_popitem(self):
        cache = PopItemCache()
        cache['a'] = 1
        cache['b'] = 2
        cache['c'] = 3
        self.assertEqual(cache.popitem(), ('c', 3))
        self.assertEqual(cache.popitem(), ('b', 2))
        self.assertEqual(cache.popitem(), ('a', 1))

if __name__ == '__main__':
    unittest.main()
```

These tests verify that `popitem` correctly returns the most recently added items.