

To solve this problem, we need to create a function that removes surrounding quotes from a given name. The quotes can be either single ('') or double ("). The function should handle cases where the quotes are the same at the beginning and end of the string.

### Approach
The approach involves using regular expressions to identify and remove surrounding quotes. The key steps are as follows:

1. **Identify Surrounding Quotes**: Use a regular expression to match strings that start and end with the same type of quote (either single or double).
2. **Remove Quotes**: Replace the matched quotes with an empty string to effectively remove them.

The regular expression `r'^[\'"]([\'"])$'` is used to match strings that start and end with the same type of quote. This ensures that only strings with matching surrounding quotes are processed.

### Solution Code
```python
import re

def unquote(name):
    # Remove surrounding quotes if they are the same
    return re.sub(r'^[\'"]([\'"])$', r'\2', name)
```

### Explanation
- **Regular Expression**: The regex `r'^[\'"]([\'"])$'` matches strings that start with either a single or double quote and end with the same quote. This ensures that only strings with matching surrounding quotes are processed.
- **Replacement**: The replacement string `r'\2'` is used to remove the matched quotes. This works because the regex captures the surrounding quotes, and their positions are replaced with an empty string, effectively removing them.

This approach ensures that the function correctly handles strings with matching surrounding quotes, whether they are single or double quotes. If the quotes do not match, the function leaves the string unchanged, which is the correct behavior for cases where the surrounding quotes are different.