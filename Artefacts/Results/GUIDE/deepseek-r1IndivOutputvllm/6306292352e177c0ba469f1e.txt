

```python
import re

def process_text_links(text):
    """
    Process links in text, adding some attributes and linkifying textual links.
    
    Args:
        text (str): The input text containing potential links.
        
    Returns:
        str: The processed text with links formatted.
    """
    # Compile the regular expression pattern outside the loop for efficiency
    pattern = re.compile(
        r'((?:https?://)?(?:www\.)?[\da-z\.-]+(/[^\ ]*?)(?:[?#][^\s?]+)*)|([a-zA-Z0-9_]+)'
    )
    
    def replace_match(match):
        url = match.group(1)
        link = match.group(2)
        return f'[{link}]({url})' if url else f'[{link}]'
    
    return pattern.sub(replace_match, text)

def test_no_links():
    """Test case with no links."""
    text = "This is a sentence with no links."
    expected = "This is a sentence with no links."
    assert process_text_links(text) == expected

def test_url_only():
    """Test case with only a URL."""
    text = "Click on this URL: https://example.com"
    expected = "[https]([example.com])"
    assert process_text_links(text) == expected

def test_textual_link():
    """Test case with a textual link."""
    text = "Please visit our website at ourlink."
    expected = "[ourlink](ourlink)"
    assert process_text_links(text) == expected

def test_mixed_links():
    """Test case with mixed links."""
    text = "Check out http://example.com and our internal link ourinternallink."
    expected = "[http]([example.com]) and [ourinternallink](ourinternallink)"
    assert process_text_links(text) == expected

# Run all tests
if __name__ == "__main__":
    import unittest
    tests = [test_no_links, test_url_only, test_textual_link, test_mixed_links]
    for test in tests:
        print(f"Running {test.__name__}")
        test()
```