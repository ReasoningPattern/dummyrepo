

To solve this problem, we need to generate a function that identifies all classes from a given collection that do not have any subclasses. The goal is to return these base classes as a list.

### Approach
The approach to solve this problem involves the following steps:

1. **Understanding the Problem**: We need to identify classes that do not have any subclasses. This means we are looking for classes that are at the top of their respective hierarchies and do not inherit from any other class in the given collection.

2. **Using Inheritance Check**: To determine if a class has any subclasses, we can use the `inspect.getsubclasses()` method from Python's `inspect` module. This method returns all immediate and all descendant subclasses of a given class, which helps us determine if a class is a base class (i.e., it does not have any subclasses).

3. **Iterating Through Classes**: For each class in the input collection, we check if it has any subclasses using the `getsubclasses()` method. If a class has no subclasses, it is added to the result list.

### Solution Code
```python
import inspect

def minimalBases(classes):
    result = []
    for cls in classes:
        if not inspect.getsubclasses(cls):
            result.append(cls)
    return result
```

### Explanation
- **Importing the Module**: The `inspect` module is imported to utilize the `getsubclasses()` function, which helps in checking the subclasses of a given class.
- **Iterating Through Classes**: Each class in the input list is checked individually.
- **Checking for Subclasses**: For each class, we use `inspect.getsubclasses(cls)` to get all the subclasses. If the result is an empty list, it means the class does not have any subclasses and is thus a base class.
- **Collecting Base Classes**: Base classes are collected into a result list, which is returned at the end.

This approach efficiently identifies all base classes by leveraging Python's built-in functionalities to handle inheritance and subclass relationships.