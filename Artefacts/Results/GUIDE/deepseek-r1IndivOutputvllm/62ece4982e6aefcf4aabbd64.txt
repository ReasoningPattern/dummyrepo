

To solve this problem, we need to write a Python function that removes a specified root from a given path. If the root is not a prefix of the path, the function should raise an exception. 

### Approach
The approach to solve this problem involves the following steps:
1. **Check for an Empty Root**: If the root is an empty string, the function should return the path as is because removing an empty root from any path does not change the path.
2. **Check for None Root**: If the root is `None`, the function should raise a `ValueError` because a `None` root is not valid.
3. **Check if Root is a Prefix**: The function should check if the given path starts with the root. If it does, the root is stripped from the beginning of the path and the remaining part is returned.
4. **Handle Non-Prefix Roots**: If the root is not a prefix of the path, the function raises a `ValueError` indicating that the root is not a valid prefix of the path.

This approach ensures that the function handles edge cases such as empty paths, empty roots, and non-prefix roots appropriately.

### Solution Code
```python
def strip_root(path, root):
    """
    Remove root from path. If fails, throw exception.

    Args:
        path (str): The path from which to remove the root.
        root (str): The root to be removed from the path.

    Returns:
        str: The path without the root.

    Raises:
        ValueError: If the root is not a prefix of the path or if the root is None.
    """
    if root is None:
        raise ValueError("Root cannot be None")
    if root == "":
        return path
    if not path.startswith(root):
        raise ValueError("Root is not a prefix of the path")
    return path[len(root):]
```

### Explanation
- **Empty Root Handling**: If the root is an empty string, the function immediately returns the original path since removing an empty root does not alter the path.
- **Root Check**: The function first checks if the root is `None` and raises an exception if it is. This ensures that invalid inputs are handled gracefully.
- **Prefix Check**: The function uses the `startswith` method to check if the path begins with the root. If it does, the root is stripped from the path, and the remaining part is returned.
- **Exception Handling**: If the root is not a prefix of the path, the function raises a `ValueError` to indicate that the root could not be removed from the path.

This solution efficiently handles various edge cases and ensures robustness by validating inputs and checking for the required conditions before performing any operations.