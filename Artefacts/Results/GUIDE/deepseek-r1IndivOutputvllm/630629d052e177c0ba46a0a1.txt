

```python
import hashlib
from publickey import PublicKey

def verify_relayable_signature(public_key, doc, signature):
    """
    Verify the signed XML elements to have confidence that the claimed
    author did actually generate this message.
    
    Args:
        public_key (bytes): The public key bytes of the signature.
        doc (str): The document to be signed.
        signature (bytes): The signature to verify.
        
    Returns:
        bool: True if the signature is valid, False otherwise.
    """
    # Create a hash of the public key and document
    combined = public_key + doc.encode('utf-8')
    hash digest = hashlib.sha256(combined).digest()
    
    # Create a signature object with the public key
    sig = hashlib.new('sha256')
    sig.update(public_key)
    sig.update(digest)
    public_key_bytes = sig.digest()
    
    # Convert the public key bytes back to a string
    public_key_str = public_key_bytes.decode('utf-8')
    
    return public_key_str == public_key

def test_verify_relayable_signature():
    """
    Unit tests for the verify_relayable_signature function.
    """
    # Test case 1: Valid signature
    public_key = b'valid_key'
    doc = "test document"
    signature = verify_relayable_signature(public_key, doc, b'valid_signature')
    assert signature is True, "Invalid signature should have failed"
    
    # Test case 2: Invalid signature
    public_key = b'valid_key'
    doc = "test document"
    signature = verify_relayable_signature(public_key, doc, b'invalid_signature')
    assert signature is False, "Valid signature should have passed"
    
    # Test case 3: Different public key
    public_key = b'different_key'
    doc = "test document"
    signature = verify_relayable_signature(public_key, doc, b'valid_signature')
    assert signature is False, "Different public key should fail"
    
    print("All tests passed")

if __name__ == "__main__":
    pytest.main()
```

This implementation:
1. Takes a public key, document, and signature as input
2. Creates a combined hash of the public key and document
3. Uses the public key to create a signature object
4. Updates the signature object with the document
5. Compares the resulting public key with the provided public key
6. Returns True if they match, False otherwise

The unit tests cover:
- Valid signature with correct public key
- Invalid signature with correct public key
- Correct signature with different public key

To run the tests:
```bash
pytest verify_relayable_signature.py -v
```