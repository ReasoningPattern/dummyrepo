

To solve this problem, we need to create a function that modifies a dictionary by replacing the value at one register with the value from another register and then deleting the second register. This requires careful handling of the dictionary keys to ensure data integrity and correct behavior.

### Approach
The approach involves the following steps:
1. **Retrieve the Value**: First, we obtain the value associated with the second register (`register_value`).
2. **Replace the Value**: We then update the value at the first register (`register_number`) with the retrieved value.
3. **Delete the Second Register**: Finally, we remove the entry corresponding to the second register from the dictionary.

This approach ensures that we do not lose any data and maintain the integrity of the dictionary structure. By following this sequence, we avoid potential issues that could arise from deleting a key before using its value.

### Solution Code

```python
def _replace_register(flow_params, register_number, register_value):
    """
    Replace the value of flow_params[register_number] with flow_params[register_value]
    and delete flow_params[register_value].
    """
    value = flow_params[register_value]
    flow_params[register_number] = value
    del flow_params[register_value]
```

### Explanation
- **Retrieve the Value**: The function starts by retrieving the value associated with `register_value` using `flow_params[register_value]`.
- **Replace the Value**: The value at `flow_params[register_number]` is then updated with the retrieved value using `flow_params[register_number] = value`.
- **Delete the Second Register**: Finally, the function deletes the entry corresponding to `register_value` using `del flow_params[register_value]`.

This method ensures that the value from the second register is transferred to the first register, and the second register is removed from the dictionary, all while maintaining the correct order of operations to preserve data integrity.