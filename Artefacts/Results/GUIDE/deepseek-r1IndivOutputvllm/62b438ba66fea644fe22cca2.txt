

To solve this problem, we need to merge any node values corresponding to duplicate keys in a list of nodes. If there are colliding keys with non-dict values, the last value remains. The function should handle nested structures and merge them recursively.

### Approach
The function `deep_merge_nodes` takes a list of nodes, where each node is a dictionary with a single key-value pair. The goal is to merge values with the same key, keeping the last value if they are non-dict types. If both values are dictionaries, they should be merged recursively.

1. **Initialization**: Start with an empty dictionary to hold the merged nodes.
2. **Iteration**: For each node in the input list, extract the key-value pair.
3. **Key Check**: For each key, check if it already exists in the merged dictionary.
   - If the key does not exist, add it with the current value.
   - If the key exists, check if both the existing and current values are dictionaries. If they are, merge them recursively. Otherwise, keep the last value.
4. **Recursion**: Use recursion to handle nested dictionaries, ensuring that all levels are merged appropriately.

### Solution Code
```python
def deep_merge_nodes(nodes):
    """
    Merge any node values corresponding to duplicate keys and return the result.
    If there are colliding keys with non-MappingNode values, the last value remains.
    """
    merged = {}
    for node in nodes:
        key = next(iter(node.keys()))
        current_value = node[key]
        if key in merged:
            existing_value = merged[key]
            if isinstance(existing_value, dict) and isinstance(current_value, dict):
                # Merge the two dictionaries
                merged[key] = deep_merge_nodes({existing_value, current_value})
            else:
                # Keep the last value if one or both are not dictionaries
                merged[key] = current_value
        else:
            merged[key] = current_value
    return merged
```

### Explanation
- **Initialization**: An empty dictionary `merged` is created to store the merged results.
- **Iteration**: Each node in the input list is processed. The key-value pair is extracted from each node.
- **Key Check**: For each key, the function checks if the key already exists in `merged`.
  - If the key does not exist, it is added with the current value.
  - If the key exists, the function checks if both the existing and current values are dictionaries. If they are, it merges them recursively. If not, it keeps the last value.
- **Recursion**: The function `deep_merge_nodes` is called recursively to handle nested dictionaries, ensuring that all levels are merged correctly.

This approach ensures that all duplicate keys are merged, with the last value taking precedence for non-dictionary types, and nested structures are handled recursively.