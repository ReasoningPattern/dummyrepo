

To solve this problem, we need to create a method that normalizes all units of time to integers. The goal is to ensure that each component of the time (years, months, days, hours, minutes, seconds, and microseconds) is represented as an integer. 

### Approach
The approach involves creating a new datetime object that represents the same date and time but without microseconds. This ensures that all time components are integers. The `replace()` method from Python's `datetime` module is used to create a new datetime object where the microseconds are set to zero. This effectively normalizes the time to integer values.

### Solution Code

```python
from datetime import datetime

class Time:
    def __init__(self, datetime_obj):
        self.datetime = datetime_obj

    def normalized(self):
        """
        Normalize all units of time to integers by returning a new datetime object
        without microseconds.
        """
        return self.datetime.replace(microsecond=0)
```

### Explanation
1. **Initialization**: The `Time` class is initialized with a datetime object, which is stored in an instance variable `datetime`.
2. **Normalization Method**: The `normalized` method uses the `replace()` method to create a new datetime object. The `microsecond` parameter is set to zero, effectively discarding the microseconds and converting the time to an integer value in terms of seconds.

This approach ensures that all time components are represented as integers, providing a normalized view of the datetime object.