

To solve this problem, we need to create a function that reads a file and returns a text buffer. A text buffer is a data structure that holds the text content of a file, often used for rendering or displaying text in applications. 

### Approach
The approach involves the following steps:
1. **File Handling**: Open the file specified by `file_name` using the given `encoding` parameter. This ensures that the file is read correctly regardless of its encoding.
2. **Content Reading**: Read the entire content of the file using a `with` statement to ensure the file is properly closed after reading.
3. **Exception Handling**: Handle potential exceptions such as `FileNotFoundError` and `UnicodeDecodeError` to ensure the function gracefully handles unexpected issues.
4. **Text Buffer Creation**: Return the read content as a text buffer. For this solution, we assume the existence of a `TextBuffer` class that can encapsulate the text content.

### Solution Code
```python
from .text_buffer import TextBuffer

def file_to_textbuffer(file_name, encoding):
    """
    Load a file toward a text buffer.
    
    Args:
        file_name (str): The name of the file to load.
        encoding (str): The encoding to use when reading the file.
        
    Returns:
        TextBuffer: A text buffer containing the file's content.
        
    Raises:
        FileNotFoundError: If the specified file is not found.
        UnicodeDecodeError: If decoding the file fails.
    """
    try:
        with open(file_name, 'r', encoding=encoding) as f:
            content = f.read()
        return TextBuffer(content)
    except FileNotFoundError:
        raise
    except UnicodeDecodeError as e:
        raise ValueError(f"Could not decode file: {e}")
```

### Explanation
- **File Handling**: The function uses a `with` statement to open and read the file. This ensures that the file is closed automatically after reading, even if an error occurs.
- **Content Reading**: The `read()` method is used to get the entire content of the file as a string.
- **Exception Handling**: The function includes try-except blocks to catch and handle `FileNotFoundError` and `UnicodeDecodeError`. If a file is not found or decoding fails, the function raises an appropriate exception.
- **Text Buffer Creation**: The read content is passed to the `TextBuffer` constructor, which encapsulates the text content. This allows the text buffer to be used wherever a `TextBuffer` object is expected.

This approach ensures that the function is robust, handles potential errors, and provides a clean interface for obtaining text content in the form of a text buffer.