import base64
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.backends import default_backend

def verify_relayable_signature(public_key, doc, signature):
    """
    Verify the signed XML elements to have confidence that the claimed author did actually generate this message.
    
    Parameters:
    public_key (str): PEM formatted public key.
    doc (str): The XML document to be verified.
    signature (str): Base64-encoded signature of the document.
    
    Returns:
    bool: True if the signature is valid, False otherwise.
    """
    # Decode the signature from base64
    decoded_signature = base64.b64decode(signature)
    
    # Load the public key
    public_key_obj = serialization.load_pem_public_key(public_key, backend=default_backend())
    
    # Compute the hash of the document
    hash_obj = hashes.Hash(hashes.SHA256(), backend=default_backend())
    hash_obj.update(doc.encode('utf-8'))
    hash_value = hash_obj.finalize()
    
    # Sign the hash with the public key
    signed_hash = public_key_obj.sign(
        hash_value,
        padding.PKCS1v15(),
        hashes.SHA256()
    )
    
    # Compare the signed hash with the decoded signature
    return signed_hash == decoded_signature