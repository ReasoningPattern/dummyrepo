

```python
import unittest
from io import StringIO
import sys

class ArgumentValidator:
    deprecated_args = {'old_arg', 'deprecated_flag'}

    def validate_arg_deprecation(self, cli_args, answer_file_args):
        """
        Validates and prints the deprecated arguments.

        :param cli_args: the dict of arguments from cli
        :param answer_file_args:  the dict of arguments from files
        """
        found_deprecated = []
        for arg in cli_args:
            if arg in self.deprecated_args:
                found_deprecated.append(f"CLI argument '{arg}' is deprecated.")
        for arg in answer_file_args:
            if arg in self.deprecated_args:
                found_deprecated.append(f"Answer file argument '{arg}' is deprecated.")
        for msg in found_deprecated:
            print(msg)
        return found_deprecated

class TestValidateArgDeprecation(unittest.TestCase):
    def test_no_deprecated_args(self):
        validator = ArgumentValidator()
        cli_args = {}
        answer_file_args = {}
        with StringIO() as buf:
            sys.stdout = buf
            validator.validate_arg_deprecation(cli_args, answer_file_args)
            sys.stdout = sys.__stdout__
            self.assertEqual(buf.getvalue(), "")

    def test_cli_deprecated_arg(self):
        validator = ArgumentValidator()
        cli_args = {'old_arg': 'value'}
        answer_file_args = {}
        expected_output = "CLI argument 'old_arg' is deprecated.\n"
        with StringIO() as buf:
            sys.stdout = buf
            validator.validate_arg_deprecation(cli_args, answer_file_args)
            sys.stdout = sys.__stdout__
            self.assertEqual(buf.getvalue(), expected_output)

    def test_answer_file_deprecated_arg(self):
        validator = ArgumentValidator()
        cli_args = {}
        answer_file_args = {'deprecated_flag': 'value'}
        expected_output = "Answer file argument 'deprecated_flag' is deprecated.\n"
        with StringIO() as buf:
            sys.stdout = buf
            validator.validate_arg_deprecation(cli_args, answer_file_args)
            sys.stdout = sys.__stdout__
            self.assertEqual(buf.getvalue(), expected_output)

    def test_both_sources_have_deprecated_args(self):
        validator = ArgumentValidator()
        cli_args = {'old_arg': 'value'}
        answer_file_args = {'deprecated_flag': 'value'}
        expected_output = "CLI argument 'old_arg' is deprecated.\nAnswer file argument 'deprecated_flag' is deprecated.\n"
        with StringIO() as buf:
            sys.stdout = buf
            validator.validate_arg_deprecation(cli_args, answer_file_args)
            sys.stdout = sys.__stdout__
            self.assertEqual(buf.getvalue(), expected_output)

if __name__ == '__main__':
    unittest.main()
```