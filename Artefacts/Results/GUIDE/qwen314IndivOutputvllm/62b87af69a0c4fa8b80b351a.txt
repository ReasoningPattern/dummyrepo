

```python
import unittest

def is_fill_compute_el(obj):
    """
    Check whether the obj class has the fill and compute methods.
    """
    return (
        hasattr(obj, 'fill') and
        hasattr(obj, 'compute') and
        callable(obj.fill) and
        callable(obj.compute)
    )

class TestIsFillComputeEl(unittest.TestCase):
    def test_has_both_methods(self):
        class TestClass:
            def fill(self): pass
            def compute(self): pass
        obj = TestClass()
        self.assertTrue(is_fill_compute_el(obj))
    
    def test_missing_fill(self):
        class MissingFill:
            def compute(self): pass
        obj = MissingFill()
        self.assertFalse(is_fill_compute_el(obj))
    
    def test_missing_compute(self):
        class MissingCompute:
            def fill(self): pass
        obj = MissingCompute()
        self.assertFalse(is_fill_compute_el(obj))
    
    def test_missing_both(self):
        class MissingBoth:
            pass
        obj = MissingBoth()
        self.assertFalse(is_fill_compute_el(obj))
    
    def test_attributes_not_callable(self):
        class NotCallable:
            fill = 5
            compute = "hello"
        obj = NotCallable()
        self.assertFalse(is_fill_compute_el(obj))
```