

```python
import functools
from collections import OrderedDict

def mru_cache(maxsize=128, typed=False):
    """
    Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Most Recently Used (MRU)
    algorithm.
    """
    def decorator(func):
        cache = OrderedDict()

        def _make_key(args, kwargs, typed):
            key = []
            for arg in args:
                if typed:
                    key.append((arg, type(arg)))
                else:
                    key.append(arg)
            for k in sorted(kwargs.keys()):
                v = kwargs[k]
                if typed:
                    key.append((k, v, type(v)))
                else:
                    key.append((k, v))
            return tuple(key)

        def wrapper(*args, **kwargs):
            key = _make_key(args, kwargs, typed)
            if key in cache:
                # Move to end to mark as most recently used (LRU behavior)
                cache.move_to_end(key)
                return cache[key]
            else:
                result = func(*args, **kwargs)
                # Add to cache
                cache[key] = result
                if len(cache) > maxsize:
                    # Evict least recently used (first item)
                    cache.popitem(last=False)
                return result
        return wrapper
    return decorator
```