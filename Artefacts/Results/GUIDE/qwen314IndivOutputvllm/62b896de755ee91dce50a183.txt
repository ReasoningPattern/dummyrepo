

```python
import unittest
from datetime import datetime
from dateutil.parser import parse
from dateutil.tz import gettz
from dateutil.parser._parser import ParserError

class TestParseFunction(unittest.TestCase):
    def test_tzinfos_mapping(self):
        tzinfos = {"BRST": -7200, "CST": gettz("America/Chicago")}
        dt = parse("2012-01-19 17:21:00 BRST", tzinfos=tzinfos)
        self.assertEqual(dt.tzinfo.utcoffset(None).total_seconds(), -7200)
        dt = parse("2012-01-19 17:21:00 CST", tzinfos=tzinfos)
        self.assertEqual(dt.tzinfo.zone, "America/Chicago")

    def test_ignoretz_parameter(self):
        dt = parse("2020-01-01 12:00:00 UTC", ignoretz=True)
        self.assertIsNone(dt.tzinfo)

    def test_default_parameter(self):
        default_dt = datetime(2020, 1, 1)
        result = parse("2020-01-02", default=default_dt)
        self.assertEqual(result.day, 2)

    def test_parser_error_on_invalid_format(self):
        with self.assertRaises(ParserError):
            parse("invalid date string")

    def test_fuzzy_with_tokens_returns_tuple(self):
        result = parse("2020-01-01 12:00:00 some text", fuzzy_with_tokens=True)
        self.assertIsInstance(result, tuple)
        self.assertIsInstance(result[0], datetime)
        self.assertIsInstance(result[1], tuple)

if __name__ == '__main__':
    unittest.main()
```