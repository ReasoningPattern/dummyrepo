

```python
class InventoryValidator:
    def __init__(self, spec_version):
        self.spec_version = spec_version

    def validate(self, inventory, extract_spec_version=False):
        """
        Validate a given inventory. If extract_spec_version is True then will look at the type value to determine the specification version. In the case that there is no type value or it isn't valid, then other tests will be based on the version given in self.spec_version. (D)
        """
        if extract_spec_version:
            if 'type' in inventory:
                type_str = inventory['type']
                if type_str.startswith('inventory/v'):
                    spec_version = type_str.split('inventory/v')[1]
                else:
                    # Invalid type format, use self.spec_version
                    spec_version = self.spec_version
            else:
                # No type, use self.spec_version
                spec_version = self.spec_version
        else:
            spec_version = self.spec_version

        # Example validation logic based on spec_version
        if spec_version == '1.0':
            if 'name' not in inventory:
                raise ValueError("Missing 'name' field for spec version 1.0")
        elif spec_version == '2.0':
            if 'id' not in inventory:
                raise ValueError("Missing 'id' field for spec version 2.0")
        else:
            # Default checks
            if 'name' not in inventory:
                raise ValueError("Missing 'name' field")

        return True
```