

```python
import unittest
from unittest.mock import patch, Mock
from typing import Optional
import requests

USER_AGENT = 'MyApp/1.0'

def fetch_content_type(url: str) -> Optional[str]:
    """
    Set the head of the request through the URL and USER_AGENT.
    """
    try:
        response = requests.head(url, headers={'User-Agent': USER_AGENT}, timeout=10)
        response.raise_for_status()
        return response.headers.get('Content-Type')
    except requests.RequestException:
        return None

class TestFetchContentType(unittest.TestCase):

    @patch('requests.head')
    def test_valid_url(self, mock_head):
        mock_response = Mock()
        mock_response.headers = {'Content-Type': 'text/html'}
        mock_response.raise_for_status.return_value = None
        mock_head.return_value = mock_response

        result = fetch_content_type('http://example.com')
        self.assertEqual(result, 'text/html')

    @patch('requests.head')
    def test_url_without_content_type(self, mock_head):
        mock_response = Mock()
        mock_response.headers = {}
        mock_response.raise_for_status.return_value = None
        mock_head.return_value = mock_response

        result = fetch_content_type('http://example.com')
        self.assertIsNone(result)

    @patch('requests.head')
    def test_http_error(self, mock_head):
        mock_response = Mock()
        mock_response.raise_for_status.side_effect = requests.HTTPError()
        mock_head.return_value = mock_response

        result = fetch_content_type('http://example.com')
        self.assertIsNone(result)

    @patch('requests.head')
    def test_connection_error(self, mock_head):
        mock_head.side_effect = requests.ConnectionError()
        result = fetch_content_type('http://example.com')
        self.assertIsNone(result)
```