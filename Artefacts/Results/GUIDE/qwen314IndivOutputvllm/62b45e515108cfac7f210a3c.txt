

```python
import os
import pytest
from pathlib import Path

class TestOCFLStorageRoot:
    def test_initialize_creates_required_directories(self, tmpdir):
        storage_root = tmpdir.mkdir("ocfl_storage")
        root_path = str(storage_root)
        
        class OCFLStorageRoot:
            def __init__(self, path):
                self.path = path
            
            def initialize(self):
                os.makedirs(os.path.join(self.path, "objects"), exist_ok=False)
                os.makedirs(os.path.join(self.path, "storage"), exist_ok=False)
        
        ocfl = OCFLStorageRoot(root_path)
        ocfl.initialize()
        
        assert os.path.exists(os.path.join(root_path, "objects"))
        assert os.path.exists(os.path.join(root_path, "storage"))

    def test_initialize_fails_if_directory_exists(self, tmpdir):
        storage_root = tmpdir.mkdir("ocfl_storage")
        root_path = str(storage_root)
        
        class OCFLStorageRoot:
            def __init__(self, path):
                self.path = path
            
            def initialize(self):
                os.makedirs(os.path.join(self.path, "objects"), exist_ok=False)
                os.makedirs(os.path.join(self.path, "storage"), exist_ok=False)
        
        # Pre-create directories to force failure
        os.makedirs(os.path.join(root_path, "objects"))
        os.makedirs(os.path.join(root_path, "storage"))
        
        ocfl = OCFLStorageRoot(root_path)
        with pytest.raises(OSError):
            ocfl.initialize()

    def test_initialize_sets_correct_permissions(self, tmpdir):
        storage_root = tmpdir.mkdir("ocfl_storage")
        root_path = str(storage_root)
        
        class OCFLStorageRoot:
            def __init__(self, path):
                self.path = path
            
            def initialize(self):
                os.makedirs(os.path.join(self.path, "objects"), exist_ok=False)
                os.makedirs(os.path.join(self.path, "storage"), exist_ok=False)
        
        ocfl = OCFLStorageRoot(root_path)
        ocfl.initialize()
        
        objects_dir = os.path.join(root_path, "objects")
        storage_dir = os.path.join(root_path, "storage")
        
        # Check that directories are writable
        assert os.access(objects_dir, os.W_OK)
        assert os.access(storage_dir, os.W_OK)

class OCFLStorageRoot:
    def __init__(self, path):
        self.path = path
    
    def initialize(self):
        """
        Create and initialize a new OCFL storage root.
        """
        # Create required directory structure
        os.makedirs(os.path.join(self.path, "objects"), exist_ok=False)
        os.makedirs(os.path.join(self.path, "storage"), exist_ok=False)
        
        # Additional initialization steps could be added here
        # such as creating manifest files, setting up versioning, etc.
```