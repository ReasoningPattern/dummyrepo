

```python
import re
from typing import Tuple, Set

def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:
    """
    Find tags in text.

    Tries to ignore tags inside code blocks.

    Optionally, if passed a "replacer", will also replace the tag word with the result
    of the replacer function called with the tag word.

    Returns a set of tags and the original or replaced text.
    """
    parts = re.findall(r'```.*?```|[^`]+', text, re.DOTALL)
    tags = set()
    modified_parts = []

    for part in parts:
        if part.startswith('```') and part.endswith('```'):
            modified_parts.append(part)
        else:
            found_tags = re.findall(r'\b\w+\b', part)
            tags.update(found_tags)
            if replacer:
                if found_tags:
                    pattern = r'\b(' + '|'.join(re.escape(tag) for tag in found_tags) + r')\b'
                    def replace_match(match):
                        return replacer(match.group(1))
                    modified_part = re.sub(pattern, replace_match, part)
                else:
                    modified_part = part
            else:
                modified_part = part
            modified_parts.append(modified_part)

    reconstructed_text = ''.join(modified_parts)
    return tags, reconstructed_text
```