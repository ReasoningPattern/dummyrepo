

```python
class LFUCache:
    def __init__(self, capacity):
        self.capacity = capacity
        self.cache = {}  # key: (value, frequency)
        self.freq_map = {}  # frequency: set of keys
        self.min_freq = 0

    def popitem(self):
        """
        Remove and return the `(key, value)` pair least frequently used.
        """
        if not self.cache:
            raise KeyError("Cache is empty")

        # Retrieve the least frequent keys
        least_freq_keys = self.freq_map[self.min_freq]
        key = least_freq_keys.pop()
        if not least_freq_keys:
            del self.freq_map[self.min_freq]
            self.min_freq += 1

        # Remove the key from the cache and update frequency map
        value, freq = self.cache.pop(key)
        return key, value
```