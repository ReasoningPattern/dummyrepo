

```python
def get_nested_custom_and_control_args(self, args):
    """
    Split input arguments to control nested and custom.

    Controls arguments: control the IR behavior. These arguments
        will not be put into the spec yml file
    Nested arguments: are used by the Ansible playbooks and will be put
        into the spec yml file.
    Custom arguments: Custom ansible variables to be used instead of the
        normal nested usage.

    :param args: the collected list of args.
    :return: (dict, dict): flat dicts (control_args, nested_args)
    """
    control_args = {}
    nested_args = {}

    for arg in args:
        # Assuming each argument is a dictionary with 'name', 'value', and 'type' keys
        # where 'type' indicates the category of the argument
        arg_type = arg.get('type', 'nested')
        arg_name = arg['name']
        arg_value = arg['value']

        if arg_type == 'control':
            control_args[arg_name] = arg_value
        elif arg_type == 'custom':
            # Custom arguments are treated as nested but marked separately
            nested_args[arg_name] = arg_value
        else:
            # Default to nested if type is not specified
            nested_args[arg_name] = arg_value

    return control_args, nested_args
```