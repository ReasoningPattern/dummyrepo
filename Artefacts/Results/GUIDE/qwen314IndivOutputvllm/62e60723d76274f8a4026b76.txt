

```python
import unittest
from datetime import tzinfo

class Time:
    def __init__(self, hours, minutes, seconds, nanoseconds, tz=None):
        self.hours = hours
        self.minutes = minutes
        self.seconds = seconds
        self.nanoseconds = nanoseconds
        self.tz = tz

    @classmethod
    def from_ticks(cls, ticks, tz=None):
        """
        Create a time from ticks (nanoseconds since midnight).

        :param ticks: nanoseconds since midnight
        :type ticks: int
        :param tz: optional timezone
        :type tz: datetime.tzinfo

        :rtype: Time

        :raises ValueError: if ticks is out of bounds
        (0 <= ticks < 86400000000000)
        """
        if not (0 <= ticks < 86400000000000):
            raise ValueError("ticks out of bounds")
        total_seconds = ticks // 1_000_000_000
        nanoseconds = ticks % 1_000_000_000
        hours = total_seconds // 3600
        remaining_seconds = total_seconds % 3600
        minutes = remaining_seconds // 60
        seconds = remaining_seconds % 60
        return cls(hours, minutes, seconds, nanoseconds, tz=tz)


class TestTimeFromTicks(unittest.TestCase):

    def test_valid_ticks(self):
        # Test 0
        time = Time.from_ticks(0)
        self.assertEqual(time.hours, 0)
        self.assertEqual(time.minutes, 0)
        self.assertEqual(time.seconds, 0)
        self.assertEqual(time.nanoseconds, 0)

        # Test 123456789
        time = Time.from_ticks(123456789)
        self.assertEqual(time.hours, 0)
        self.assertEqual(time.minutes, 0)
        self.assertEqual(time.seconds, 0)
        self.assertEqual(time.nanoseconds, 123456789)

        # Test 3600000000000 (1 hour)
        time = Time.from_ticks(3600000000000)
        self.assertEqual(time.hours, 1)
        self.assertEqual(time.minutes, 0)
        self.assertEqual(time.seconds, 0)
        self.assertEqual(time.nanoseconds, 0)

    def test_invalid_ticks(self):
        with self.assertRaises(ValueError):
            Time.from_ticks(-1)
        with self.assertRaises(ValueError):
            Time.from_ticks(86400000000000)
        with self.assertRaises(ValueError):
            Time.from_ticks(86400000000001)

    def test_edge_cases(self):
        max_ticks = 86400000000000 - 1
        time = Time.from_ticks(max_ticks)
        total_seconds = max_ticks // 1_000_000_000
        nanoseconds = max_ticks % 1_000_000_000
        hours = total_seconds // 3600
        remaining_seconds = total_seconds % 3600
        minutes = remaining_seconds // 60
        seconds = remaining_seconds % 60
        self.assertEqual(time.hours, hours)
        self.assertEqual(time.minutes, minutes)
        self.assertEqual(time.seconds, seconds)
        self.assertEqual(time.nanoseconds, nanoseconds)
```