

```python
class InventoryValidator:
    def validate_version_inventories(self, version_dirs):
        """
        Each version SHOULD have an inventory up to that point.

        Also keep a record of any content digests different from those in the root inventory
        so that we can also check them when validating the content.

        version_dirs is an array of version directory names and is assumed to be in
        version sequence (1, 2, 3...).
        """
        errors = []
        digest_discrepancies = {}

        if not version_dirs:
            return {'errors': errors, 'digest_discrepancies': digest_discrepancies}

        # Load root inventory
        root_dir = version_dirs[0]
        root_inventory = self._load_inventory(root_dir)
        if not root_inventory:
            errors.append(f"Root inventory missing in {root_dir}")
            return {'errors': errors, 'digest_discrepancies': digest_discrepancies}

        previous_inventory = root_inventory

        for version_dir in version_dirs[1:]:
            current_inventory = self._load_inventory(version_dir)
            if not current_inventory:
                errors.append(f"Inventory missing in {version_dir}")
                continue

            # Check if current inventory is a superset of previous
            for digest in previous_inventory:
                if digest not in current_inventory:
                    errors.append(f"Missing digest {digest} in {version_dir} inventory (expected from previous version)")
            previous_inventory = current_inventory

            # Check for digest discrepancies compared to root
            for digest, metadata in current_inventory.items():
                if digest in root_inventory and metadata != root_inventory[digest]:
                    if digest not in digest_discrepancies:
                        digest_discrepancies[digest] = []
                    digest_discrepancies[digest].append(version_dir)

        return {'errors': errors, 'digest_discrepancies': digest_discrepancies}

    def _load_inventory(self, dir_name):
        # Placeholder for actual implementation, e.g., reading a JSON file
        # This is a mock implementation for demonstration purposes
        # In a real scenario, this would read the inventory file from the given directory
        # For example, return a dictionary of content digests
        # Here, we return a dummy structure for testing
        return {
            "content_digests": {
                "digest1": "metadata1",
                "digest2": "metadata2"
            }
        }
```