

```python
import unittest

class Validator:
    def validate_length_args(self, args):
        """
        Check if value of the given args is not longer than length specified. 
        :param args: The received arguments.
        """
        for key, value in args.items():
            if len(value) > self.max_lengths.get(key, 0):
                raise ValueError(f"Argument '{key}' exceeds maximum allowed length.")
        return True

class TestValidateLengthArgs(unittest.TestCase):
    def setUp(self):
        self.validator = Validator()
        self.validator.max_lengths = {'username': 10, 'password': 20}

    def test_valid_args(self):
        args = {'username': 'user123', 'password': 'pass1234567890'}
        self.assertTrue(self.validator.validate_length_args(args))

    def test_invalid_args(self):
        args = {'username': 'user12345678901', 'password': 'pass'}
        with self.assertRaises(ValueError):
            self.validator.validate_length_args(args)

    def test_missing_max_length(self):
        args = {'email': 'test@example.com'}
        self.validator.max_lengths = {}
        with self.assertRaises(ValueError):
            self.validator.validate_length_args(args)

    def test_no_args(self):
        args = {}
        self.assertTrue(self.validator.validate_length_args(args))
```