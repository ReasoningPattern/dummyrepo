

```python
import xmlsec

def verify_relayable_signature(public_key, doc, signature):
    """
    Verify the signed XML elements to have confidence that the claimed
    author did actually generate this message.
    """
    try:
        # Parse the XML document
        doc_tree = xmlsec.parse_doc(doc)
        
        # Load the public key
        key = xmlsec.Key.load(public_key, xmlsec.KeyDataFormat.PEM, None)
        
        # Create a transform context
        ctx = xmlsec.TransformContext(doc_tree)
        
        # Verify the signature
        if xmlsec.verify(doc_tree, key, ctx):
            return True
        else:
            return False
    except xmlsec.Error as e:
        # Handle XMLSec errors
        print(f"XMLSec error: {e}")
        return False
    except Exception as e:
        # Handle other exceptions
        print(f"Verification failed: {e}")
        return False
```