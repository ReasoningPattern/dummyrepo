import unittest
from unittest.mock import MagicMock

class TestProtocolHandlers(unittest.TestCase):
    def test_protocol_version_1_returns_handler_v1(self):
        class MockClass:
            HandlerV1 = MagicMock()
            HandlerV2 = MagicMock()
            HandlerV3 = MagicMock()
        
        result = MockClass.protocol_handlers(protocol_version=1)
        MockClass.HandlerV1.assert_called_once()
        self.assertEqual(result, MockClass.HandlerV1())

    def test_protocol_version_2_returns_handler_v2(self):
        class MockClass:
            HandlerV1 = MagicMock()
            HandlerV2 = MagicMock()
            HandlerV3 = MagicMock()
        
        result = MockClass.protocol_handlers(protocol_version=2)
        MockClass.HandlerV2.assert_called_once()
        self.assertEqual(result, MockClass.HandlerV2())

    def test_protocol_version_3_returns_handler_v3(self):
        class MockClass:
            HandlerV1 = MagicMock()
            HandlerV2 = MagicMock()
            HandlerV3 = MagicMock()
        
        result = MockClass.protocol_handlers(protocol_version=3)
        MockClass.HandlerV3.assert_called_once()
        self.assertEqual(result, MockClass.HandlerV3())

    def test_default_protocol_version_returns_latest_handler(self):
        class MockClass:
            HandlerV1 = MagicMock()
            HandlerV2 = MagicMock()
            HandlerV3 = MagicMock()
        
        result = MockClass.protocol_handlers()
        MockClass.HandlerV3.assert_called_once()
        self.assertEqual(result, MockClass.HandlerV3())

    def test_invalid_protocol_version_raises_value_error(self):
        class MockClass:
            HandlerV1 = MagicMock()
            HandlerV2 = MagicMock()
            HandlerV3 = MagicMock()
        
        with self.assertRaises(ValueError):
            MockClass.protocol_handlers(protocol_version=4)

class ProtocolManager:
    @classmethod
    def protocol_handlers(cls, protocol_version=None):
        """
        Different forms of Bolt protocol handlers are returned based on the value of protocol_version.
        """
        if protocol_version == 1:
            return cls.HandlerV1()
        elif protocol_version == 2:
            return cls.HandlerV2()
        elif protocol_version == 3:
            return cls.HandlerV3()
        else:
            if protocol_version is not None:
                raise ValueError(f"Unsupported protocol version: {protocol_version}")
            return cls.HandlerV3()