import functools
from collections import OrderedDict

def lru_cache(maxsize=128, typed=False):
    """
    Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Least Recently Used (LRU)
    algorithm.
    """
    def decorator(func):
        cache = OrderedDict()

        def wrapper(*args):
            # Generate a key based on arguments and typed flag
            if typed:
                key = tuple((arg, type(arg)) for arg in args)
            else:
                key = args

            if key in cache:
                # Move the accessed item to the end (most recently used)
                cache.move_to_end(key)
                return cache[key]
            # Compute the result if not in cache
            result = func(*args)
            # Add the result to the cache
            cache[key] = result
            # Evict the least recently used item if cache is full
            if len(cache) > maxsize:
                cache.popitem(last=False)
            return result

        return functools.wraps(func)(wrapper)
    return decorator