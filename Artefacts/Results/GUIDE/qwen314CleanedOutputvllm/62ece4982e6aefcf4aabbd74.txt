import os
import shutil
from pathlib import Path
from typing import Optional, Union, PosixPath

def prepare_repository_from_archive(
    archive_path: str,
    filename: Optional[str] = None,
    tmp_path: Union[PosixPath, str] = "/tmp",
) -> str:
    """
    Given an existing archive_path, uncompress it.
    Returns a file repo url which can be used as origin url.

    This does not deal with the case where the archive passed along does not exist.
    @param archive_path : archive file path
    @param filename: File name
    @param tmp_path: Temporary file path
    @return Repo URL
    """
    tmp_path = Path(tmp_path) if isinstance(tmp_path, str) else tmp_path
    if filename is None:
        base_name = os.path.basename(archive_path)
        root, _ = os.path.splitext(base_name)
        target_dir = root
    else:
        target_dir = filename
    target_path = tmp_path / target_dir
    shutil.unpack_archive(archive_path, str(target_path))
    return f"file://{target_path}"