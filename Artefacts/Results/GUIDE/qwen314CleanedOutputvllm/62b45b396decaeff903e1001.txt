import unittest

class TestAmendBzparams(unittest.TestCase):
    def test_add_bug_ids_to_empty_params(self):
        handler = BzParamsHandler()
        params = {}
        bug_ids = [1, 2, 3]
        expected = {'bug_ids': [1, 2, 3]}
        result = handler.amend_bzparams(params, bug_ids)
        self.assertEqual(result, expected)

    def test_append_bug_ids_to_existing_params(self):
        handler = BzParamsHandler()
        params = {'bug_ids': [4, 5]}
        bug_ids = [6, 7]
        expected = {'bug_ids': [4, 5, 6, 7]}
        result = handler.amend_bzparams(params, bug_ids)
        self.assertEqual(result, expected)

    def test_single_bug_id_as_integer(self):
        handler = BzParamsHandler()
        params = {}
        bug_id = 8
        expected = {'bug_ids': [8]}
        result = handler.amend_bzparams(params, bug_id)
        self.assertEqual(result, expected)

    def test_params_with_other_keys(self):
        handler = BzParamsHandler()
        params = {'other_key': 'value'}
        bug_ids = [9]
        expected = {'other_key': 'value', 'bug_ids': [9]}
        result = handler.amend_bzparams(params, bug_ids)
        self.assertEqual(result, expected)

class BzParamsHandler:
    def amend_bzparams(self, params, bug_ids):
        """
        Amend the Bugzilla params
        """
        # Ensure bug_ids is a list
        if not isinstance(bug_ids, list):
            bug_ids = [bug_ids]
        # Add or extend the 'bug_ids' key in params
        if 'bug_ids' in params:
            params['bug_ids'].extend(bug_ids)
        else:
            params['bug_ids'] = bug_ids
        return params