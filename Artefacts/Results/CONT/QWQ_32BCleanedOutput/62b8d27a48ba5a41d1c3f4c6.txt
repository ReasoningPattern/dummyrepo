import functools

def cached(cache, key=hashkey, lock=None):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            k = key(func, *args, **kwargs)
            if k in cache:
                return cache[k]
            if lock is not None:
                lock.acquire()
            try:
                if k not in cache:
                    result = func(*args, **kwargs)
                    cache[k] = result
            finally:
                if lock is not None:
                    lock.release()
            return cache[k]
        return wrapper
    return decorator