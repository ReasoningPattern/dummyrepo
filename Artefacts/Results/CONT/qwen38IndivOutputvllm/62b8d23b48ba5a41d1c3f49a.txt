

```python
def mru_cache(maxsize=128, typed=False):
    def decorator(func):
        cache = {}
        order = []
        def wrapper(*args, **kwargs):
            if typed:
                args_key = tuple((type(arg), arg) for arg in args)
                kwargs_key = tuple((k, type(v), v) for k, v in kwargs.items())
            else:
                args_key = args
                kwargs_key = tuple(sorted(kwargs.items()))
            key = (args_key, kwargs_key)
            if key in cache:
                order.remove(key)
                order.insert(0, key)
                return cache[key]
            else:
                if len(cache) >= maxsize:
                    last_key = order.pop()
                    del cache[last_key]
                order.insert(0, key)
                result = func(*args, **kwargs)
                cache[key] = result
                return result
        return wrapper
    return decorator
```