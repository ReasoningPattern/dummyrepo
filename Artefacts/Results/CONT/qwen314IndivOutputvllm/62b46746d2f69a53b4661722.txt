

```python
def absorb(self, args):
    """
    Given an `args` sequence of expressions, return a new list of expression applying absorption.
    """
    result = []
    for expr in args:
        if isinstance(expr, list) and expr[0] == '+':
            new_terms = []
            for term in expr[1:]:
                if isinstance(term, list) and term[0] == '*':
                    product_terms = term[1:]
                    for pt in product_terms:
                        if pt in expr[1:]:
                            result.append(pt)
                            break
                    else:
                        new_terms.append(term)
                else:
                    new_terms.append(term)
            if new_terms:
                result.append(['+', *new_terms])
        elif isinstance(expr, list) and expr[0] == '*':
            new_factors = []
            for factor in expr[1:]:
                if isinstance(factor, list) and factor[0] == '+':
                    sum_factors = factor[1:]
                    for sf in sum_factors:
                        if sf in expr[1:]:
                            result.append(sf)
                            break
                    else:
                        new_factors.append(factor)
                else:
                    new_factors.append(factor)
            if new_factors:
                result.append(['*', *new_factors])
        else:
            result.append(expr)
    return result
```