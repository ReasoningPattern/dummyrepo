def cachedmethod(cache, key=hashkey, lock=None):
	"""
	Returns a decorator function that can call a result in the cache.
	"""
	def decorator(func):
		def wrapper(*args, **kwargs):
			# Acquire lock if provided
			if lock is not None:
				lock.acquire()
			# Generate key using the provided key function
			key_arg = key(*args, **kwargs)
			# Check if the result is in the cache
			if key_arg in cache:
				return cache[key_arg]
			# Compute the result
			result = func(*args, **kwargs)
			# Store the result in the cache
			cache[key_arg] = result
			# Release the lock
			if lock is not None:
				lock.release()
			return result
		return wrapper
	return decorator