from collections import deque

def mru_cache(maxsize=128, typed=False):
    """
    Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Most Recently Used (MRU)
    algorithm.
    """
    def decorator(func):
        cache = {}
        order = deque()

        def wrapper(*args, **kwargs):
            # Generate the key based on the function's arguments and keyword arguments
            key = (args, kwargs)
            # Check if the key is in the cache
            if key in cache:
                # Update the order of usage
                order.appendleft(key)
            else:
                # Add new key to the cache
                order.append(key)
                cache[key] = func(*args, **kwargs)
            # Check if the cache exceeds the maximum size
            if len(cache) > maxsize:
                # Remove the least recently used item
                oldest = order.popleft()
                del cache[oldest]
            return cache[key]

        return wrapper

    return decorator