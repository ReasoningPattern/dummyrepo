
Okay, I need to write the Python function strip_root as described. Let's see. The function takes a path and a root, and removes the root from the path. If it fails, throw an exception. The return type is a path without the root.

First, I need to figure out how to remove the root from the path. So, for example, if the path is '/home/user/docs' and the root is '/home', then the result should be 'user/docs'. But if the root is not a prefix of the path, like if the path is '/home/user' and the root is '/home/user/', then maybe it's supposed to remove the root? Wait, the problem says "remove root from path". So maybe the root is a prefix, and we need to remove it. But how to handle cases where the root is longer than the path?

Wait, the function says if it fails, throw an exception. So maybe the root is a prefix of the path. So the function should check if the root is a prefix of the path. If not, raise an exception. Then, return the path without the root.

So the steps are:

1. Check if the root is a prefix of the path. If not, raise an exception.
2. Otherwise, return the path without the root.

But how to check if the root is a prefix? In Python, you can use the startswith method. So path.startswith(root). But wait, if the root is empty, or the path is empty, maybe that's a problem. But the function's docstring doesn't mention handling those cases. The problem says to throw an exception if it fails. So perhaps the function assumes that the root is a valid prefix.

So the code would be:

def strip_root(path, root):
    if not path.startswith(root):
        raise ValueError(f"Root {root} is not a prefix of {path}")
    return path[len(root):]

Wait, but what if the root is empty? Like, if root is an empty string. Then path.startswith('') is always True, so it would return path[len(''):], which is the entire path. But maybe the function expects that the root is non-empty. But the problem doesn't specify, so perhaps we should handle it as per the docstring.

But the docstring says "If fails, throw exception". So if the root is not a prefix, throw an exception. So the code would be as above.

So the code would be:

def strip_root(path, root):
    if not path.startswith(root):
        raise ValueError(f"Root {root} is not a prefix of {path}")
    return path[len(root):]

But wait, what if the root is longer than the path? For example, path is 'a', root is 'ab'. Then path.startswith(root) is False, so the exception is raised. That's correct.

So that's the code. Now, the user wants the code in Python markdown format, but the instructions say to output only the code generated, in Python markdown format. But Python markdown is just the code. So the answer is the code as written.
