
Okay, I need to write a Python function called parse_version that takes a string and returns a tuple of integers. The docstring says it converts a string concatenated with dots into integers. So, for example, if the input is "1.2.3", the output should be (1, 2, 3).

First, I should split the string by the dot characters. But wait, what if there are multiple dots? Like "1.2.3.4"? The split would split into ['1', '2', '3', '4'], which is correct. So splitting on '.' should work.

Then, each part needs to be converted to an integer. So I can use a list comprehension to split the string and then map each part to int.

Wait, but what if the input is empty or has invalid characters? The problem statement doesn't mention handling those cases, so maybe the function assumes that the input is valid. So I don't need to handle errors here.

So the steps are: split the input string on '.', convert each part to integer, and return as a tuple.

So the code would be something like:

def parse_version(s: str) -> tuple[int, ...]:
    return tuple(int(part) for part in s.split('.'))

Wait, but the return type is tuple[int, ...], which is a tuple of integers. The generator expression would create a tuple of integers, which is exactly what's needed.

Testing with "1.2.3" would give (1, 2, 3). That seems correct.

I think that's all. No need for any extra packages since it's a simple string manipulation.
