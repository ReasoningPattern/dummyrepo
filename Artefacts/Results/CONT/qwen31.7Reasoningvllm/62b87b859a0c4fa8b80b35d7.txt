
Okay, let's see. The user wants me to generate Python code based on the given function signature and docstring. The function is called to_csv, and it's part of a class. The docstring mentions that it's deprecated and converts graph points to CSV.

First, I need to understand the parameters. The function takes 'self', 'separator' with a default of comma, and 'header' which can be None. The docstring says that iterables are converted to tables, and for a Graph, use ToCSV class.

Looking at the context, the class has methods like _update, request, _cur_context, etc. The to_csv method is part of the class. The user provided the docstring, so I need to implement the function.

Wait, the user says not to include any explanation, reasoning, or markdown. Just output the code. So I need to write the function as per the signature and docstring.

The function is supposed to convert the graph's points to CSV. The parameters are separator and header. The docstring mentions that header is the first string, and new line is added automatically. So the function should generate a CSV string.

But how to handle the conversion of the graph's points. The class has a points attribute, which is a graph. So maybe the function needs to take the points and convert them into a CSV format.

But the function is called to_csv, and the parameters are separator and header. So the code would need to process the points, convert each point's coordinates to a string separated by the separator, then join them with the separator, and then add a newline if header is not None.

Wait, the docstring says that header is the first string of the output, and a new line is added automatically. So if header is not None, the first line is header, then the data lines.

But how to handle the data lines. For each point, convert its coordinates to a string, then join with the separator. Then, if header is not None, prepend that to the data.

But the function is part of a class. So the code would need to access the points attribute of the instance. Assuming that the points are a list of tuples or similar, and each tuple is a coordinate.

So the steps would be:

1. Check if header is None. If not, add it as the first line.
2. For each point in the points list:
   a. Convert each coordinate to a string.
   b. Join them with the separator.
   c. Add to the data lines.
3. Return the CSV string.

But the function is supposed to return the CSV string. So the code would generate that.

But the user provided the docstring, and the function is to_csv. So the code would be something like:

def to_csv(self, separator=",", header=None):
    # Check if header is None
    if header is None:
        header = ""
    # Generate the CSV string
    csv_content = []
    if header:
        csv_content.append(header)
    for point in self.points:
        # Convert each coordinate to string
        row = [str(coord) for coord in point]
        # Join with separator
        row_str = separator.join(row)
        csv_content.append(row_str)
    return "\n".join(csv_content)

Wait, but the docstring says that the header is the first string, and a new line is added automatically. So the code above would add the header as the first line, then each point as a line. Then, the join with "\n" would add the newlines between lines. But the header is already added as the first line, so the join would create the correct structure.

But maybe the header is a string, and the function should prepend it. So the code would be as above.

But the function is part of a class. So the code would be written within the class.

But the user's code has the function definition with the parameters. So the code would be:

def to_csv(self, separator=",", header=None):
    """
    Convert graph's points to CSV.

    *separator* delimits values, the default is comma.

    *header*, if not None, is the first string of the output (new line is added automatically).
    """
    # Implementation here
    # Assuming self.points is a list of tuples, each tuple is a coordinate
    # Convert each point to a string separated by separator
    # Then build the CSV string
    if header is None:
        header = ""
    csv_data = [header]
    for point in self.points:
        row = [str(coord) for coord in point]
        csv_data.append(separator.join(row))
    return "\n".join(csv_data)

But wait, the docstring says that the header is the first string, and new line is added automatically. So the code above adds the header as the first line, then each point as a line, and joins with newlines. That should be correct.

But the function is deprecated, so maybe the code should include a warning. But the user didn't mention that. The docstring says it's deprecated, but the code doesn't have to include that. The user's instruction is to generate the code based on the function signature and docstring, not to add warnings.

So the code would be as above.

But the user's code has the function definition with the parameters. So the code would be:

def to_csv(self, separator=",", header=None):
    """
    Convert graph's points to CSV.

    *separator* delimits values, the default is comma.

    *header*, if not ``None``, is the first string of the output (new line is added automatically).
    """
    # Implementation here
    if header is None:
        header = ""
    csv_data = [header]
    for point in self.points:
        row = [str(coord) for coord in point]
        csv_data.append(separator.join(row))
    return "\n".join(csv_data)

But wait, the function is supposed to convert the graph's points to a table. So the points are probably a list of tuples, and each tuple is a coordinate. So the code is correct.

So the final code would be as above. The user wants the code in Python markdown format, but since it's just code, it's just the code block.
