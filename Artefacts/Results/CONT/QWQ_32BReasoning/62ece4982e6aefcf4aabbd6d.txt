Okay, I need to write a Python function called string_to_int that converts a string into a number based on a given alphabet. Let's see. The function takes two parameters: the string and the alphabet list. The goal is to map each character in the string to its index in the alphabet and then compute the numerical value as if it's a number in a base equal to the length of the alphabet. 

Wait, right. So each position in the string represents a digit in a base system. For example, if the alphabet has 10 letters, each character's position is like a digit in base 10. But the first thing I should check is that all characters in the string are actually in the alphabet. Oh, but the problem says the string consists of letters in the alphabet, so maybe I don't have to handle errors here. 

Hmm, the steps would be:

1. Determine the base, which is the length of the alphabet. 
2. For each character in the string, find its index in the alphabet. That's the digit value. 
3. Compute the total number by iterating through each character, multiplying the current total by the base and adding the digit's value. 

Wait, the order might be important. Let's think of an example. Suppose the alphabet is ['a', 'b', 'c'], so base 3. The string 'ab' would be like '10' in base 3. Wait, no. Wait, the first character is 'a' which is index 0, then 'b' is 1? Or maybe the first position is the highest place value. Like, the first character is the most significant digit. 

Yes, exactly. So for each character in the string from left to right, each step multiplies the current total by the base and adds the digit. 

Wait, let's see an example. Let's say alphabet is ['a','b'], so base 2. The string 'ba' would be '10' in binary, which is 2. Let's see: 

First character 'b' is index 1. Then current total is 1. Next character 'a' is index 0. So 1 * 2 + 0 = 2. Correct. 

Another example: alphabet is ['0','1','2'], base 3. The string '012' would be 0*(3^2) +1*(3) + 2. Wait, but the way of calculation: 

Start with 0. 

First digit '0' (index 0): total becomes 0. 

Then next digit '1' (index 1): total = 0 *3 +1 =1. 

Then '2' (index 2): total = 1*3 +2 =5. 

Which would be 0*9 +1*3 +2 =5, which is correct. 

So the algorithm is correct. 

So the steps in code: 

Initialize total to 0. 

Loop over each character in the input string:

- Find the index of the character in the alphabet. 

- total = total * base + index. 

So the code structure would be something like:

def string_to_int(string, alphabet):
    base = len(alphabet)
    total = 0
    for char in string:
        digit = alphabet.index(char)
        total = total * base + digit
    return total

Wait, but what if the alphabet has duplicate elements? Because the problem says the string consists of letters in the alphabet, but the alphabet is a list. So maybe each character in the string must be present in the alphabet. But if the alphabet has duplicates, then index might not be correct. 

Hmm, but the problem's docstring says that the alphabet is a list of letters. Presumably, each letter in the alphabet is unique. Otherwise, the conversion isn't well-defined. So I can assume that the alphabet is a list with unique elements. So the index method will work. 

Therefore the code should be as above. 

Wait, but in Python, the index method returns the first occurrence. So if the alphabet has duplicates, that's a problem. But the problem probably expects that the alphabet is a list of unique characters. So the code is okay. 

So I think that's the solution. Let's test with some examples. 

Test case 1: alphabet = ['a', 'b', 'c'], string 'ba' should be (1)*3 +0 =3? Wait no, wait the first character is 'b' (index 1), then 'a' (index 0). So total after first character is 1, then 1 *3 +0 =1. Wait, that would be 1? Hmm, wait the string 'ba' would be 1 followed by 0. So in base 3, that would be 1*3 +0 =3? Wait no, 1*3^1 +0*3^0 =3. Wait, but the code gives 1*3 +0 =3. So the code is correct. 

Another test case: the example I had before with '012' in base 3. The code returns 0, then 0*3 +1 =1, then 1*3 +2 =5. Which is correct. 

Another test case: empty string? The function should return 0, since 0*base^0 is 0. 

Wait if the string is empty, the loop runs zero times, so total remains 0. 

What about a single character? Like 'a' in the first example's alphabet, returns 0. 

Okay, seems correct. 

So the code is as written above. The parameters are annotated, so the function should be correct. 

I need to make sure that the code is properly formatted. So the function uses the parameters correctly. 

Wait, the function's parameters are string: str and alphabet: List[str]. So in Python, we need to import List from typing. But the problem says to generate the code without any explanations, just the code. So the code as written, using the index method. 

So the final code is:

def string_to_int(string: str, alphabet: List[str]) -> int:
    base = len(alphabet)
    total = 0
    for char in string:
        total = total * base + alphabet.index(char)
    return total
