Okay, I need to write a Python function called files_list_from_zipfile that takes a zip_path as an argument and returns the list of files in that zip file. Let me think about how to approach this.

First, I remember that Python has the zipfile module which can be used to work with zip archives. So I should import that. The function needs to read the zip file and get the list of files inside it.

The steps would be: open the zip file using zipfile.ZipFile, then get the list of names of the files in the zip. But wait, how exactly do I get the list? The ZipFile object has an inflist method, maybe? Or is it namelist()? Oh right, the namelist() method returns all the members of the zip as a list of strings.

So the plan is: import zipfile, then in the function, open the zip file at zip_path in read mode. Then call namelist() on the ZipFile object and return that list.

But I should handle exceptions? The docstring doesn't mention error handling, just to return the files. Maybe the function is expected to just work, so perhaps no error handling is needed here. But maybe the user expects that. Hmm, the problem says to generate code based on the given signature and docstring, so perhaps just the basic case.

Wait, also, when opening the file, in Python it's better to use a context manager (with statement) to ensure the file is properly closed. So the code would look something like:

import zipfile

def files_list_from_zipfile(zip_path):
    with zipfile.ZipFile(zip_path, 'r') as zipf:
        return zipf.namelist()

That should do it. Let me double-check. The function opens the zip file in read mode, uses namelist() which gives all the entries, and returns that list. Yes, that should work. I think that's all.
