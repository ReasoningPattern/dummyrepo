Okay, I need to generate Python code for the function list_of_file_names based on the given docstring. The function is supposed to create and return a new IniType complex type using cli.ListOfFileNames(). Let me think about what that entails.

First, the function takes two parameters: settings_dirs and spec_option. The docstring mentions creating an IniType via cli.ListOfFileNames, so I should look into what that method requires. Probably, cli.ListOfFileNames is a function that returns some kind of type for parsing command-line options, maybe related to file names.

Wait, in Python, especially with libraries like argparse or maybe something from the `six` package or another framework, there might be a cli module. But since the code is supposed to be self-contained, I'll assume that cli is a module that's already imported, and ListOfFileNames is a class or function within it.

The function's purpose is to create an IniType, which is a complex type. So maybe IniType is part of the cli module as well? Or perhaps it's a typo and they mean the return type is an instance created by cli.ListOfFileNames.

Alternatively, maybe the function is part of a framework like TraitsUI or another system that uses complex types for configuration. Let's think that cli.ListOfFileNames is a factory function that takes parameters like the settings directories and the spec option to create this type.

Looking at the parameters: settings_dirs could be a list of directories where the files are located, and spec_option might be a specification string that defines how the files should be parsed. So the code inside the function would probably call cli.ListOfFileNames with these arguments.

The docstring is brief, so the code should be straightforward. The function's body would simply return the result of calling cli.ListOfFileNames with the given parameters. Wait, but the parameters in the function are settings_dirs and spec_option. Does cli.ListOfFileNames take those as arguments? The name suggests it might take a specification, maybe the spec_option is part of that.

Alternatively, perhaps the IniType is created by passing these parameters to configure how the list of file names is handled. For example, maybe the settings_dirs are the directories to search for the files, and spec_option could be a regex or a format string.

Assuming that the cli.ListOfFileNames function requires these two parameters, the code would be as simple as:

return cli.ListOfFileNames(settings_dirs, spec_option)

But I need to make sure that the function is correctly structured. Let me outline the steps:

1. The function is defined with the two parameters.
2. The docstring is provided as given.
3. The body of the function calls cli.ListOfFileNames with the parameters and returns the result.

Therefore, the code should be:

def list_of_file_names(settings_dirs, spec_option):
    """
    Create and return a new IniType complex type via cli.ListOfFileNames()
    """
    return cli.ListOfFileNames(settings_dirs, spec_option)

Wait, but maybe there's more to it. Like, maybe the IniType requires some additional setup. But since the docstring says "via cli.ListOfFileNames()", that's probably the only step needed. So the code is straightforward. I'll go with that.
