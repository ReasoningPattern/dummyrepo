from functools import partial
from datetime import datetime
import six

def fromutc(self, dt):
    """
    Given a timezone-aware datetime in a given timezone, calculates a
    timezone-aware datetime in a new timezone.

    Since this is the one time that we *know* we have an unambiguous
    datetime object, we take this opportunity to determine whether the
    datetime is ambiguous and in a "fold" state (e.g. if it's the first
    occurrence, chronologically, of the ambiguous datetime).

    :param dt:
        A timezone-aware :class:`datetime.datetime` object.
    """
    dt_utc = dt.replace(tzinfo=None).astimezone(self.UTC)
    dt_wall = self._fromutc(dt_utc)
    self._fold_status(dt_utc, dt_wall)
    return dt_wall