import re
import datetime
from marshmallow import ValidationError

from dataclasses import dataclass
from enum import Enum
from typing import Pattern, Match
from serializable import serializable

@dataclass
class _LabelKey:
    pattern: Pattern
    validator: callable

@dataclass
class _LabelValue:
    pattern: Pattern
    validator: callable

def _validate_labels(labels: dict) -> None:
    """
    Validate labels by checking keys and values against regex patterns and validation functions.
    Raises marshmallow.ValidationError if validation fails.
    """
    if not isinstance(labels, dict):
        raise ValidationError("Labels must be a dictionary.")
    
    for key, value in labels.items():
        # Validate key
        if not re.fullmatch(_label_key_pattern, str(key)):
            raise ValidationError(
                _get_labels_regex().format(key=str(key)),
                key=_LabelKey(pattern=_label_key_pattern, validator=validate_key)
            )
        validate_key(key)
        
        # Validate value
        if not re.fullmatch(_label_value_pattern, str(value)):
            raise ValidationError(
                _get_labels_regex().format(value=str(value)),
                value=_LabelValue(pattern=_label_value_pattern, validator=validate_value)
            )
        validate_value(value)