from rdflib import Graph

def find_roots(graph: "Graph", prop: "URIRef", roots: Optional[Set["Node"]] = None) -> Set["Node"]:
    if roots is None:
        parents = set()
        for triple in graph:
            _, prop, parent = triple
            parents.add(parent)
        return {node for node in graph.nodes() if node not in parents}
    else:
        reverse_graph = {}
        for triple in graph:
            child, prop, parent = triple
            if parent not in reverse_graph:
                reverse_graph[parent] = set()
            reverse_graph[parent].add(child)
        current = set(roots)
        new_nodes = current.copy()
        while new_nodes:
            current_nodes = new_nodes.copy()
            new_nodes.clear()
            for node in current_nodes:
                if node in reverse_graph:
                    new_nodes.update(reverse_graph[node])
            current.update(new_nodes)
        return current