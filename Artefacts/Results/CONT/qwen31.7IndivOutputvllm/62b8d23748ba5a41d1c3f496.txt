

```python
def lfu_cache(maxsize=128, typed=False):
	"""
	Decorator to wrap a function with a memoizing callable that saves
	up to `maxsize` results based on a Least Frequently Used (LFU)
	algorithm.
	"""
	
	class LFUCache:
		def __init__(self, maxsize):
			self.maxsize = maxsize
			self.cache = {}
			self.freq = {}
		
		def __call__(self, func):
			def wrapper(*args, **kwargs):
				result = func(*args, **kwargs)
				if result in self.cache:
					self.freq[result] += 1
					return result
				self.cache[result] = 1
				self.freq[result] = 1
				if len(self.cache) > self.maxsize:
					min_freq = min(self.freq.values())
					for key in self.cache:
						if self.freq[key] == min_freq:
							del self.cache[key]
							del self.freq[key]
							break
				return result
			return wrapper
	return LFUCache(maxsize)
```