import time
from functools import wraps, OrderedDict

def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):
    """
    Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Least Recently Used (LRU)
    algorithm with a per-item time-to-live (TTL) value.
    """
    def decorator(func):
        cache = OrderedDict()
        @wraps(func)
        def wrapper(*args, **kwargs):
            key = (args, frozenset(kwargs.items())) if typed else (args, frozenset(kwargs.items()))
            current_time = timer()
            if key in cache:
                result, expiration = cache[key]
                if current_time < expiration:
                    cache.move_to_end(key)
                    return result
                else:
                    del cache[key]
            result = func(*args, **kwargs)
            expiration = current_time + ttl
            cache[key] = (result, expiration)
            cache.move_to_end(key)
            if len(cache) > maxsize:
                cache.popitem(last=False)
            return result
        return wrapper
    return decorator