import inspect
from zope.interface import providedBy, Invalid

def verifyObject(iface, candidate, tentative=False):
    """
    Verify that *candidate* might correctly provide *iface*.

    This involves:

    - Making sure the candidate claims that it provides the
      interface using ``iface.providedBy`` (unless *tentative* is `True`,
      in which case this step is skipped). This means that the candidate's class
      declares that it `implements <zope.interface.implementer>` the interface,
      or the candidate itself declares that it `provides <zope.interface.provider>`
      the interface

    - Making sure the candidate defines all the necessary methods

    - Making sure the methods have the correct signature (to the
      extent possible)

    - Making sure the candidate defines all the necessary attributes

    :return bool: Returns a true value if everything that could be
       checked passed.
    :raises zope.interface.Invalid: If any of the previous
       conditions does not hold.

    .. versionchanged:: 5.0
        If multiple methods or attributes are invalid, all such errors
        are collected and reported. Previously, only the first error was reported.
        As a special case, if only one such error is present, it is raised
        alone, like before.
    """
    errors = []
    if not tentative:
        if not iface.providedBy(candidate):
            errors.append(f"Candidate does not provide interface {iface}")
    for name, value in iface.__dict__.items():
        if inspect.isfunction(value):
            # Check method
            if not hasattr(candidate, name):
                errors.append(f"Missing method {name}")
                continue
            candidate_method = getattr(candidate, name)
            try:
                if inspect.signature(candidate_method) != inspect.signature(value):
                    errors.append(f"Method {name} has incorrect signature")
            except Exception as e:
                errors.append(f"Error checking signature for {name}: {e}")
        else:
            # Check attribute
            if not hasattr(candidate, name):
                errors.append(f"Missing attribute {name}")
    if errors:
        raise Invalid("\n".join(errors))
    return True