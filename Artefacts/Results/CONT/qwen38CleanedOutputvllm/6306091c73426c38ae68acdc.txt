import yaml
import jsonschema
from infrared import IRValidatorException

def validate_from_content(cls, spec_content=None):
    """
    validates that spec (YAML) content has all required fields

    :param spec_content: content of spec file
    :raise IRValidatorException: when mandatory data is missing in spec file
    :return: Dictionary with data loaded from a spec (YAML) file
    """
    if spec_content is None:
        raise ValueError("spec_content cannot be None")

    try:
        spec_dict = yaml.safe_load(spec_content)
    except yaml.YAMLError as e:
        raise IRValidatorException(f"Invalid YAML content: {e}")

    try:
        jsonschema.validate(instance=spec_dict, schema=cls.schema)
    except jsonschema.ValidationError as e:
        raise IRValidatorException(f"Validation error: {e}")

    return spec_dict