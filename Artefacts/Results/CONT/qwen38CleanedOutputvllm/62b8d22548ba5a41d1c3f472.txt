def hashkey(args, kwargs):
    return (args, tuple(sorted(kwargs.items())))

def cachedmethod(cache, key=hashkey, lock=None):
    def decorator(method):
        def wrapper(self, *args, **kwargs):
            key_val = key(args, kwargs)
            if lock:
                with lock:
                    if key_val in cache:
                        return cache[key_val]
                    result = method(self, *args, **kwargs)
                    cache[key_val] = result
                    return result
            else:
                if key_val in cache:
                    return cache[key_val]
                result = method(self, *args, **kwargs)
                cache[key_val] = result
                return result
        return wrapper
    return decorator