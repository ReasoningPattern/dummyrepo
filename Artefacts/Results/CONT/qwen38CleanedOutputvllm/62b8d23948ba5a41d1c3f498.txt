from collections import OrderedDict

def lru_cache(maxsize=128, typed=False):
    def decorator(func):
        cache = OrderedDict()
        def wrapper(*args, **kwargs):
            key = args if not typed else tuple((arg if isinstance(arg, tuple) else (arg,)) for arg in args)
            if key in cache:
                cache.move_to_end(key)
                return cache[key]
            result = func(*args, **kwargs)
            cache[key] = result
            if len(cache) > maxsize:
                cache.popitem(last=False)
            return result
        return wrapper
    return decorator