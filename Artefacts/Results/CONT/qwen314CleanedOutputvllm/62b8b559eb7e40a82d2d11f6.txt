def determineMetaclass(bases, explicit_mc=None):
    """
    Determine metaclass from 1+ bases and optional explicit __metaclass__
    """
    if explicit_mc is not None:
        return explicit_mc
    metas = [type(b) for b in bases]
    if len(set(metas)) == 1:
        return metas[0]
    for meta in metas:
        if all(issubclass(m, meta) for m in metas):
            return meta
    raise TypeError("metaclass conflict")