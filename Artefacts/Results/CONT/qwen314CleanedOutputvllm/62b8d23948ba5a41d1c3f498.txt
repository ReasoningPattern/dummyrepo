from collections import OrderedDict
import functools

def lru_cache(maxsize=128, typed=False):
    """
    Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Least Recently Used (LRU)
    algorithm.
    """
    def decorator(func):
        cache = OrderedDict()
        @functools.wraps(func)
        def wrapper(*args):
            if typed:
                key = tuple((arg, type(arg)) for arg in args)
            else:
                key = args
            if key in cache:
                value = cache.pop(key)
                cache[key] = value
                return value
            else:
                value = func(*args)
                cache[key] = value
                if len(cache) > maxsize:
                    cache.popitem(last=False)
                return value
        return wrapper
    return decorator