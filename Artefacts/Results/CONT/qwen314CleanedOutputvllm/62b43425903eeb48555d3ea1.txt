import re
from typing import Pattern

def _create_in_regex(self) -> Pattern:
    """
    Create the in-style parameter regular expression.

    Returns the in-style parameter regular expression (:class:`re.Pattern`).
    """
    if self._in_style == 'named':
        pattern = r':[a-zA-Z_][a-zA-Z0-9_]*'
    elif self._in_style == 'qmark':
        pattern = r'\?'
    elif self._in_style == 'format':
        pattern = r'%s'
    elif self._in_style == 'pyformat':
        pattern = r'%\([a-zA-Z_][a-zA-Z0-9_]*\)s'
    else:
        raise ValueError(f"Unsupported in_style: {self._in_style}")
    return re.compile(pattern)