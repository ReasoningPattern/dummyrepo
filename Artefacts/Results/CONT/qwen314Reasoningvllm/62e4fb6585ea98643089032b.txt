
Okay, I need to write a Python function called parse_version that takes a string and returns a tuple of integers. The docstring says it converts a dot-separated string into a tuple. So, for example, if the input is "1.2.3", the output should be (1, 2, 3).

First, I should split the input string by the dot character. The split method can be used here. Then, each part of the split needs to be converted to an integer. But wait, what if the string has leading zeros? Like "1.02.3"? The problem says nothing about that, so maybe we just convert them as is. The function's job is just to split and convert each part to int.

So the steps are: split the string into parts using '.', then map each part to an integer, and finally create a tuple from that.

But I need to make sure that the input is a valid string. However, the function's docstring doesn't mention error handling. So maybe it's assumed that the input is a properly formatted version string. So no need for error checking here.

So the code would be something like:

def parse_version(s: str) -> tuple[int, ...]:
    return tuple(int(part) for part in s.split('.'))

Wait, but what if the string is empty or has multiple dots in a row? Like "1..2"? The split method would result in empty strings. Then converting those to int would throw a ValueError. But again, the problem doesn't specify handling such cases, so perhaps the function is intended to work with properly formatted version strings as per standard practices. So the code should be straightforward.

So the code is as simple as splitting on dots and converting each part to int, then making a tuple. That's the core of the function. Let me check the example. For "1.2.3", split gives ['1','2','3'], then converted to integers. Yes.

I think that's all. So the code is as written.
