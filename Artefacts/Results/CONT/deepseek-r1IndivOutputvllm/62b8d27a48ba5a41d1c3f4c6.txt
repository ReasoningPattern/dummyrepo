

```
from functools import wraps
from threading import Lock

def cached(cache, key=hashkey, lock=None):
    """
    Returns a decorator function that saves the results in the cache
    """
    @wraps
    def decorator(func):
        def wrapper(*args, **kwargs):
            result = func(*args, **kwargs)
            return result
        return wrapper
    return decorator

def save_in_cache(func, cache, key=key, lock=lock):
    """
    A helper function to actually save the results to the cache
    """
    def wrapper(*args, **kwargs):
        result = None
        key = key(args, kwargs)
        if not lock or not lock.lock():
            try:
                result = cache.get(key)
                if result is None:
                    result = func(*args, **kwargs)
                    cache.set(key, result)
                return result
            finally:
                if lock and hasattr(lock, 'unlock'):
                    lock.unlock()
        return result
    return wrapper
```