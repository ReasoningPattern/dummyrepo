

To solve this problem, we need to create a function that converts filenames with wildcard characters into their equivalent regex patterns. The function should take a dictionary where the keys are filenames starting with a wildcard and return a new dictionary with these keys converted to regex patterns, while leaving the values unchanged.

### Approach
1. **Iterate Over the Dictionary**: We will iterate over each key-value pair in the input dictionary.
2. **Check for Wildcard**: For each key, check if it starts with a wildcard character '*'.
3. **Convert to Regex Pattern**: If the key starts with a wildcard, replace the '*' with a dot '.' to form a regex pattern. Additionally, escape any regex special characters to ensure the pattern is correctly interpreted.
4. **Construct New Dictionary**: Construct a new dictionary with the converted keys and the original values.
5. **Return the New Dictionary**: Finally, return the new dictionary with regex-converted keys.

### Solution Code
```python
import re

def regex_dict(item):
    new_dict = {}
    for key, value in item.items():
        if key.startswith('*'):
            new_key = re.escape(key.replace('*', '.'))  # Escape any regex special characters
            new_dict[new_key] = value
    return new_dict
```

### Explanation
- **Wildcard Conversion**: The function converts each filename starting with '*' into a regex pattern by replacing '*' with '.'. This allows the pattern to match any single character before the 'cpp' part.
- **Regex Escaping**: Using `re.escape()`, the function ensures that any special regex characters in the filename are properly escaped. This is crucial to prevent unintended regex behavior.
- **Dictionary Construction**: The function constructs a new dictionary with the converted regex keys and retains the original values from the input dictionary.

This approach efficiently transforms the wildcard keys into their regex equivalents, ensuring that the resulting dictionary can be used for accurate string matching using regex patterns.