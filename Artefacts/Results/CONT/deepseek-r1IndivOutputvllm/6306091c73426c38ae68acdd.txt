

```python
import os
import jsonschema
from six import string_types
from infrared import IRValidatorException

def validate_from_file(cls, yaml_file=None):
    """
    Loads & validates that a YAML file has all required fields

    :param yaml_file: Path to YAML file
    :raise IRValidatorException: when mandatory data is missing in file
    :return: Dictionary with data loaded from a YAML file
    """
    if not yaml_file:
        raise ValueError("yaml_file must be provided")

    with open(yaml_file, 'r', encoding='utf-8') as f:
        try:
            file_content = f.read()
        except (IOError, UnicodeDecodeError) as e:
            raise IRValidatorException(f"Failed to read YAML file: {e}")

        try:
            data = json.load(file_content)
        except json.JSONDecodeError:
            raise IRValidatorException("Invalid YAML content")

        # Assuming schema is imported or defined
        schema = jsonschema.load(open("schema.yaml"), pretty=True)

        required_fields = ['required_field1', 'required_field2', 'required_field3']
        missing_fields = [field for field in required_fields if field not in data]

        if missing_fields:
            raise IRValidatorException(
                f"Missing required fields: {', '.join(missing_fields)}"
            )

        return data
```