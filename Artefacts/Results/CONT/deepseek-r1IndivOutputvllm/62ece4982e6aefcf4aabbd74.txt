

To solve this problem, we need to create a Python function that extracts an archive from a given path and returns a URL pointing to the extracted contents. The function should handle various types of archives, including tar.gz, zip, and xz files, using the `shutil.unpack_archive` method for extraction.

### Approach
1. **Extract the Archive**: Use the `shutil.unpack_archive` method to handle different types of archives. This method is reliable and can extract files from various formats such as tar.gz, zip, and xz.
2. **Create Temporary Directory**: Extract the contents of the archive into a temporary directory to keep the extracted files isolated.
3. **Return URL**: Construct a URL pointing to the temporary directory where the extracted files are stored. This URL can be used as a repository URL.

### Solution Code

```python
import subprocess
import os
import tarfile
from typing import Optional, Union
import shutil

def prepare_repository_from_archive(
    archive_path: str,
    filename: Optional[str] = None,
    tmp_path: Union[PosixPath, str] = "/tmp",
) -> str:
    tmp_dir = os.path.join(tmp_path, "extracted")
    os.makedirs(tmp_dir, exist_ok=True)
    
    # Extract the archive
    shutil.unpack_archive(archive_path, tmp_dir)
    
    # Construct the URL
    return f"http://{tmp_dir}/"
```

### Explanation
1. **Temporary Directory Setup**: The function creates a temporary directory named "extracted" within the specified `tmp_path`. This directory is used to store the extracted contents of the archive.
2. **Archive Extraction**: The `shutil.unpack_archive` method is used to extract the contents of the archive. This method automatically detects the type of archive based on its extension and handles extraction for formats such as tar.gz, zip, and xz.
3. **URL Construction**: After extracting the archive, the function constructs a URL using the extracted directory path. This URL can be used to access the repository, assuming the extracted files are placed within the "extracted" directory.

This approach ensures that the function is efficient and handles various types of archives, providing a reliable way to create a repository URL from an extracted archive.