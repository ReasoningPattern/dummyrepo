

To solve this problem, we need to create a function that runs a list of commands using Python's `subprocess` module. The function should return the combined output (stdout and stderr) of all commands along with the return code of the last command. The function should also handle optional parameters such as verbose output and hiding stderr.

### Approach
1. **Command Execution**: Loop through each command in the provided list and execute it using `subprocess.run()`. This allows us to capture both stdout and stderr for each command.
2. **Output Collection**: Collect the output from each command into a combined result. This includes appending stdout and stderr from each command to a common structure.
3. **Verbose Output**: If the verbose flag is set, print the stdout of each command as it is generated. If stderr is also verbose, suppress printing stderr unless it is not hidden.
4. **Return Code**: Capture the return code of the last command in the list and include it in the result.
5. **Error Handling**: The function assumes that commands are valid and won't raise exceptions unless specified otherwise.

### Solution Code
```python
import subprocess

def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):
    combined_output = {'stdout': '', 'stderr': ''}
    for cmd in commands:
        proc = subprocess.run(
            cmd,
            args=args,
            cwd=cwd,
            env=env,
            capture_output=True,
            text=True
        )
        combined_output['stdout'] += proc.stdout
        combined_output['stderr'] += proc.stderr
        
        if verbose:
            print(proc.stdout)
        if hide_stderr and verbose:
            print(proc.stderr, flush=True)
        else:
            print(proc.stderr)
    return {
        'stdout': combined_output['stdout'],
        'stderr': combined_output['stderr'],
        'returncode': proc.returncode
    }
```

### Explanation
- **Command Execution**: The function uses `subprocess.run()` to execute each command. The `capture_output=True` and `text=True` parameters ensure that both stdout and stderr are captured as strings.
- **Output Collection**: The outputs from each command are accumulated into `combined_output`, which holds the combined stdout and stderr.
- **Verbose Output**: If verbose is True, stdout from each command is printed immediately after it is captured. If both verbose and hide_stderr are True, stderr is printed; otherwise, it is printed as well.
- **Return Code**: The return code of the last command is stored in the result and included in the returned dictionary.

This approach ensures that all commands are executed, their outputs are collected, and the results are returned in the specified format. The function handles optional parameters to control the verbosity and output of stderr.