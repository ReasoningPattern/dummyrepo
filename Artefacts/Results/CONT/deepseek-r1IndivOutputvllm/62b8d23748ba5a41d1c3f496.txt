

```python
from functools import wraps
from collections import OrderedDict

def lfu_cache(maxsize=128, typed=False):
    """
    Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Least Frequently Used (LFU)
    algorithm.
    """
    def decorator(func):
        wrapped = wraps(func)(lambda: func)
        
        if typed:
            cache = OrderedDict()
            cache_type = dict
        else:
            cache = OrderedDict()
            cache_type = None
        
        def wrapper(*args, **kwargs):
            key = id(args) if not args else args
            key = key if not kwargs else (key, kwargs)
            key = id(key) if not kwargs else key
            
            if key in cache:
                cache.move_to_end(key, last=False)
                if len(cache) > maxsize:
                    cache.popitem(last=False)
                    return wrapped()
            else:
                if len(cache) >= maxsize:
                    cache.popitem(last=False)
                
                cache[key] = wrapped()
                return cache[key]
        
        return wrapper
    
    return decorator
```