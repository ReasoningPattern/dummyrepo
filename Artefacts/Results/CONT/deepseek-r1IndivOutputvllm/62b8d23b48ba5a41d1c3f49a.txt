

```python
import functools

def mru_cache(maxsize=128, typed=False):
    """
    Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Most Recently Used (MRU)
    algorithm.
    """
    cls = MRUCache(maxsize, typed)
    return functools.wraps(original)(cls)

class MRUCache:
    def __init__(self, maxsize, typed):
        self.cache = {}
        self.maxsize = maxsize
        self.count = 0
        self.typing = typed

    def __call__(self, func):
        def wrapped(*args, **kwargs):
            if args or kwargs:
                self.count += 1
                if self.count > self.maxsize:
                    evicted = self._lru_evict()
                    self.cache.pop(evicted)
                key = self._hash_args(args, kwargs)
                if key in self.cache:
                    self.cache[key] = func(*args, **kwargs)
                else:
                    self.cache[key] = func(*args, **kwargs)
            return self.cache.get(key, None)
        return wrapped

    def _lru_evict(self):
        return next(iter(self.cache.keys()))

    def _hash_args(self, args, kwargs):
        return functools.creduce(lambda x, y: hash(y) if isinstance(y, tuple) else hash(y), args + list(kwargs.values()))
```