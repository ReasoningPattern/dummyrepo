

To solve this problem, we need to generate a Python function that retrieves a list of ignored files from the current directory using the Git command line interface, processes these files, and returns them as a comma-separated string. The function should ensure that only the ignored files are included, sorted lexicographically.

### Approach
1. **Retrieve File List**: Use the `git ls -l` command to get the list of all files in the current directory. This command provides the filenames in a structured format.
2. **Parse Output**: Capture the output from the Git command and split it into individual filenames.
3. **Filter Ignored Files**: Identify and filter out the ignored files. In Git, a file is considered ignored if it starts with a dot ('.') and is neither the root directory ('.') nor the parent directory ('..').
4. **Sort Files**: Sort the list of ignored files lexicographically to ensure a consistent order.
5. **Format Output**: Join the sorted list of filenames into a single string, with each filename separated by a comma.

### Solution Code
```python
import subprocess

def addignored(ignored):
    result = subprocess.run(['git', 'ls', '-l'], shell=False, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if result.stdout:
        filenames = [line.strip().split()[0] for line in result.stdout.split('\n')]
        ignored_files = [f for f in filenames if f.startswith('.') and f not in {'.', '..'}]
        ignored_files.sort()
        return ','.join(ignored_files)
    else:
        return ''
```

### Explanation
- **Retrieve File List**: The `subprocess.run` function is used to execute the Git command `git ls -l`. This command outputs the filenames of all files in the current directory.
- **Parse Output**: The output from the Git command is captured as a string and split into lines. Each line is then processed to extract the filename, which is the first element of the line.
- **Filter Ignored Files**: The filenames are checked to determine if they are ignored. A filename is considered ignored if it starts with a dot ('.') and is not one of the special cases ('.' or '..').
- **Sort Files**: The list of ignored files is sorted lexicographically to ensure a consistent order.
- **Format Output**: The sorted list of filenames is joined into a single string, with each filename separated by a comma, and returned as the result.

This approach ensures that the function efficiently retrieves, processes, and formats the list of ignored files as required.