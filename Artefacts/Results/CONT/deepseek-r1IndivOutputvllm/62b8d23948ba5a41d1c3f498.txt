

```python
import functools

def lru_cache(maxsize=128, typed=False):
    """
    Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Least Recently Used (LRU)
    algorithm.
    """
    def decorator(func):
        cache = {}
        usage = []
        def wrapper(*args, **kwargs):
            # Convert arguments to a hashable type
            args_tuple = functools.WRAPPER_ASSIGNMENTS(args, kwargs)
            if typed:
                # Validate argument types
                for arg_name, arg_value in args_tuple:
                    if not isinstance(arg_value, functools.WRAPPER_UPDATES[arg_name]):
                        raise TypeError(f"Argument {arg_name} must be an instance of {arg_name.__name__}, was {type(arg_value).__name__}")
            # Check cache
            if args_tuple in cache:
                # Update most recently used
                usage.pop(0)
                usage.append(args_tuple)
            else:
                # Compute result
                result = func(*args, **kwargs)
                # Update cache and usage
                cache[args_tuple] = result
                usage.append(args_tuple)
            return cache[args_tuple]
        # Manage cache order
        while len(usage) > maxsize:
            oldest = usage.pop(0)
            del cache[oldest]
        # Maintain usage order
        usage.append(args_tuple)
        return wrapper
    return decorator
```