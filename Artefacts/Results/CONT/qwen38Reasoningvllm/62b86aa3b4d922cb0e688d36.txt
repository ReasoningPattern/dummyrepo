
Okay, I need to generate the Python code for the _validate_labels function based on the given function signature and docstring. Let me start by understanding what the function is supposed to do. The docstring says it checks that keys and values in the given labels using validate_key() and validate_value(). 

First, I should recall that the function is part of a larger codebase with several other functions and variables already defined. The context mentions imported packages like dataclasses, enum, typing, re, datetime, marshmallow, serializable. Also, there are variables like _label_key_pattern, _label_value_pattern, _label_key_regex, _label_value_regex, _get_labels_regex(), validate_key(), validate_value(), and others. 

The function _validate_labels takes 'labels' as input, which is likely a dictionary. The task is to check each key and value in this dictionary. The existing functions validate_key and validate_value probably perform the actual validation using the regex patterns defined earlier.

So, the steps for _validate_labels would be:
1. Iterate over each key-value pair in the labels dictionary.
2. For each key, call validate_key(key) to check if it meets the criteria.
3. For each value, call validate_value(value) to check the value.
4. If any key or value fails validation, raise an exception (probably a ValueError or a custom exception).

But wait, the context mentions _label_key_pattern and _label_value_pattern, which are probably regex patterns. The functions validate_key and validate_value might use these patterns. Also, there's _get_labels_regex() which might return the regex for labels.

Wait, the function _validate_labels is supposed to check keys and values using validate_key and validate_value. So maybe the actual validation is done by those functions, and _validate_labels just iterates through the labels and calls them.

So the code for _validate_labels would look something like:

def _validate_labels(labels):
    """
    Check that keys and values in the given labels by validate_key() and validate_value().
    """
    if not isinstance(labels, dict):
        raise ValueError("Labels must be a dictionary")
    for key, value in labels.items():
        validate_key(key)
        validate_value(value)

But I need to make sure that the code uses the existing functions. Also, the context mentions that _label_key_regex and _label_value_regex are defined, so maybe validate_key and validate_value use those regex patterns. But since the user hasn't provided the implementations of validate_key and validate_value, I have to assume they are already defined elsewhere.

Wait, the user said to generate code based on the function signature and docstring. So the code should just implement the function as per the docstring, using the existing functions. So the code would loop through each key and value, call validate_key and validate_value on them.

But what about the regex patterns? The function _get_labels_regex() might be used, but the docstring doesn't mention that. The original function's docstring says it checks keys and values using validate_key and validate_value. So the code should just call those functions for each key and value.

So the code would be:

def _validate_labels(labels):
    """
    Check that keys and values in the given labels by validate_key() and validate_value().
    """
    if not isinstance(labels, dict):
        raise ValueError("Labels must be a dictionary")
    for key, value in labels.items():
        validate_key(key)
        validate_value(value)

But maybe the existing validate_key and validate_value functions already handle the regex checks. So this code is correct.

I should also check if the labels parameter is a dictionary. If not, raise an error. Then iterate through each key-value pair and validate them.

Yes, that's the plan. So the code would look like that. The user said not to include any explanations, just the code. So the final code is as above.
