Okay, I need to write a Python function called point_type based on the given signature and docstring. The function is supposed to dynamically generate a Point class. Let me think about how to approach this.

First, the function takes three arguments: name, fields, and srid_map. The docstring says it's for dynamically generating a Point class, so I'll probably need to create a new class each time this function is called.

I remember that in Python, I can use the types module, specifically type(), to create new classes dynamically. So I'll need to import type and maybe inspect modules to get the necessary base classes.

The function should create a new class with the given name. The class should inherit from Geometry, which is in the __main__ module. So I'll import __main__.Geometry.

Next, I need to add methods to this new class. The class should have get_srid(), get_type(), and get_coordinates(). 

For get_srid(), I'll loop through the srid_map and find the corresponding SRID for the field name. If it's not found, I'll raise a ValueError.

For get_type(), I'll check the field type. If it's 'text', return 'Point'. For other types, I'll need to create a subclass of either CartesianPoint or WGS84Point. I'll use a dictionary to map field types to the appropriate subclass. If the type isn't recognized, I'll raise a ValueError.

The get_coordinates() method will collect the fields that match the expected types (like x, y, etc.) and return them as a tuple. Again, if there are unexpected fields, I'll raise a ValueError.

I should also import the necessary modules: inspect to get the fields, and the subclass points like CartesianPoint and WGS84Point.

Wait, I need to make sure that the fields are correctly matched. Using inspect.getmembers on the fields dictionary should give me the names and types. Then, for each field, I'll check if the type matches one of the known types.

Putting it all together, I'll define the new class using type(), set its name, bases, and namespace. The namespace will include the methods I've defined.

I should test this function to make sure it creates the class correctly and initializes the methods properly. Also, I need to ensure that all necessary imports are included at the top of the file.

Hmm, I think I should also handle cases where the fields don't match expected types or srid isn't found. Raising appropriate errors will make the function robust.

Okay, I think I have a plan. Now, I'll write the code accordingly, making sure to include all the necessary imports and structure the function correctly.
