Okay, I need to generate Python code based on the given function signature and docstring. The function is called _group_files_by_xml_filename, and it takes three arguments: source, xmls, and files. The docstring says it groups files by xmls and returns data in dict format.

First, I should figure out what each parameter represents. The source is probably a directory or a list of files. Xmls and files might be lists or dictionaries containing XML filenames or file paths.

I think the function needs to iterate over each file in the source. For each file, it should check if it's an XML file. If it is, it should add the file to the corresponding XML entry in xmls, grouping them together.

I'll start by initializing a dictionary called grouped_files. Then, loop through each file in the source. For each file, determine if it's an XML file. Maybe using os.path.splitext to check the extension.

If the file is an XML, I'll get its base name without the extension. Then, I'll add the file path to the corresponding entry in xmls. If the XML entry doesn't exist, I'll create it.

After processing all files, the function should return the grouped_files dictionary.

I should also consider if files is a list of file paths or a dictionary. The code should handle both cases, but since the function is called with 'files' as the third argument, I'll assume files is a list. So, I'll loop through each file in files.

Wait, looking back, the function is called with source, xmls, and files. So, maybe source is the directory, xmls is a list of XML filenames, and files is a list of file paths. Or perhaps source is a list of files.

I think the function needs to process each file in 'files', check if it's an XML, and group them. So, the code will loop over each file in 'files', check if it ends with .xml, then group them into xmls.

I'll write the code step by step. Initialize grouped_files, loop through each file, check the extension, and add to the appropriate XML group.

I should also handle cases where a file isn't an XML, maybe by ignoring it or logging a warning, but the current code doesn't include error handling, so I'll stick to just adding non-XML files to the 'other' group.

Putting it all together, the function will return the grouped_files dictionary with XMLs as keys and lists of file paths as values.
