Okay, I need to generate Python code based on the given function signature and docstring. The function is called protocol_handlers and takes a class and an optional protocol version. The goal is to return a dictionary of handler classes keyed by their version tuples. 

First, I'll start by importing the necessary modules. From the context, I see that logging is imported, so I'll need to import the logging module.

Next, I'll define the function with the given signature. The function should check if the protocol_version is provided. If it is, it should look for handlers for exactly that version. If not, it should return all supported versions.

I notice that the class has attributes like self.PROTOCOL_VERSION and self.versions, so I'll use those. I'll create a dictionary to store the handlers. For each version in self.versions, I'll check if it matches the provided protocol_version or, if protocol_version is None, include it in the handlers.

I'll loop through each version in self.versions. If protocol_version is None, I'll add each version to the handlers. If a specific version is provided, I'll check if it's in the list and add it if so.

I'll use the logging module to warn the user if the specified protocol_version doesn't exist or isn't supported. This ensures that the function's behavior is clear to anyone using it.

Finally, I'll return the handlers dictionary. I'll make sure the code is clean and follows best practices, such as proper indentation and avoiding any unnecessary variables or imports beyond what's needed.
