Alright, I need to write a Python function called _parse_image_ref that takes an image_href string and returns a tuple with three elements: image_id, netloc, and use_ssl. The docstring explains that this function parses an image href, uses urllib, and raises a ValueError if there's an issue.

First, I'll import the urlparse module from urllib because it's used for parsing URLs. Wait, in Python 3, urllib is actually urllib.parse, so I should correct that. 

Next, I'll use urlparse to break down the image_href. The netloc is the network location part, which contains the domain. 

Now, I need to determine if SSL was used. SSL can be indicated in a few ways: with an 's' in the protocol (like https), via the netloc's path (like /s/ or /https/), or using the verify flag in urllib's requests session. But since this function is just parsing the href, maybe checking for the 's' in the scheme is sufficient. Alternatively, I could look for the presence of 's' in the netloc path, but that might not always be reliable. 

I'll check if the scheme includes 's' or 'SSl' or 'sSsl' to handle case variations. If any of these are present, set use_ssl to True; otherwise, False.

I'll structure the function by parsing the URL, extracting the components, and then determining the use_ssl flag based on the scheme. I'll make sure to return the tuple in the correct order and handle any potential errors by raising ValueError as documented.

Testing the function with examples like 'http://example.com/image.jpg' should return ('', 'example.com', False), while 'https://example.com/image.jpg' would return ('', 'example.com', True). Also, if the URL is invalid, the function should raise ValueError, which it already does.

I think that's all. Now, I'll write the code accordingly.
