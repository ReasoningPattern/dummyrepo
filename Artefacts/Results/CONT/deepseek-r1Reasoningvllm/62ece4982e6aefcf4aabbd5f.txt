Okay, I need to write a Python function called paging that takes a response list and a max_results integer. The goal is to return a generator that yields pages of the response, each containing up to max_results items. 

First, I should figure out how to split the response into chunks. The response is a list, so I can loop through it in steps. The step size would be max_results. For example, if max_results is 10, the first page would be items 0-9, the next 10-19, and so on.

I'll use a loop that starts at 0 and increments by max_results each time. For each iteration, I'll slice the response from the current index to current + max_results. But I need to make sure I don't go beyond the length of the response, so the end of the slice should be the minimum of current + max_results and len(response).

Since the function should return a generator, I'll use a yield statement inside the loop. That way, each chunk is yielded one by one.

Wait, what if the response is empty? Well, the generator will just yield nothing, which is correct. Also, if max_results is larger than the length of response, it will just yield the entire response as a single page.

I should also handle cases where max_results is zero or negative. Oh, but according to the docstring, max_results is the maximum number of objects, so it should be a positive integer. Maybe I should add a check, but the problem statement doesn't specify error handling, so perhaps it's beyond the scope.

Putting it all together, the function will loop from 0 to len(response) in steps of max_results, and for each step, yield the corresponding slice of the response list.

So the code will look like this: a for loop with i in range(0, len(response), max_results), and inside, yield response[i:i+max_results].

I think that's it. The function is straightforward once I break it down into steps.
