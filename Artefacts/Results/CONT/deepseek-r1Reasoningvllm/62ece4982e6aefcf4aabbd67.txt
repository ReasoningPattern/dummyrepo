Okay, I need to write a Python function called vertex3tuple that takes a list of vertices and returns a list of tuples. Each tuple should contain three points: the vertex itself and the two adjacent vertices. If the index goes out of bounds, I should wrap around to the beginning.

First, I'll think about how to handle each vertex. For each index i in the vertices list, the tuple should be (vertices[i], vertices[i-1], vertices[i+1]). But wait, what if i is 0? Then i-1 is -1, which is out of bounds. Similarly, if i is the last index, i+1 is out of bounds. So I need to handle these cases by using modulo to wrap around.

So for each i, the previous index is (i-1) % len(vertices) and the next index is (i+1) % len(vertices). That way, when i is 0, previous becomes len(vertices)-1, and when i is the last index, next becomes 0.

I'll loop through each index in the vertices list. For each i, create a tuple with vertices[i], vertices[(i-1) % n], and vertices[(i+1) % n], where n is the length of vertices.

Wait, what if the vertices list is empty or has only one element? The problem says it's a polygon, so probably vertices is a list with at least three points. But maybe I should handle cases where len(vertices) is 0 or 1 to avoid division by zero or index errors. However, the problem statement doesn't specify, so perhaps I can assume that vertices is a valid polygon with at least three points.

Putting it all together, the function will iterate over each vertex, compute the previous and next indices using modulo, and create the tuple accordingly. Then collect all these tuples into a list and return it.

So the code will look like this: initialize an empty list, loop over each i in range(len(vertices)), compute prev and next indices, append the tuple to the result list, and finally return the list.

I think that's it. Let me write the code now.
