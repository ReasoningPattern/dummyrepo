Okay, I need to write a Python function called _resolve_string that takes a matcher as an argument. The function's purpose is to get a value from the environment based on the matcher's group dictionary. The matcher has a name and an optional default value. If the variable isn't found and there's no default, it should raise an Error.

First, I'll look at the function signature. It's given as def _resolve_string(matcher):, so I just need to fill in the body.

The matcher is a dictionary with 'name' and 'default' keys. The 'name' is the variable name to look up in the environment, and 'default' is optional. So I'll extract these values.

I'll start by getting the 'name' from matcher['name'] and 'default' from matcher.get('default', None). Using get ensures that if 'default' isn't present, it defaults to None.

Next, I need to check if the environment has the 'name' variable. I'll access os.environ.get(name) to get the value. If it's None, that means the variable isn't defined, so I should raise an Error. I'll use raise Error(f"Environment variable {name} not found") for this.

If the variable exists, I'll return its value.

Putting it all together, the function will first extract the necessary values, check for the environment variable, and return or raise an error accordingly.

I should make sure to import the os module, but since the context says the package is imported, I don't need to add that in the code.

So the code will look like this: extract name and default, check environment, return or raise.
