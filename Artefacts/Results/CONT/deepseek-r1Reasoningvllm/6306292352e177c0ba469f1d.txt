Alright, I need to generate Python code based on the given function signature and docstring. Let me start by understanding what the function is supposed to do.

The function is called find_tags and takes two parameters: text of type str and replacer which is a callable with a default value of None. It returns a tuple containing a set of tags and the modified text.

From the docstring, I see that the function should find tags in the given text while trying to ignore those inside code blocks. If a replacer is provided, it should replace each tag with the result of the replacer function applied to the tag word.

I remember that in Python, a common way to identify tags is by using regular expressions. Tags often start with specific characters like #, @, $, etc., followed by a word character. So, I'll need to create a regex pattern that matches these tags.

I should import the necessary modules: re for regular expressions and urllib.parse for urlsplit, which can help identify code blocks within URLs. Also, I'll need to use the provided helper functions like decode_if_bytes and encode_if_text to ensure proper handling of text encoding.

The plan is to:

1. Compile a regex pattern that matches tags. The pattern should capture the tag word and also determine if it's inside a code block.
2. Iterate over each match in the text. For each match, check if it's inside a code block using urlsplit and the encode_if_text function.
3. If it's not inside a code block, add the tag to the set and replace it if a replacer is provided.
4. Replace the tag in the text using a callback function that applies the replacer if available.
5. Handle exceptions gracefully, such as UnicodeDecodeError, by ignoring any errors during processing.

I'll also need to define a helper function, is_code_block, which uses urlsplit to check if the current position in the text is within a code block. This function will be called for each match to determine if the tag should be ignored.

Putting it all together, I'll write the code, making sure to import all necessary modules and define the helper functions inside find_tags if needed. I'll test the code with some example text to ensure it works as expected, replacing tags outside code blocks and ignoring those inside.
