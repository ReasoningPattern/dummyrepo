Alright, I need to generate Python code based on the given function signature and docstring. The function is called validate_from_content, and it takes two parameters: cls and spec_content, with spec_content being optional. The docstring explains that this function validates that the YAML content has all required fields, raising an exception if any mandatory data is missing. It should return a dictionary with the loaded data.

First, I'll start by importing the necessary modules. Since the context mentions os, jsonschema, six, and infrared, I'll include those in the imports. Specifically, I'll need jsonschema to validate the schema, os for file operations, and six and infrared for any specific exceptions they might provide.

Next, I'll define the class. The class should inherit from six.string_types to be compatible with both Python 2 and 3, which is a common practice in Python projects. I'll name it SpecValidator.

Inside the class, the __init__ method is provided, but I don't need to modify it. However, I should override the validate_from_content method to include the validations. The method signature matches what's given: it takes cls and spec_content as parameters.

The first step in the method is to check if spec_content is None. If it is, I should raise an exception, probably an InvalidSpecificationError, which I can define as a subclass of ValueError. This will indicate that the spec content is missing.

Next, I'll validate the schema against the spec_content. I'll assume there's a schema defined in the SpecSchema class, perhaps in a separate file. Using jsonschema.load, I can load the schema, and then use the validator to check if spec_content is valid.

If the validation passes, I'll then attempt to load the data from spec_content. Since the docstring mentions returning a dictionary, I'll use json.loads to parse the YAML content into a Python dictionary and return it.

I should also handle exceptions during these steps. For example, if loading the schema fails, I'll catch the jsonschema.ValidationError and raise an InvalidSpecificationError with a message indicating the missing required fields.

I need to make sure that the code is properly indented and that all necessary exceptions are raised with meaningful messages. Also, I should ensure that the class is correctly structured within the file, with proper imports and no missing modules.

Finally, I'll review the code to make sure it aligns with the requirements: validating required fields, raising exceptions when necessary, and returning the parsed data. I'll also check that all the imports are correctly included and that the code is in Python markdown format as specified.
