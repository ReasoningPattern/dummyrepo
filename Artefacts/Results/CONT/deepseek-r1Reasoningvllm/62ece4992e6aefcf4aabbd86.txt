Alright, I need to write a Python function called _dump_string that takes an object and a dumper, and returns a YAML stream. The function is supposed to serialize the object into YAML. Let me think about how to approach this.

First, I remember that in Python, the yaml module has a Dumper class that handles serialization. So, if the dumper is None, I should probably create a default one. Maybe I can use yaml FullDumper if it's not provided.

Next, I need to handle different types of objects. If the object is already a string, I can just yield it as a string. If it's a mapping (like a dictionary), I should iterate over its items and serialize each key-value pair. For sequences (like lists), I should process each element individually.

I should also consider nested structures. So, I'll need to recursively call _dump_string on each element. Each value should be checked to see if it's another mapping, sequence, or a string, and handled accordingly.

Wait, what about other data types? Maybe I should check if the object has a __dict__ attribute to handle custom objects. If it does, I can yield the type and then serialize the dictionary of attributes.

Putting it all together, I'll structure the function with these steps:

1. Import yaml at the top.
2. Check if dumper is None and initialize it with FullDumper.
3. Yield 'str' if the object is a string.
4. Check if it's a mapping and yield each key-value pair.
5. Check if it's a sequence and process each element.
6. Handle custom objects by checking for __dict__.
7. For other types, yield their type and value.

I should make sure the function doesn't include any explanations or markdown, just the code. Also, I need to ensure that the code is properly indented and uses the correct methods from the yaml module.

Let me write the code step by step. Start by importing yaml. Then, in the function, handle each case in order. Use isinstance checks for str, collections.abc.Mapping, and collections.abc.Sequence. For custom objects, check if __dict__ exists.

I think that covers the main cases. Now, I'll structure the code accordingly, making sure to use yield statements to produce the YAML stream.
