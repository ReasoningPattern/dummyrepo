Okay, so I need to write a Python function called round_half_to_even that rounds a floating-point number. The user provided a function signature and a docstring, so I should make sure my code matches that exactly. The docstring says "Round a floating-point number," so I need to think about how to implement that.

I remember that Python has a built-in round function, but I think it doesn't always round half to even. Wait, actually, I'm not sure. I think the round function uses "bankers rounding," which rounds to the nearest even number when the number is exactly halfway between two integers. So maybe the built-in round function already does what I need.

But wait, maybe the user expects a custom implementation instead of relying on the built-in function. Let me think about how to implement rounding half to even manually.

First, I need to extract the integer part and the fractional part of the number. If the fractional part is exactly 0.5, I should round to the nearest even integer. Otherwise, I round normally.

So, how do I get the integer part? I can use the math.floor function, but wait, that might not work for negative numbers. For example, floor(-1.3) is -2, which might not be what I want. Alternatively, I can use the int() function, but that truncates towards zero, which might not be correct either. Hmm, perhaps using the decimal module would be better for precise rounding.

Wait, maybe using the built-in round function is sufficient because it already implements round half to even. Let me test that in my mind. For example, round(2.5) is 2, round(3.5) is 4. Yes, that's correct. So maybe the function can simply return the built-in round of n.

But the user provided the function signature, so I should make sure to use it. So the code would be as simple as:

import math
def round_half_to_even(n):
    return round(n)

Wait, but do I need to import math? The user said to not include any explanation, so I should just output the code. Also, the context says to import packages within the file or class, but I don't see any specific imports needed here.

So the final code is just the function returning the built-in round of n. That should handle all cases correctly.
