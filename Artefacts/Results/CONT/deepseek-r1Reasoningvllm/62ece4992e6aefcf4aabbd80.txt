Okay, I need to write a Python function called remove_ending_os_sep that takes an input_list and returns a modified list. The function should remove trailing OS separators from each string in the list, but only if the string's length is greater than one and the last character is a path separator.

First, I'll consider the function signature. It's given as def remove_ending_os_sep(input_list):, so I just need to fill in the body.

The docstring says that if input_list is None, return an empty list. So I'll check if input_list is None at the beginning. If it is, return [].

Next, for each string in the input_list, I need to process it. For each string, I'll check if its length is greater than one. If not, I'll leave it as is.

If the string's length is more than one, I'll look at the last character. If it's either '/' or '\', which are the OS separators, I'll slice the string to remove that last character. Otherwise, I'll leave it unchanged.

I can create a new list to store the processed strings. I'll loop through each item in input_list, apply the checks, and append the result to the new list.

Putting it all together, I'll initialize an empty list. Then, loop through each item, apply the conditions, and build the result list. Finally, return this list.

Wait, what about edge cases? Like an empty string or a string with only one character. The function should handle those by not modifying them. Also, if the input is None, it returns an empty list as specified.

So the code structure would be:

- Check if input_list is None, return empty list.
- Initialize an empty result list.
- Loop through each item in input_list:
  - If item length > 1:
    - If last character is os.sep:
      - Slice the string to remove last character
    - Else:
      - Keep the string as is
  - Append the processed string to result
- Return the result list.

I think that covers all the cases. Now, I'll write the code accordingly.
