<think>

</think>

```python
def mru_cache(maxsize=128, typed=False):
    """
    Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Most Recently Used (MRU)
    algorithm.
    """
    def decorator(func):
        cache = {}
        keys = []

        def wrapper(*args, **kwargs):
            nonlocal keys
            key = args if not typed else (args, frozenset(kwargs.items()))
            if key in cache:
                # Move the key to the front (MRU)
                keys.remove(key)
                keys.append(key)
                return cache[key]
            if len(keys) >= maxsize:
                # Remove the oldest key (LRU)
                oldest_key = keys.pop(0)
                del cache[oldest_key]
            keys.append(key)
            cache[key] = func(*args, **kwargs)
            return cache[key]

        return wrapper

    return decorator
```