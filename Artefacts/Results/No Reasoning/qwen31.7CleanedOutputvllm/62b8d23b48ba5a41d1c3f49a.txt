def mru_cache(maxsize=128, typed=False):
	"""
	Decorator to wrap a function with a memoizing callable that saves
up to `maxsize` results based on a Most Recently Used (MRU)
algorithm.
	"""

	from functools import wraps
	import collections

	class MRUCache:
		def __init__(self, maxsize, typed):
			self.maxsize = maxsize
			self.typed = typed
			self.cache = {}
			self._last_used = collections.deque()

		def __call__(self, func):
			@wraps(func)
			def wrapper(*args, **kwargs):
				key = (args, kwargs)
				if self.typed:
					key = (args, kwargs)
				else:
					key = (args, kwargs)
				if key in self.cache:
					self._last_used.append(key)
					self.cache[key] = self.cache[key] + 1
				else:
					self.cache[key] = 1
					self._last_used.append(key)
				if len(self.cache) > self.maxsize:
					# Remove the least recently used item
					self.cache.pop(self._last_used.popleft())
				return func(*args, **kwargs)
			return wrapper

		return MRUCache(maxsize, typed)