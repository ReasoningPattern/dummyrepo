import os
import shutil
from pathlib import Path
from typing import Optional, Union

def prepare_repository_from_archive(
    archive_path: str,
    filename: Optional[str] = None,
    tmp_path: Union[PosixPath, str] = "/tmp",
) -> str:
    """
    Given an existing archive_path, uncompress it.
    Returns a file repo url which can be used as origin url.

    This does not deal with the case where the archive passed along does not exist.
    @param archive_path : archive file path
    @param filename: File name
    @param tmp_path: Temporary file path
    @return Repo URL
    """
    # Create temporary directory if it doesn't exist
    tmp_dir = Path(tmp_path)
    tmp_dir.mkdir(parents=True, exist_ok=True)

    # Set default filename if not provided
    if filename is None:
        filename = os.path.basename(archive_path)

    # Extract archive to temporary directory
    extract_path = tmp_dir / filename
    shutil.unpack_archive(archive_path, extract_path)

    # Return the repo URL (example, replace with actual logic)
    return f"https://github.com/{filename}"