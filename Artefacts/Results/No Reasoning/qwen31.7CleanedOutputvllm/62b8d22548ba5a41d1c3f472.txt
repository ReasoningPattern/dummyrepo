def cachedmethod(cache, key=hashkey, lock=None):
	"""
	Returns a decorator function that can call a result in the cache.
	"""
	def decorator(func):
		def wrapper(*args, **kwargs):
			# Generate key based on function and arguments
			key_func = lambda args, kwargs: key(args, kwargs)
			key_val = key_func(args, kwargs)
			
			# Check if key exists in cache
			if key_val in cache:
				return cache[key_val]
			
			# If lock is provided, acquire it
			if lock is not None:
				lock.acquire()
			
			# Call the function
			result = func(*args, **kwargs)
			
			# Store result in cache
			cache[key_val] = result
			
			# If lock is provided, release it
			if lock is not None:
				lock.release()
			
			return result
		return wrapper
	return decorator