import subprocess
import signal

def subprocess_run_helper(func, *args, timeout, extra_env=None):
    """
    Run a function in a sub-process

    Args:
            func: function, the function to be run. It must be in a module that is importable.
            *args: str. Any additional command line arguments to be passed in
                        the first argument to ``subprocess.run``.
            extra_env: dict[str, str]. Any additional environment variables to be set for the subprocess.
    Returns:
            CompletedProcess instance
    """
    if extra_env is None:
        extra_env = {}
    
    # Create a new process with the extra environment
    process = subprocess.Popen(
        [func.__module__ + '.' + func.__name__],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        preexec_fn=lambda: os.setenv('PYTHONPATH', os.environ.get('PYTHONPATH', '')),
        env=extra_env,
        stdin=subprocess.PIPE,
        text=True
    )
    
    # Set the timeout
    process.poll_timeout = timeout
    
    # Run the function
    result = process.communicate(*args)
    
    # Signal the process to terminate
    process.send_signal(signal.SIGTERM)
    
    # Wait for the process to terminate
    process.wait()
    
    return subprocess.CompletedProcess(result[0], result[1], cmd=func.__module__ + '.' + func.__name__)