def scale(self, other=None, recompute=False):
    """
    Compute or set scale (integral of the histogram).

    If *other* is ``None``, return scale of this histogram.
    If its scale was not computed before,
    it is computed and stored for subsequent use
    (unless explicitly asked to *recompute*).
    Note that after changing (filling) the histogram
    one must explicitly recompute the scale
    if it was computed before.

    If a float *other* is provided, rescale self to *other*.

    Histograms with scale equal to zero can't be rescaled.
    :exc:`.LenaValueError` is raised if one tries to do that.
    """
    if other is not None:
        if not isinstance(other, (int, float)):
            raise ValueError("other must be int or float")
        if self.scale == 0:
            raise ValueError("Cannot rescale histogram with scale zero")
        if not recompute:
            if self.scale != other:
                self._rescale(other)
        else:
            self._rescale(other)
    else:
        if self.scale is None:
            self._compute_scale()
        return self.scale