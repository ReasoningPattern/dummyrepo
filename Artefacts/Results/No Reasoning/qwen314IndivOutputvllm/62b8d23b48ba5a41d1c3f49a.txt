<think>

</think>

```python
def mru_cache(maxsize=128, typed=False):
    """
    Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Most Recently Used (MRU)
    algorithm.
    """
    from functools import wraps
    from collections import OrderedDict

    def decorator(func):
        cache = OrderedDict()

        @wraps(func)
        def wrapper(*args, **kwargs):
            key = (args, frozenset(kwargs.items())) if typed else (args, kwargs)
            if key in cache:
                # Move the accessed item to the end to mark it as most recently used
                cache.move_to_end(key)
                return cache[key]
            else:
                # If the cache is at maxsize, remove the least recently used item
                if len(cache) >= maxsize:
                    cache.popitem(last=False)
                result = func(*args, **kwargs)
                cache[key] = result
                return result

        return wrapper

    return decorator
```