<think>

</think>

```python
from typing import Tuple, Set, Callable
import re

def find_tags(text: str, replacer: Callable = None) -> Tuple[Set, str]:
    """
    Find tags in text.

    Tries to ignore tags inside code blocks.

    Optionally, if passed a "replacer", will also replace the tag word with the result
    of the replacer function called with the tag word.

    Returns a set of tags and the original or replaced text.
    """
    # Regular expression to match tags, assuming tags are words in the format #tag
    tag_pattern = r'#(\w+)'
    # Regular expression to match code blocks (assuming code blocks are enclosed in triple backticks)
    code_block_pattern = re.compile(r'```.*?```', re.DOTALL)

    # Find all code blocks and replace them with placeholders
    code_blocks = code_block_pattern.findall(text)
    placeholder = '***CODEBLOCK***'
    for i, block in enumerate(code_blocks):
        text = text.replace(block, f'{placeholder}{i}', 1)

    # Find tags outside of code blocks
    tags = set()
    # Use a regex to find all tags that are not inside code blocks
    # This is a simplified approach; more complex logic may be needed for robustness
    for match in re.finditer(tag_pattern, text):
        tag = match.group(1)
        tags.add(tag)

    # Replace the placeholders back with the original code blocks
    for i, block in enumerate(code_blocks):
        text = text.replace(f'{placeholder}{i}', block, 1)

    # If a replacer function is provided, replace the tags in the text
    if replacer:
        # Use a regex to replace tags with the result of the replacer function
        text = re.sub(tag_pattern, lambda m: replacer(m.group(1)), text)

    return tags, text
```