def lru_cache(maxsize=128, typed=False):
    """
    Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Least Recently Used (LRU)
    algorithm.
    """
    def decorator(func):
        cache = {}
        hits = 0
        misses = 0

        def wrapper(*args, **kwargs):
            nonlocal hits, misses
            key = args if not typed else (func.__name__, args, frozenset(kwargs.items()))
            if key in cache:
                hits += 1
                return cache[key]
            misses += 1
            result = func(*args, **kwargs)
            cache[key] = result
            if len(cache) > maxsize:
                cache.popitem(last=False)
            return result

        wrapper.cache_info = lambda: (hits, misses, len(cache))
        wrapper.cache_clear = lambda: cache.clear()
        return wrapper

    return decorator