def lfu_cache(maxsize=128, typed=False):
    """
    Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Least Frequently Used (LFU)
    algorithm.
    """
    cache = {}
    usage = {}
    keys = []

    def make_key(args, kwargs):
        if typed:
            return (args, tuple(sorted(kwargs.items())))
        return args

    def wrapper(func):
        def inner(*args, **kwargs):
            key = make_key(args, kwargs)
            if key in cache:
                usage[key] += 1
                return cache[key]
            if len(cache) >= maxsize:
                # Find the key with the minimum usage
                lfu_key = min(keys, key=lambda k: usage[k])
                del cache[lfu_key]
                del usage[lfu_key]
                keys.remove(lfu_key)
            cache[key] = func(*args, **kwargs)
            usage[key] = 1
            keys.append(key)
            return cache[key]
        return inner
    return wrapper