def validate_version_inventories(self, version_dirs):
    """
    Each version SHOULD have an inventory up to that point.

    Also keep a record of any content digests different from those in the root inventory
    so that we can also check them when validating the content.

    version_dirs is an array of version directory names and is assumed to be in
    version sequence (1, 2, 3...).
    """
    root_inventory = self._get_root_inventory()
    if not root_inventory:
        raise ValueError("Root inventory not found")

    version_inventories = {}
    content_digests = {}

    for version_dir in version_dirs:
        inventory_path = os.path.join(version_dir, "inventory.json")
        if not os.path.exists(inventory_path):
            raise FileNotFoundError(f"Inventory file not found in version directory: {version_dir}")

        inventory = self._load_inventory(inventory_path)
        version_inventories[version_dir] = inventory

        for content_id, digest in inventory.items():
            if content_id in root_inventory:
                if root_inventory[content_id] != digest:
                    content_digests[content_id] = (root_inventory[content_id], digest)
            else:
                content_digests[content_id] = (None, digest)

    return version_inventories, content_digests