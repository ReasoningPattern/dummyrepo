def extostr(cls, e, max_level=30, max_path_level=5):
	"""
	Format the exception as a string
	"""
	import traceback
	import sys
	import inspect

	result = []
	exception_type = type(e)
	exception_name = exception_type.__name__
	exception_message = str(e)
	result.append(f"{exception_name}: {exception_message}")

	# Get the traceback
	tb = e.__traceback__
	frame = tb
	level = 0
	path_level = 0

	while frame and level < max_level:
		# Get the filename, line number, and function name
		filename = inspect.getframeinfo(frame).filename
		line_number = inspect.getframeinfo(frame).lineno
		function_name = inspect.getframeinfo(frame).function

		# Append the stack frame information
		result.append(f"  File \"{filename}\", line {line_number}, in {function_name}")

		# Check if the filename is part of the Python standard library or site-packages
		if path_level < max_path_level:
			# Check if the filename is in a standard library or site-packages directory
			if any(part in filename for part in ["site-packages", "lib/python", "dist-packages"]):
				path_level += 1
				continue

		# Get the source code line
		try:
			with open(filename, 'r') as f:
				lines = f.readlines()
				if line_number - 1 < len(lines):
					line = lines[line_number - 1].rstrip('\n')
					result.append(f"    {line}")
		except Exception:
			pass

		frame = frame.tb_next
		level += 1

	return '\n'.join(result)