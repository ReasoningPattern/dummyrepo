<think>

</think>

```python
import subprocess
import os

def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):
    """
    A list of command is given. Run the given command(s) with the given arguments use a subprocess. Return the running result (stdout and returncode)
    """
    process = None
    try:
        # Determine the command to run
        if isinstance(commands, str):
            command = commands
            args = args or []
        else:
            command = commands[0]
            args = commands[1:] if len(commands) > 1 else []

        # Construct the command with arguments
        args = [str(arg) for arg in args]
        full_command = [command] + args

        # Set environment if provided
        if env:
            os.environ.update(env)

        # Run the command
        process = subprocess.Popen(
            full_command,
            cwd=cwd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            env=env
        )

        # Capture stdout and stderr
        stdout, stderr = process.communicate()

        # Return result
        return {
            'stdout': stdout,
            'stderr': stderr,
            'returncode': process.returncode
        }

    except Exception as e:
        if verbose:
            raise e
        return {
            'stdout': '',
            'stderr': str(e),
            'returncode': 1
        }

    finally:
        if process:
            process.terminate()
            process.wait()
```