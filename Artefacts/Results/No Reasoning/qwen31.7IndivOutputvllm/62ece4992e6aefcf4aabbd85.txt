<think>

</think>

```python
from rdflib import Graph, URIRef
from rdflib.namespace import RDFS

def find_roots(
    graph: "Graph", prop: "URIRef", roots: Optional[Set["Node"]] = None
) -> Set["Node"]:
    """
    Find the roots in some sort of transitive hierarchy.

    find_roots(graph, rdflib.RDFS.subClassOf)
    will return a set of all roots of the sub-class hierarchy

    Assumes triple of the form (child, prop, parent), i.e. the direction of
    RDFS.subClassOf or SKOS.broader

    Args:
        graph: Graph Class Object
        prop: URIRef Class Object
        roots: Optional list with set type

    Return:
        roots: a set with nodes
    """
    if roots is None:
        roots = set()
    
    # Find all nodes that are roots in the hierarchy
    # Start with nodes that have no predecessors
    queue = set()
    visited = set()
    
    for node in graph:
        if node not in visited:
            if prop in graph[node]:
                for neighbor in graph[node][prop]:
                    if neighbor not in visited:
                        visited.add(neighbor)
                        queue.append(neighbor)
    
    while queue:
        current = queue.pop()
        if current not in roots:
            roots.add(current)
    
    return roots
```