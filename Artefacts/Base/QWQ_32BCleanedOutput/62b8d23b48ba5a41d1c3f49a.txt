from functools import wraps
from collections import OrderedDict

def mru_cache(maxsize=128, typed=False):
    def decorator(func):
        cache = OrderedDict()
        @wraps(func)
        def wrapper(*args, **kwargs):
            key_args = []
            for arg in args:
                if typed:
                    key_args.append((arg, type(arg)))
                else:
                    key_args.append(arg)
            key_kwargs = []
            for k, v in sorted(kwargs.items()):
                if typed:
                    key_kwargs.append((k, (v, type(v))))
                else:
                    key_kwargs.append((k, v))
            key = (tuple(key_args), tuple(key_kwargs))
            if key in cache:
                cache.move_to_end(key, last=True)
                return cache[key]
            else:
                val = func(*args, **kwargs)
                cache[key] = val
                if len(cache) > maxsize:
                    cache.popitem(last=False)
                return val
        return wrapper
    return decorator