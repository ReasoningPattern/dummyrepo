Okay, I need to generate Python code based on the given function signature and docstring. The function is called on, and it's a method that returns a decorator function. The docstring says it's used to add a new handler to a "hook" in the registry within the class.

First, I'll start by defining the outer function, on, which takes self and hook as parameters. Inside this function, I'll define an inner decorator function that takes another function, func, as an argument.

The decorator's purpose is to modify the behavior of func. It should update a registry, probably a dictionary, where each key is a hook name and the value is the handler. So, I'll check if hook is already in the registry. If it's not, I'll add it with the handler. If it is, I'll append the handler to the existing list, making sure to handle cases where the list might be empty to avoid errors.

I'll initialize the registry as a dictionary inside the decorator to ensure it's created each time the decorator is used. Then, I'll write the __call__ method for the decorator so that when it's called, it performs the registry update.

Putting it all together, the outer function returns this decorator, which can then be applied to functions that need to be registered under a specific hook.

I should make sure the code is clean and follows standard practices, using try-except blocks to handle cases where the list might be empty, using a default empty list so that appending doesn't cause issues.
