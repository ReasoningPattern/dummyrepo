Okay, I need to write a Python function called _dictsum that takes a list of dictionaries and returns a new dictionary where the values are summed for each key. Let me think about how to approach this.

First, I should consider the example given. If we have two dictionaries, dict1 and dict2, the function should add their values for each key. For instance, 'a' in dict1 is 1 and in dict2 it's 5, so the result is 6. Similarly, 'b' is 2 and 0, so it's 2.

I'll start by initializing an empty dictionary to hold the summed values. Let's call it result. Then, I need to iterate through each dictionary in the input list. For each dictionary, I'll loop through its key-value pairs.

For every key-value pair, I'll check if the key already exists in the result dictionary. If it does, I'll add the current value to the existing one. If not, I'll create a new entry with the current key and value.

Wait, but what if the input list is empty? The function should handle that gracefully, returning an empty dictionary. Also, what if a dictionary has multiple keys? The function should process all of them.

Let me outline the steps:
1. Initialize an empty dictionary, result.
2. Loop through each dictionary in the input list (dicts).
3. For each dictionary, loop through each key-value pair.
4. For each key, check if it's in result:
   a. If yes, add the value to the existing value.
   b. If no, add the key to result with its value.
5. Return the result dictionary.

Now, how to implement this in code. I'll start with the function definition. The function is called _dictsum and takes one parameter, dicts.

Inside the function, I'll create an empty dictionary: result = {}

Then, for each d in dicts:
   for key, value in d.items():
       if key in result:
           result[key] += value
       else:
           result[key] = value

That should cover all cases. Let me test this logic with the example given.

dict1 = {'a': 1, 'b': 2}
dict2 = {'a': 5, 'b': 0}
 dicts = [dict1, dict2]

Processing dict1:
- 'a' is added to result as 1.
- 'b' is added as 2.

Processing dict2:
- 'a' exists, so 1 + 5 = 6.
- 'b' exists, so 2 + 0 = 2.

Result is {'a':6, 'b':2}, which matches the example.

What if there are more dictionaries or different keys? The code should handle them by summing each key's values across all dictionaries.

I think this should work. Now, I'll write the code accordingly.
