def lfu_cache(maxsize=128, typed=False):
    def decorator(func):
        cache = {}
        count = {}
        def wrapper(*args, **kwargs):
            key = (args, kwargs)
            if key in cache:
                count[key] += 1
                return cache[key]
            result = func(*args, **kwargs)
            cache[key] = result
            count[key] = 1
            if len(cache) > maxsize:
                min_count = min(count.values())
                candidates = [k for k, v in count.items() if v == min_count]
                key_to_evict = candidates[0]
                del cache[key_to_evict]
                del count[key_to_evict]
            return result
        return wrapper
    return decorator