

```python
import functools
from collections import OrderedDict

def lru_cache(maxsize=128, typed=False):
    """
    Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Least Recently Used (LRU)
    algorithm.
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            if kwargs:
                raise TypeError("Keyword arguments are not supported")
            if typed:
                key = tuple((arg, type(arg)) for arg in args)
            else:
                key = args
            if key in cache:
                cache.move_to_end(key)
                return cache[key]
            else:
                result = func(*args)
                cache[key] = result
                if maxsize is not None and len(cache) > maxsize:
                    cache.popitem(last=False)
                return result
        cache = OrderedDict()
        return wrapper
    return decorator
```