

```python
import os
import json

def validate_version_inventories(self, version_dirs):
    discrepancies = []
    if not version_dirs:
        return discrepancies
    root_dir = version_dirs[0]
    root_inventory_path = os.path.join(root_dir, 'inventory.json')
    if not os.path.exists(root_inventory_path):
        discrepancies.append(f"Root inventory missing in {root_dir}")
        return discrepancies
    with open(root_inventory_path, 'r') as f:
        root_inventory = json.load(f)
    
    for dir in version_dirs[1:]:
        inventory_path = os.path.join(dir, 'inventory.json')
        if not os.path.exists(inventory_path):
            discrepancies.append(f"Missing inventory in {dir}")
            continue
        with open(inventory_path, 'r') as f:
            current_inventory = json.load(f)
        # Check for missing or mismatched content from root
        for content, digest in root_inventory.items():
            current_digest = current_inventory.get(content)
            if current_digest is None:
                discrepancies.append(f"Content {content} missing in {dir} inventory")
            elif current_digest != digest:
                discrepancies.append(f"Digest mismatch for {content} in {dir}: {current_digest} vs {digest}")
        # Check for new content in current inventory
        for content, digest in current_inventory.items():
            if content not in root_inventory:
                discrepancies.append(f"New content {content} found in {dir} inventory not present in root")
    return discrepancies
```