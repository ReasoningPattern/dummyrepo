

To solve this problem, we need to generate Python code that updates a context dictionary with properties of a graph. The context dictionary is used to store error information, and the function should update this context based on the properties of the graph.

### Approach
The function `_update_context` is designed to update the context dictionary with error information. The context dictionary is expected to have keys such as 'x', 'y', and 'z', which represent the coordinates of the graph. For each of these coordinate keys, the function should create an entry in the 'error' context with a key that is the coordinate name suffixed with '_low' and the value being the index of that coordinate in the list of coordinates.

The steps to achieve this are as follows:
1. Check if the context is a dictionary.
2. Collect all the coordinate keys ('x', 'y', 'z') from the context.
3. For each coordinate key, create a new key by appending '_low' to the original key.
4. Add this new key to the 'error' context with the value being the index of the original key in the list of coordinates.

### Solution Code
```python
def _update_context(self, context):
    if not isinstance(context, dict):
        return
    coords = [k for k in context.keys() if k in {'x', 'y', 'z'}]
    for i, coord in enumerate(coords):
        error_key = coord + '_low'
        context['error'][error_key] = {'index': i}
```

### Explanation
The function `_update_context` takes two parameters: `self` and `context`. The `context` is a dictionary that needs to be updated with error information. The function first checks if the context is a dictionary. If it is not, the function returns immediately.

Next, the function collects all the keys from the context that are 'x', 'y', or 'z'. These keys represent the coordinates of the graph. For each of these coordinate keys, the function creates a new key by appending '_low' to the original key. This new key is added to the 'error' context, and the value is set to the index of the original coordinate key in the list of collected coordinate keys.

This approach ensures that each coordinate property is correctly updated in the context dictionary with its corresponding error information, allowing for easy tracking and plotting of errors during the destruction of the graph.