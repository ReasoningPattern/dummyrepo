

To solve this problem, we need to generate Python code that validates a YAML file to ensure it contains all required fields as defined by a given class. The function should raise an exception if any required field is missing and return the loaded data if all fields are present.

### Approach
1. **Import Necessary Modules**: We need to import the `yaml` module for loading YAML files and the `IRValidatorException` for raising custom exceptions. Additionally, we use the `inspect` module to analyze the class's `__init__` method parameters.
2. **Check for Required YAML File**: The function should raise an error if the YAML file path is not provided.
3. **Load YAML Data**: Use the `yaml.safe_load` method to load the YAML file into a dictionary.
4. **Determine Required Fields**: Extract the required fields from the class's `__init__` method parameters. This includes all parameters that are not `self` and do not have a default value.
5. **Validate Required Fields**: Check if all required fields are present in the loaded YAML data. If any required field is missing, raise an `IRValidatorException`.
6. **Return Data**: If all required fields are present, return the loaded data.

### Solution Code
```python
import yaml
from some_module import IRValidatorException
import inspect

def validate_from_file(cls, yaml_file=None):
    """
    Validates that a YAML file contains all required fields as defined by the class's __init__ method.

    :param cls: The class used to determine required fields.
    :param yaml_file: Path to the YAML file.
    :raises IRValidatorException: If any required field is missing.
    :return: The loaded data as a dictionary.
    """
    if yaml_file is None:
        raise ValueError("yaml_file must be provided")
    
    with open(yaml_file, 'r') as f:
        data = yaml.safe_load(f)
    
    if hasattr(cls, '__init__'):
        sig = inspect.signature(cls.__init__)
        parameters = sig.parameters.values()
        required_fields = set()
        for param in parameters:
            if param.kind in (param.POSITIONAL_ONLY, param.POSITIONAL_OR_KEYWORD, param.KEYWORD_ONLY):
                if param.name != 'self' and param.default == param.empty:
                    required_fields.add(param.name)
    else:
        required_fields = set()
    
    for field in required_fields:
        if field not in data:
            raise IRValidatorException(f"Missing required field: {field}")
    
    return data
```

### Explanation
- **Importing Modules**: The `yaml` module is used to load the YAML file, and `IRValidatorException` is imported for raising custom exceptions. The `inspect` module helps in analyzing the class's `__init__` method.
- **Checking YAML File**: The function immediately raises an error if `yaml_file` is `None`.
- **Loading YAML Data**: The YAML file is read and parsed into a dictionary using `yaml.safe_load`.
- **Extracting Required Fields**: The function checks the `__init__` method of the class to determine required fields. This is done by inspecting each parameter of the `__init__` method, excluding `self`, and considering parameters without default values as required.
- **Validation**: Each required field is checked against the loaded data. If any field is missing, an exception is raised.
- **Returning Data**: If all required fields are present, the function returns the loaded data.

This approach ensures that the function dynamically determines the required fields based on the class's constructor, providing flexibility and adhering to the problem requirements.