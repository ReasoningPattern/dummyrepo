

To solve this problem, we need to convert a histogram into a graph structure where each bin of the histogram is represented as a point in the graph. The point's coordinates and values are determined based on the provided parameters.

### Approach
The function `hist_to_graph` takes a histogram and converts it into a graph. The conversion involves several steps:

1. **Determine the X-coordinate**: Each bin's x-coordinate is determined based on the `get_coordinate` parameter. This can be the lower bound, upper bound, or the midpoint of the bin.
2. **Apply `make_value` Function**: This function is used to set the value(s) of each point. If `make_value` is `None`, the bin's content is used as the value.
3. **Create Points**: Each point is created with the determined x-coordinate followed by the values returned by `make_value`. The structure of these points is based on the `field_names` provided.
4. **Initialize and Add Points to Graph**: The graph is initialized with the given `field_names` and `scale`. Each point is added to this graph.

### Solution Code
```python
def hist_to_graph(hist, make_value=None, get_coordinate="left", field_names=("x", "y"), scale=None):
    """
    Convert a :class:`.hist` to a :class:`.graph`.

    *make_value* is a function to set the value of a graph's point.
    By default it is bin content.
    *get_coordinate* defines what the coordinate of a graph point will be.
    It can be "left" (default), "right" and "middle".

    *field_names* set field names of the graph. Their number must match the dimension of the result.
    For a *make_value* returning a tuple, the length must match the number of field names.
    *scale* becomes the graph's scale (unknown by default).
    """
    graph = Graph(field_names, scale=scale)
    for bin_ in hist:
        if get_coordinate == "left":
            x = bin_.lower_bound
        elif get_coordinate == "right":
            x = bin_.upper_bound
        elif get_coordinate == "middle":
            x = (bin_.lower_bound + bin_.upper_bound) / 2
        else:
            raise ValueError("Invalid get_coordinate value")
        
        if make_value is None:
            value = bin_.content
        else:
            value = make_value(bin_)
        
        point = (x,) + value
        graph.add_point(point)
    return graph
```

### Explanation
- **Initialization**: The graph is initialized with the provided `field_names` and `scale`. This sets up the structure for the graph to hold the points.
- **Loop Through Bins**: For each bin in the histogram, the x-coordinate is determined based on the `get_coordinate` parameter. The `make_value` function is then applied to get the value(s) for the point.
- **Create Points**: Each point is created by combining the x-coordinate with the values returned by `make_value`. This ensures that each point in the graph corresponds to a bin in the histogram.
- **Add Points**: Each created point is added to the graph, building up the complete graph structure.

This approach ensures that the histogram is accurately converted into a graph, with each bin's data correctly represented as points in the graph. The flexibility of the `make_value` function allows for various ways to extract and format the bin values according to specific needs.