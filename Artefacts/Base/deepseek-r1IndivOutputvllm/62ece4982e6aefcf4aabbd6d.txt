

To solve this problem, we need to convert a string into an integer based on a given alphabet. Each character in the string corresponds to a position in the alphabet, and the integer is formed by treating these positions as digits in a base equal to the length of the alphabet.

### Approach
1. **Understand the Problem**: Each character in the string maps to an index in the given alphabet. The string is treated as a number in a base equal to the length of the alphabet, where each character's index is a digit.
2. **Base Conversion**: The conversion process is similar to converting a string of digits into an integer. For each character in the string, we find its index in the alphabet and compute the integer by treating these indices as digits in the base equal to the length of the alphabet.
3. **Iterative Calculation**: We initialize a result variable to 0. For each character in the string, we update the result by multiplying the current result by the base (length of the alphabet) and adding the index of the current character.

### Solution Code
```python
from typing import List

def string_to_int(string: str, alphabet: List[str]) -> int:
    base = len(alphabet)
    result = 0
    for char in string:
        index = alphabet.index(char)
        result = result * base + index
    return result
```

### Explanation
- **Base Calculation**: The base is determined as the length of the alphabet.
- **Result Initialization**: We start with a result of 0.
- **Character Processing**: For each character in the string, we find its index in the alphabet. This index is treated as a digit in the base conversion.
- **Iterative Update**: For each character, the result is updated by multiplying the current result by the base and adding the index of the current character. This effectively builds the integer digit by digit.

This approach efficiently converts the string into an integer by leveraging base conversion principles, ensuring that each character contributes to the final integer value based on its position in the alphabet.