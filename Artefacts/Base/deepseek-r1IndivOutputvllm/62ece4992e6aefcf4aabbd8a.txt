

```python
import logging
from configparser import ConfigParser

def load_configurations(config_filenames, overrides=None, resolve_env=True):
    """
    Given a sequence of configuration filenames, load and validate each configuration file. If the configuration file
    cannot be read due to insufficient permissions or error parsing configuration file, the error log will
    be recorded. Otherwise, return the results as a tuple of: dict of configuration filename to corresponding parsed configuration,
    and sequence of logging.LogRecord instances containing any parse errors.
    """
    configs = {}
    error_log = []
    
    for filename in config_filenames:
        try:
            with open(filename, 'r', encoding='utf-8') as file:
                parser = ConfigParser()
                parser.read(file)
                
                if overrides is not None:
                    merged_configs = {**parser, **overrides}
                    configs[filename] = merged_configs
                else:
                    configs[filename] = parser
        
        except IOError as e:
            logging.error(f"Failed to read configuration file: {filename}")
            error_log.append(logging.LogRecord(filename=filename, exc_type=e.__class__.__name__, exc=e, msg=f"Could not read configuration file {filename}: {str(e)}"))
        except Exception as e:
            logging.error(f"Error parsing configuration file: {filename}")
            error_log.append(logging.LogRecord(filename=filename, exc_type=e.__class__.__name__, exc=e, msg=f"Error parsing configuration file {filename}: {str(e)}"))
    
    return configs, error_log
```