

```python
import re

class Link:
    def __init__(self, start, end):
        self.start = start
        self.end = end
    
    def __str__(self):
        return f"Link({self.start}-{self.end})"

def process_text_links(text):
    """
    Process links in text, adding some attributes and linkifying textual links.
    """
    link_words = ["click", "visit", "go", "see", "read", "download"]
    
    # Split text into tokens while preserving punctuation
    tokens = re.findall(r"([a-zA-Z]+('[a-zA-Z]+)?|[\w']+|\S+)", text)
    
    links = []
    
    for i in range(len(tokens)):
        token = tokens[i]
        if token in link_words:
            # Look for preceding noun phrase
            for j in range(i-3, max(-5, i-3), -1):
                prev_token = tokens[j]
                if isinstance(prev_token, str) and prev_token.isalpha():
                    # Check if previous token and current token form a valid link
                    links.append(Link(j, i))
                    break
    
    # Highlight links in the original text
    highlighted_text = []
    link_indices = set()
    
    for link in links:
        link_indices.add(link.start)
        link_indices.add(link.end)
    
    for i in range(len(tokens)):
        token = tokens[i]
        if i in link_indices:
            highlighted_text.append(f"**{token}**")
        else:
            highlighted_text.append(token)
    
    return " ".join(highlighted_text)
```