

To solve this problem, we need to generate Python code that uses the git command to list all files in the current directory, filters out the ignored files, sorts them, and returns them as a comma-separated string. 

### Approach
The approach involves the following steps:
1. **Run the Git Command**: Use the git command `ls -a` to list all files in the current directory. This includes hidden files and subdirectory files.
2. **Capture Output**: Capture the output of the git command and handle any errors that might occur during execution.
3. **Split Output into List**: Convert the output into a list of filenames.
4. **Filter Ignored Files**: Filter the list to include only the ignored files.
5. **Sort the List**: Sort the filtered list of ignored files alphabetically.
6. **Join into String**: Join the sorted list into a single string with each filename separated by a comma.

### Solution Code
```python
import subprocess

def addignored(ignored):
    """
    Use the git command to obtain the file names.
    Turn the file names into a list, sort the list for only ignored files
    return those files as a single string with each filename separated by a comma.
    """
    # Run git ls -a to get all files
    result = subprocess.run(['git', 'ls', '-a'], 
                            capture_output=True, 
                            text=True, 
                            shell=True)
    if result.returncode != 0:
        raise ValueError(f"Git command failed: {result.stderr}")
    files = result.stdout.strip().split('\n')
    # Filter the ignored files
    ignored_files = [file for file in files if file in ignored]
    # Sort the ignored files
    ignored_files.sort()
    # Join into a comma-separated string
    return ','.join(ignored_files)
```

### Explanation
- **Running Git Command**: The `subprocess.run` function is used to execute the git command `ls -a`, which lists all files in the current directory.
- **Error Handling**: The function checks if the git command was successful. If not, it raises a ValueError with the error message.
- **Output Handling**: The output from the git command is captured and split into individual filenames.
- **Filtering and Sorting**: The filenames are filtered to include only those in the `ignored` list, which is then sorted alphabetically.
- **String Joining**: The sorted list of ignored files is joined into a single string with each filename separated by a comma.

This approach ensures that we efficiently retrieve, filter, sort, and format the file names as required.