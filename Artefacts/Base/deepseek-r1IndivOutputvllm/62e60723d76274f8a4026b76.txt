

To solve this problem, we need to create a function that converts a given number of nanoseconds since midnight into a `datetime.time` object. The function should validate the input to ensure it falls within the valid range and then split the nanoseconds into hours, minutes, and seconds.

### Approach
1. **Validation**: The function first checks if the input `ticks` (nanoseconds since midnight) is within the valid range of 0 to 86400000000000 (24 hours in nanoseconds). If the value is out of bounds, a `ValueError` is raised.
2. **Conversion to Seconds**: The nanoseconds are converted into total seconds by dividing by 1,000,000,000 (since 1 second = 1,000,000,000 nanoseconds).
3. **Time Components**: The total seconds are then split into hours, minutes, and seconds:
   - Hours are obtained by dividing the total seconds by 3600 (since 1 hour = 3600 seconds).
   - Remaining seconds after extracting hours are used to calculate minutes by dividing by 60 (since 1 minute = 60 seconds).
   - The remaining seconds after extracting minutes are the seconds part.
4. **Modulo Operation**: The hours are taken modulo 24 to ensure they fall within the valid range of 0-23.

### Solution Code
```python
import datetime

def from_ticks(cls, ticks, tz=None):
    """
    Create a time from ticks (nanoseconds since midnight).

    :param ticks: nanoseconds since midnight
    :type ticks: int
    :param tz: optional timezone
    :type tz: datetime.tzinfo

    :rtype: Time

    :raises ValueError: if ticks is out of bounds
    """
    if not (0 <= ticks <= 86400000000000):
        raise ValueError("ticks out of bounds")
    total_seconds = ticks // (10**9)
    hours = total_seconds // 3600
    hours %= 24  # Ensure hours are within 0-23
    remaining_seconds = total_seconds % 3600
    minutes = remaining_seconds // 60
    remaining_seconds %= 60
    seconds = remaining_seconds
    return datetime.time(hours, minutes, seconds)
```

### Explanation
- **Validation**: The function starts by validating the input `ticks` to ensure it is within the valid range of 0 to 86400000000000. This ensures that the conversion to time is meaningful.
- **Conversion to Seconds**: The input `ticks` is divided by 1,000,000,000 to convert nanoseconds into total seconds.
- **Time Components Calculation**: The total seconds are split into hours, minutes, and seconds. This is done using integer division and modulo operations to extract each component.
- **Modulo Operation**: The hours are taken modulo 24 to ensure they fall within a valid 24-hour range, avoiding any invalid hour values.

This approach efficiently converts the given nanoseconds into a `datetime.time` object, ensuring accuracy and correctness in the conversion process.