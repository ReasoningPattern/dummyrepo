from collections import deque

class LRU:
    def __init__(self, maxsize=128, typed=False):
        self.cache = {}
        self.maxsize = maxsize
        self.typed = typed
        self.order = deque()

    def __call__(self, func):
        def wrapper(*args, **kwargs):
            if self.maxsize is None:
                self.maxsize = 128
            if self.typed:
                key = (args, kwargs)
            else:
                key = args + tuple(kwargs.items())
            if key in self.cache:
                index = self.order.index(key)
                self.order.pop(index)
                self.order.append(key)
            else:
                if self.maxsize and len(self.cache) >= self.maxsize:
                    removed_key = self.order.popleft()
                    del self.cache[removed_key]
                self.cache[key] = func(*args, **kwargs)
                self.order.append(key)
            return self.cache[key]
        return wrapper