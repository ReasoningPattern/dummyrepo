def on(self, hook):
    """
    Return a decorator function to add a new handler to the "hook" in the registry in the class.
    """
    def decorator(func):
        def __call__(self, *args, **kwargs):
            try:
                registry = self.registry.copy()
                if hook in registry:
                    registry[hook].append(func)
                else:
                    registry[hook] = [func]
                return registry
            except AttributeError:
                self.registry = {}
                registry = self.registry.copy()
                if hook in registry:
                    registry[hook].append(func)
                else:
                    registry[hook] = [func]
                return registry
        return decorator
    return decorator