import time
from functools import partial

def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):
    """
    Decorator to wrap a function with a memoizing callable that saves
    up to `maxsize` results based on a Least Recently Used (LRU)
    algorithm with a per-item time-to-live (TTL) value.
    """
    def decorator(func):
        cache = {}
        last_used = {}

        def wrapper(*args, **kwargs):
            key = args if kwargs else args + tuple(kwargs.values())
            if key in cache:
                if timer() - last_used[key] > ttl:
                    del last_used[key]
                return cache[key]
            result = func(*args, **kwargs)
            cache[key] = result
            last_used[key] = timer()
            return result

        return wrapper

        # functools.partial is used to set default arguments for the decorator
        # Note: functools.partial is not typically used for decorators, but here it's used to
        # demonstrate how default values can be handled when creating the decorator
    return decorator