Okay, I need to write a Python function based on the given signature and docstring. The function is called load_configurations, and it takes three arguments: config_filenames, overrides=None, and resolve_env=True. The docstring explains that the function loads and validates each configuration file, handling errors by logging them, and returns a tuple with a dictionary of filenames to parsed configs and a list of log records for errors.

First, I'll outline what the function needs to do. It should process each config file in the provided list. For each file, it attempts to read and parse it. If it can't be read due to permissions or parsing errors, it logs the error. Otherwise, it parses the config and stores it in a dictionary. 

I'll need to handle exceptions. Reading a file might fail for various reasons, so I'll wrap the file reading and parsing in a try-except block. If an exception occurs, I'll create a LogRecord instance with the filename, error type, and message, then add it to the error_log list.

Next, I'll think about the configuration parsing. Since the function is supposed to validate, maybe using a library like configparser would be appropriate. I'll import ConfigParser and use its methods to read the files. 

For each filename, I'll open it in read-binary mode, which is 'rb' in Python. I'll check if the file was opened successfully. If not, that's an error. Then, I'll use ConfigParser to parse the file. If parsing fails, I'll catch that exception as well.

I should also consider the overrides parameter. If it's provided, maybe the function should merge the parsed configurations with the overrides. But the docstring doesn't specify exactly how, so perhaps the function should apply the overrides to each configuration. I'll need to handle that, but since the user didn't specify, I'll assume that the function parses each config and then merges the overrides into a dictionary that's returned along with the configs.

Wait, the function is supposed to return a tuple of two elements: the dictionary of filenames to configs and the list of log records. So, I'll process each config file, parse it, and if it fails, log the error.

I'll also need to import the logging module to create LogRecord instances. Each LogRecord should have the filename, exception type, exception instance, and exception message. So, I'll create a LogRecord class or use a named tuple. But since the user didn't specify, I'll assume that the logging module is available and that LogRecord is correctly defined elsewhere.

Putting it all together, I'll loop over each config_filename. For each, try to open the file, parse it, and store the result. If any step fails, log the error and continue to the next file.

I should also handle any potential exceptions, like UnicodeDecodeError when opening files in binary mode. So, in the try block, I'll use a with statement to open the file, then use ConfigParser to parse it.

Wait, when opening the file, I should open it in text mode, but the user specified 'resolve_env=True', which might relate to environment variables. But for now, I'll focus on opening the file correctly.

I think I've covered the main points. Now, I'll write the code accordingly, making sure to import the necessary modules and handle exceptions properly.
