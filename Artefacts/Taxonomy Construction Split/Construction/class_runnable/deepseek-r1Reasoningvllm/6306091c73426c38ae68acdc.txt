Alright, I need to generate Python code based on the given function signature and docstring. The function is called validate_from_content and it takes two parameters: cls and spec_content, with spec_content being optional.

First, I'll look at the docstring. It says the function validates that the spec YAML content has all required fields. If mandatory data is missing, it raises an IRValidatorException. It returns a dictionary with the loaded data.

I remember that in Python, using the collections module, specifically defaultdict, is useful for handling cases where dictionary values default to a specific type, like int here. This helps avoid KeyError exceptions when accessing missing keys.

So, the plan is to load the YAML content into a defaultdict with int. I'll use the yaml.safe_load method for safe parsing. I should also handle cases where the file might not exist by returning None, perhaps indicating an error elsewhere.

I'll structure the function by importing necessary modules, then define the function. Inside, I'll check if spec_content is None or an empty string, in which case I'll return None. Otherwise, I'll attempt to load the YAML content. If loading fails, I'll raise an exception. Then, I'll check each required field (required_fields) to ensure they're present and not empty. If any are missing, I'll raise the exception. Finally, I'll return the loaded data as a dictionary.

I'll also make sure to include the necessary imports at the top of the code. The required_fields should be a class-level variable, so I'll define it inside the function with 'self' as the first argument to make it an instance variable.

Putting it all together, I'll write the code ensuring it's clean and follows best practices, handling exceptions properly and returning the correct data structure.
