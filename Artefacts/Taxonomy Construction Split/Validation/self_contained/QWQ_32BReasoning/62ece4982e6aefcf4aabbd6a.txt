Okay, I need to write a Python function called replace_dots that takes two arguments: value and arg. The function's purpose is to replace all the dots in the value string with the arg string. Let me think about how to approach this.

First, the docstring says to replace every '.' with arg. So the input is a string, and the output should be another string where each occurrence of a dot is substituted by arg. The function should return that new string.

Hmm, how do I replace all dots in a string? Oh right, the string's replace method. So maybe something like value.replace('.', arg). But wait, I should check if the inputs are correct. The function's parameters are specified as value and arg, but do they need to be strings? The docstring says "given string" and "new string to replace", so yes, both should be strings. But the function doesn't have any type checking. Since the problem says to generate code based on the signature and docstring, maybe I don't need to add any error handling. Just proceed with the replacement.

Wait, the replace method in Python is case-sensitive. So replacing '.' with arg should handle all instances. Let me think of an example. Suppose value is "hello.world" and arg is "-", then the result would be "hello-world". That seems right.

What about edge cases? Like if arg is an empty string, or if there are no dots in the original string. But the problem says to replace all dots, so even if arg is empty, that's up to the user. The function should just do the replacement as instructed.

So the code would be straightforward. Just return value.replace('.', arg). Oh, but maybe the function should handle if value is None? The docstring doesn't mention that. Since the problem says to replace_dots from the given string, perhaps we can assume that value is a string. So no need for extra checks unless specified. The function's job is just to perform the replacement.

Therefore, the code should be simple. The function definition, then the return statement using the replace method. Let me write that out.

Wait, the function's return type is specified as str, so even if arg is not a string, the function would throw an error, but according to the problem, the parameters are as given. Since the docstring says arg is a new string, maybe the user is supposed to pass a string. So the code should work as is.

Yes, so the code would be:

def replace_dots(value, arg):
    """
    Replaces all values of '.' to arg from the given string
    Args:
        value: old string
        arg: new string to replace '.'
    Returns:
        str, the replaced string
    """
    return value.replace('.', arg)

Wait, but the parameters in the signature are not annotated with types, but the docstring specifies them as strings. The code doesn't need to enforce that, since Python is dynamically typed. So that's all there is to it. The function just uses the replace method. That should do it.
